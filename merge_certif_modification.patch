From 7996d5588ea8401ac27323f8d1df50e75c3db706 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 21 Oct 2019 13:04:22 +0000
Subject: [PATCH 01/46] WIP: Amadeus flow

---
 pygds/amadeus/client.py                |  14 ++++
 pygds/amadeus/price.py                 |  79 ++++++++++++++++++
 pygds/amadeus/xmlbuilders/builder.py   |  42 ++++++++++
 pygds/amadeus/xmlbuilders/sub_parts.py | 106 +++++++++++++++++++++++--
 setup.py                               |   4 +-
 5 files changed, 237 insertions(+), 8 deletions(-)
 create mode 100644 pygds/amadeus/price.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 6b4a342..03e1e92 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -260,3 +260,17 @@ class AmadeusClient(BaseClient):
         response_data = self.__request_wrapper("add_passenger_info", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
         return GetPnrResponseExtractor(response_data).extract()
+
+    def queue_place_pnr(self, message_id: str, pnr: str, queues: List[str]):
+
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if security_token is None:
+            raise NoSessionError(message_id)
+        request_data = self.xml_builder.queue_place_pnr(message_id, session_id, sequence_number, security_token, pnr,
+                                                        queues)
+        response_data = self.__request_wrapper("queue_place_pnr", request_data, 'http://webservices.amadeus.com/QUQPCQ_03_1_1A')
+        print(response_data)
+        return response_data
+        # return GetPnrResponseExtractor(response_data).extract()
+
+    def 
diff --git a/pygds/amadeus/price.py b/pygds/amadeus/price.py
new file mode 100644
index 0000000..65c9b67
--- /dev/null
+++ b/pygds/amadeus/price.py
@@ -0,0 +1,79 @@
+from enum import Enum
+from typing import List
+
+
+class PricingOption:
+    pass
+
+
+class OptionDetail(PricingOption):
+    def __init__(self, attribute_type, passengers: List[str], segments: List[str]):
+        self.attribute_type = attribute_type
+        self.passengers = passengers
+        self.segments = segments
+
+
+class CarrierInformation(PricingOption):
+    pass
+
+
+class Currency(PricingOption):
+    pass
+
+
+class MonetaryInformation(PricingOption):
+    pass
+
+
+class DateInformation(PricingOption):
+    pass
+
+
+class FrequentFlyerInformation(PricingOption):
+    pass
+
+
+class FormOfPaymentInformation(PricingOption):
+    pass
+
+
+class CouponInformation(PricingOption):
+    pass
+
+
+class LocationInformation(PricingOption):
+    pass
+
+
+class PenDisInformation(PricingOption):
+    pass
+
+
+class PaxSegTstReference(PricingOption):
+    pass
+
+
+class TaxValueType(Enum):
+    PERCENTAGE = "P"
+    AMOUNT = "A"
+
+
+class InformativeFareTax:
+    def __init__(self, country, nature, rate, value_type: TaxValueType):
+        self.country = country
+        self.nature = nature
+        self.rate = rate
+        self.value_type = value_type
+
+    def to_data(self):
+        return {
+            "country": self.country,
+            "nature": self.nature,
+            "rate": self.rate,
+            "value_type": self.value_type
+        }
+
+
+class TaxInformation(PricingOption):
+    def __init__(self, tax_infos: List[InformativeFareTax]):
+        self.tax_infos = tax_infos
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index a871ca0..594b79b 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -745,3 +745,45 @@ class AmadeusXMLBuilder:
                </soapenv:Body>
             </soapenv:Envelope>
         """
+
+    def queue_place_pnr(self, message_id: str, session_id: str, sequence_number: str, security_token: str, pnr: str, queues: List[str]):
+        header = self.generate_header("QUQPCQ_03_1_1A", message_id, session_id, sequence_number, security_token)
+        return f"""
+            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+            xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+            xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+            xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+            xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+            xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+            xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            {header}
+            <soapenv:Body>
+                <Queue_PlacePNR>
+                    <placementOption>
+                        <selectionDetails>
+                            <option>QEQ</option>
+                        </selectionDetails>
+                    </placementOption>
+                    {"".join([sub_parts.queue_place_target_queue(self.office_id, q, "0") for q in queues])}
+                    <recordLocator>
+                        <reservation>
+                            <controlNumber>{pnr}</controlNumber>
+                        </reservation>
+                    </recordLocator>
+                </Queue_PlacePNR>
+            </soapenv:Body>
+        </soapenv:Envelope>"""
+
+    def fare_informative_best_pricing_without_pnr(self, message_id, session_id, sequence_number, security_token, numbering: TravellerNumbering, itineraries: List[Itinerary]):
+
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+           {self.generate_header("QUQPCQ_03_1_1A", message_id, session_id, sequence_number, security_token)}
+           <soapenv:Body>
+              <Fare_InformativePricingWithoutPNR>
+                 {sub_parts.fare_informative_price_passengers(numbering)}
+                 {sub_parts.fare_informative_price_segments(itineraries)}
+              </Fare_InformativePricingWithoutPNR>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index d2c1dca..fd8e7a1 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -1,5 +1,6 @@
 from typing import List
 
+from pygds.amadeus.price import InformativeFareTax
 from pygds.core.price import PriceRequest
 from pygds.core.types import TravellerNumbering, Itinerary, FlightSegment
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
@@ -296,18 +297,23 @@ def add_multi_element_contact_element(contact_type, contact):
 
 
 def fare_informative_price_passengers(travellers_info: TravellerNumbering):
-    seq = 1
+    """
+    Fare_InformativePricingWihtoutPNR
+    :param travellers_info:
+    :return:
+    """
+    group_number = 1
     adults, children, infants = "", "", ""
     start = 1
     if travellers_info.adults > 0:
-        adults = _fare_informative_price_passenger_group(seq, start, travellers_info.adults, 'ADT')
+        adults = _fare_informative_price_passenger_group(group_number, start, travellers_info.adults, 'ADT')
         start = travellers_info.adults
-        seq += 1
+        group_number += 1
     if travellers_info.children > 0:
-        children = _fare_informative_price_passenger_group(seq, start, travellers_info.children, 'CH')
-        seq += 1
+        children = _fare_informative_price_passenger_group(group_number, start, travellers_info.children, 'CH')
+        group_number += 1
     if travellers_info.infants > 0:
-        infants = _fare_informative_price_passenger_group(seq, 1, travellers_info.infants, 'INF')
+        infants = _fare_informative_price_passenger_group(group_number, 1, travellers_info.infants, 'INF')
     return f"""
     {adults}
     {children}
@@ -475,3 +481,91 @@ def ticket_issue_tst_ref(ref):
         <type>TS</type>
         <value>{ref}</value>
     </referenceDetails>"""
+
+
+def queue_place_target_queue(pcc: str, queue_number: str, category: str = "0"):
+    return f"""
+    <targetDetails>
+        <targetOffice>
+            <sourceType>
+                <sourceQualifier1>3</sourceQualifier1>
+            </sourceType>
+            <originatorDetails>
+                <inHouseIdentification1>{pcc}</inHouseIdentification1>
+            </originatorDetails>
+        </targetOffice>
+        <queueNumber>
+            <queueDetails>
+                <number>{queue_number}</number>
+            </queueDetails>
+        </queueNumber>
+        <categoryDetails>
+            <subQueueInfoDetails>
+                <identificationType>C</identificationType>
+                <itemNumber>{category}</itemNumber>
+            </subQueueInfoDetails>
+        </categoryDetails>
+    </targetDetails>
+    """
+
+
+def fibpwp_pax_groups(numbering: TravellerNumbering):
+    """
+    Fare_InformativeBestPricingWithoutPNR
+    :param numbering: TravellerNumbering -> The object holding info about travellers
+    :return: str
+    """
+    return fare_informative_price_passengers(numbering)
+
+
+def fibpwp_add_taxes(tax_infos: List[InformativeFareTax]):
+    """
+    builds pricing option group to add taxes (AT)
+    :param tax_infos: List[InformativeFareTax]
+    :return: str
+    """
+    f"""
+    <pricingOptionGroup>
+        <pricingOptionKey>
+            <pricingOptionKey>AT</pricingOptionKey>
+        </pricingOptionKey>
+        {"".join([_fibpwp_tax(t) for t in tax_infos])}
+    </pricingOptionGroup>
+    """
+
+
+def fibpwp_add_country_taxes(tax_infos: List[InformativeFareTax]):
+    """
+    builds pricing option group to add country taxes (AC)
+    :param tax_infos: List[InformativeFareTax]
+    :return: str
+    """
+    f"""
+    <pricingOptionGroup>
+        <pricingOptionKey>
+            <pricingOptionKey>AC</pricingOptionKey>
+        </pricingOptionKey>
+        {"".join([_fibpwp_tax(t) for t in tax_infos])}
+    </pricingOptionGroup>
+    """
+
+
+def _fibpwp_tax(tax_information: InformativeFareTax):
+    """
+    This method generate tax information block for Fare_InformativeBestPricingWithoutPNR
+    :param tax_information: InformativeFareTax -> Holds tax infos
+    :return: str
+    """
+    return f"""
+    <taxInformation>
+        <taxQualifier>7</taxQualifier>
+        <taxType>
+            <isoCountry>{tax_information.country}</isoCountry>
+        </taxType>
+        <taxNature>{tax_information.nature}</taxNature>
+        <taxData>
+            <taxRate>{tax_information.rate}</taxRate>
+            <taxValueQualifier>{tax_information.value_type}</taxValueQualifier>
+        </taxData>
+    </taxInformation>
+    """
diff --git a/setup.py b/setup.py
index f1add86..298453e 100644
--- a/setup.py
+++ b/setup.py
@@ -1,11 +1,11 @@
 import setuptools
 
 with open("README.md", "r") as fh:
-    long_description = fh.read()
+    long_description = "\n".join(fh.readlines())
 
 setuptools.setup(
     name='pygds',
-    version='0.0.3',
+    version='0.0.4',
     description='A python package to make it easy interacting with gds ',
     long_description=long_description,
     long_description_content_type="text/markdown",
-- 
2.17.1


From 42d7561f4cf5ebfcc595b2a8b7e63d46e28a564f Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 21 Oct 2019 16:34:02 +0000
Subject: [PATCH 02/46] WIP: Amadeus Issue Combined.

---
 pygds/amadeus/client.py                | 22 +++++++++++++-
 pygds/amadeus/ticket.py                | 27 +++++++++++++++++
 pygds/amadeus/xmlbuilders/builder.py   | 23 +++++++++++++++
 pygds/amadeus/xmlbuilders/sub_parts.py | 40 ++++++++++++++++++++++++++
 4 files changed, 111 insertions(+), 1 deletion(-)
 create mode 100644 pygds/amadeus/ticket.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 03e1e92..71cf1fc 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -273,4 +273,24 @@ class AmadeusClient(BaseClient):
         return response_data
         # return GetPnrResponseExtractor(response_data).extract()
 
-    def 
+    def issue_combined(self, message_id: str, passengers: List[str], retrieve_pnr: bool):
+        """
+        This service is used to issue miscellaneous documents (MCO, TASF, XSB and/or EMD) and tickets SIMULTANEOUSLY.
+        The ISSUANCE TRANSACTION is the process whereby the reservation and the pricing information are converted into
+        contracts.
+        CONTRACTS are issued for customers buying travel products; those contracts tie the customer to the travel
+        provider (e.g. validating carrier of an airline product).
+        :param message_id: str -> the message id
+        :param passengers: List[str] -> List of passenger tattoos
+        :param retrieve_pnr: to tell if we will retrieve PNR again
+        :return:
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if security_token is None:
+            raise NoSessionError(message_id)
+        request_data = self.xml_builder.issue_combined(message_id, session_id, sequence_number, security_token,
+                                                       passengers, retrieve_pnr)
+        response_data = self.__request_wrapper("issue_combined", request_data,
+                                               'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
+        print(response_data)
+        return response_data
diff --git a/pygds/amadeus/ticket.py b/pygds/amadeus/ticket.py
new file mode 100644
index 0000000..18ccf03
--- /dev/null
+++ b/pygds/amadeus/ticket.py
@@ -0,0 +1,27 @@
+from enum import Enum
+
+
+class ContractType(Enum):
+    TKT = "TKT"  # Ticket
+    MCO = "MCO"  # Miscellaneous Charge Order
+    EMD = "EMD"  # Electronic Miscellaneous Document
+    XSB = "XSB"  # Excess Baggage
+    TASF = "TASF"  # Travel Agent Service Fee
+
+
+class ContractNature(Enum):
+    DOMESTIC = "DOM"
+    INTERNATIONAL = "INT"
+
+
+class ContractMedia(Enum):
+    MISCELLANEOUS_DOCUMENT = "ED"
+    ELECTRONIC_TICKET = "ET"
+
+
+class Contract:
+    def __init__(self, contract_type: ContractType, contract_media: str, contract_nature: ContractNature, contract_owner: str):
+        self.contract_type = contract_type
+        self.contract_media = contract_media
+        self.contract_nature = contract_nature
+        self.contract_owner = contract_owner
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 594b79b..f5b2e5d 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -787,3 +787,26 @@ class AmadeusXMLBuilder:
             </soapenv:Body>
         </soapenv:Envelope>
         """
+
+    def issue_combined(self, message_id, session_id, sequence_number, security_token, passengers: List[str],
+                       segments: List[str], retrieve_pnr: bool = False):
+
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+            xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+            xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+            xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+            xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+            xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+            xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            {self.generate_header("TCTMIQ_15_1_1A", message_id, session_id, sequence_number, security_token)}
+            <soapenv:Body>
+                <DocIssuance_IssueCombined xmlns="http://xml.amadeus.com/TCTMIQ_15_1_1A">
+                    {sub_parts.itc_segment_select(segments) if segments else ""}
+                    {"".join([sub_parts.itc_pax_selection(p) for p in passengers])}
+                    {sub_parts.itc_option_group("TKT")}
+                    {sub_parts.itc_option_group("RT") if retrieve_pnr else ""}
+                </DocIssuance_IssueCombined>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index fd8e7a1..52fd2f2 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -569,3 +569,43 @@ def _fibpwp_tax(tax_information: InformativeFareTax):
         </taxData>
     </taxInformation>
     """
+
+
+def itc_pax_selection(passenger_tattoo: str):
+    return f"""
+    <paxSelection>
+        <passengerReference>
+            <type>PT</type>
+            <value>{passenger_tattoo}</value>
+        </passengerReference>
+    </paxSelection>
+    """
+
+
+def itc_option_group(indicator: str):
+    return f"""
+    <optionGroup>
+        <switches>
+            <statusDetails>
+                <indicator>{indicator}</indicator>
+            </statusDetails>
+        </switches>
+    </optionGroup>
+    """
+
+
+def itc_segment_select(segments: List[str]):
+    return f"""
+    <selection>
+        {"".join([_itc_single_segment_select(s) for s in segments])}
+    </selection>
+    """
+
+
+def _itc_single_segment_select(segment_tattoo):
+    return f"""
+    <referenceDetails>
+        <type>ST</type>
+        <value>{segment_tattoo}</value>
+    </referenceDetails>
+    """
-- 
2.17.1


From ab1292a4876295648ba287ae27dce26b99fe6194 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 21 Oct 2019 16:42:57 +0000
Subject: [PATCH 03/46] WIP: Amadeus Issue Combined, add segments

---
 pygds/amadeus/client.py | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 71cf1fc..125efd8 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -273,7 +273,7 @@ class AmadeusClient(BaseClient):
         return response_data
         # return GetPnrResponseExtractor(response_data).extract()
 
-    def issue_combined(self, message_id: str, passengers: List[str], retrieve_pnr: bool):
+    def issue_combined(self, message_id: str, passengers: List[str], segments: List[str], retrieve_pnr: bool):
         """
         This service is used to issue miscellaneous documents (MCO, TASF, XSB and/or EMD) and tickets SIMULTANEOUSLY.
         The ISSUANCE TRANSACTION is the process whereby the reservation and the pricing information are converted into
@@ -282,6 +282,7 @@ class AmadeusClient(BaseClient):
         provider (e.g. validating carrier of an airline product).
         :param message_id: str -> the message id
         :param passengers: List[str] -> List of passenger tattoos
+        :param segments: List[str] -> List of segment tattoos
         :param retrieve_pnr: to tell if we will retrieve PNR again
         :return:
         """
@@ -289,7 +290,7 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.issue_combined(message_id, session_id, sequence_number, security_token,
-                                                       passengers, retrieve_pnr)
+                                                       passengers, segments, retrieve_pnr)
         response_data = self.__request_wrapper("issue_combined", request_data,
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         print(response_data)
-- 
2.17.1


From 0ff590a405bbfbf66ffb27c1be8d84f860000875 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 21 Oct 2019 17:41:18 +0000
Subject: [PATCH 04/46] WIP: Amadeus cancel document

---
 pygds/amadeus/client.py                | 22 +++++++++++++++++--
 pygds/amadeus/xmlbuilders/builder.py   | 29 +++++++++++++++++++++++++-
 pygds/amadeus/xmlbuilders/sub_parts.py | 10 +++++++++
 3 files changed, 58 insertions(+), 3 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 125efd8..4a42fce 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -2,6 +2,7 @@
 from typing import List
 from pygds.amadeus.xml_parsers.retrive_pnr import GetPnrResponseExtractor
 from pygds.core.price import PriceRequest
+from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary
 from pygds.core.request import LowFareSearchRequest
 from pygds.errors.gdserrors import NoSessionError
@@ -289,9 +290,26 @@ class AmadeusClient(BaseClient):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         if security_token is None:
             raise NoSessionError(message_id)
-        request_data = self.xml_builder.issue_combined(message_id, session_id, sequence_number, security_token,
-                                                       passengers, segments, retrieve_pnr)
+        session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
+        request_data = self.xml_builder.issue_combined(session_info, passengers, segments, retrieve_pnr)
         response_data = self.__request_wrapper("issue_combined", request_data,
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         print(response_data)
         return response_data
+
+    def cancel_document(self, message_id: str, ticket_numbers: List[str]):
+        """
+        Cancel documents by ticket numbers
+        :param message_id: str -> the message id
+        :param ticket_numbers: List[str] -> List of ticket numbers
+        :return:
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if security_token is None:
+            raise NoSessionError(message_id)
+        session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
+        request_data = self.xml_builder.cancel_documents(session_info, ticket_numbers)
+        response_data = self.__request_wrapper("cancel_document", request_data,
+                                               'http://webservices.amadeus.com/TRCANQ_14_1_1A')
+        print(response_data)
+        return response_data
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index f5b2e5d..dda93e4 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -2,6 +2,7 @@ from time import gmtime, strftime
 from typing import List
 from pygds.amadeus.xmlbuilders import sub_parts
 from pygds.core.price import PriceRequest
+from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary
 from pygds.core.request import LowFareSearchRequest
 from pygds.core.payment import CreditCard
@@ -788,8 +789,12 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def issue_combined(self, message_id, session_id, sequence_number, security_token, passengers: List[str],
+    def issue_combined(self, session_info: SessionInfo, passengers: List[str],
                        segments: List[str], retrieve_pnr: bool = False):
+        message_id = session_info.message_id
+        session_id = session_info.session_id
+        sequence_number = session_info.sequence_number
+        security_token = session_info.security_token
 
         return f"""
         <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
@@ -810,3 +815,25 @@ class AmadeusXMLBuilder:
             </soapenv:Body>
         </soapenv:Envelope>
         """
+
+    def cancel_documents(self, session_info: SessionInfo, ticket_numbers: List[str]):
+        message_id = session_info.message_id
+        session_id = session_info.session_id
+        sequence_number = session_info.sequence_number
+        security_token = session_info.security_token
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+            xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+            xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+            xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+            xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+            xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+            xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            {self.generate_header("TRCANQ_14_1_1A", message_id, session_id, sequence_number, security_token)}
+            <soapenv:Body>
+                <Ticket_CancelDocument xmlns="http://xml.amadeus.com/TRCANQ_14_1_1A" >
+                    {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
+                </Ticket_CancelDocument>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index 52fd2f2..ec1271e 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -609,3 +609,13 @@ def _itc_single_segment_select(segment_tattoo):
         <value>{segment_tattoo}</value>
     </referenceDetails>
     """
+
+
+def tcd_ticket_number(ticket_number: str):
+    return f"""
+    <documentNumberDetails>
+        <documentDetails>
+            <number>{ticket_number}</number>
+        </documentDetails>
+    </documentNumberDetails>
+    """
-- 
2.17.1


From 84b5e3135547baefd161d45fbb321590620aaf7e Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 21 Oct 2019 21:02:29 +0000
Subject: [PATCH 05/46] Fix sequence in response extractor.

---
 pygds/amadeus/xml_parsers/response_extractor.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 102e5a6..a25f8e9 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -123,7 +123,7 @@ class SessionExtractor(BaseResponseExtractor):
             self.tree, "//*[local-name()='SequenceNumber']/text()", "//*[local-name()='SecurityToken']/text()",
             "//*[local-name()='SessionId']/text()", "//*[local-name()='RelatesTo']/text()",
             "//*[local-name()='Session']/@TransactionStatusCode")
-        return SessionInfo(tok, int(seq), ses, m_id, status != "InSeries")
+        return SessionInfo(tok, int(seq) if seq else 0, ses, m_id, status != "InSeries")
 
 
 class PriceSearchExtractor(BaseResponseExtractor):
-- 
2.17.1


From 558965a7e4acef9243d03315cc621c6ce2a46bf7 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 21 Oct 2019 21:03:34 +0000
Subject: [PATCH 06/46] WIP: Amadeus cancel PNR.

---
 pygds/amadeus/client.py              | 24 ++++++++++++++++++------
 pygds/amadeus/xmlbuilders/builder.py | 23 ++++++++++++++++++++++-
 2 files changed, 40 insertions(+), 7 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 4a42fce..b08bfc2 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -270,7 +270,6 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.queue_place_pnr(message_id, session_id, sequence_number, security_token, pnr,
                                                         queues)
         response_data = self.__request_wrapper("queue_place_pnr", request_data, 'http://webservices.amadeus.com/QUQPCQ_03_1_1A')
-        print(response_data)
         return response_data
         # return GetPnrResponseExtractor(response_data).extract()
 
@@ -294,10 +293,9 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.issue_combined(session_info, passengers, segments, retrieve_pnr)
         response_data = self.__request_wrapper("issue_combined", request_data,
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
-        print(response_data)
         return response_data
 
-    def cancel_document(self, message_id: str, ticket_numbers: List[str]):
+    def void_tickets(self, message_id: str, ticket_numbers: List[str]):
         """
         Cancel documents by ticket numbers
         :param message_id: str -> the message id
@@ -308,8 +306,22 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
-        request_data = self.xml_builder.cancel_documents(session_info, ticket_numbers)
-        response_data = self.__request_wrapper("cancel_document", request_data,
+        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers)
+        response_data = self.__request_wrapper("void_tickets", request_data,
                                                'http://webservices.amadeus.com/TRCANQ_14_1_1A')
-        print(response_data)
         return response_data
+
+    def cancel_pnr(self, message_id: str, close_session: bool = False):
+        """
+        Cancel the entire PNR
+        :param message_id: str -> the message id
+        :param close_session: bool -> Close or not the session
+        :return:
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
+        request_data = self.xml_builder.cancel_pnr(session_info, close_session)
+        response_data = self.__request_wrapper("cancel_pnr", request_data,
+                                               'http://webservices.amadeus.com/PNRXCL_17_1_1A')
+        return response_data
+        # return GetPnrResponseExtractor(response_data).extract()
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index dda93e4..a6a56f1 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -816,7 +816,7 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def cancel_documents(self, session_info: SessionInfo, ticket_numbers: List[str]):
+    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str]):
         message_id = session_info.message_id
         session_id = session_info.session_id
         sequence_number = session_info.sequence_number
@@ -837,3 +837,24 @@ class AmadeusXMLBuilder:
             </soapenv:Body>
         </soapenv:Envelope>
         """
+
+    def cancel_pnr(self, session_info: SessionInfo, close_session: bool = False):
+        message_id = session_info.message_id
+        session_id = session_info.session_id
+        sequence_number = session_info.sequence_number
+        security_token = session_info.security_token
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
+            {self.generate_header("PNRXCL_17_1_1A", message_id, session_id, sequence_number, security_token, close_session)}
+            <soapenv:Body>
+                <PNR_Cancel xmlns="http://xml.amadeus.com/PNRXCL_17_1_1A">
+                    <pnrActions>
+                        <optionCode>10</optionCode>
+                    </pnrActions>
+                    <cancelElements>
+                        <entryType>I</entryType>
+                    </cancelElements>
+                </PNR_Cancel>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
-- 
2.17.1


From fa7d0c1a577cf75cf7f71dce246066003f260aca Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Tue, 22 Oct 2019 12:05:36 +0000
Subject: [PATCH 07/46] extractor for cancel PNR.

---
 pygds/amadeus/client.py                         | 10 ++++++----
 pygds/amadeus/xml_parsers/response_extractor.py | 11 +++++++++++
 pygds/core/types.py                             | 11 +++++++++++
 3 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index b08bfc2..6eba05b 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -9,7 +9,7 @@ from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
-    IssueTicketResponseExtractor
+    IssueTicketResponseExtractor, CancelPnrExtractor
 from pygds.core.payment import FormOfPayment
 from .errors import ClientError, ServerError
 from .xmlbuilders.builder import AmadeusXMLBuilder
@@ -79,9 +79,11 @@ class AmadeusClient(BaseClient):
         if not security_token:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.end_session(message_id, session_id, sequence_number, security_token)
-        response_data = self.__request_wrapper("start_new_session", request_data,
+        response_data = self.__request_wrapper("end_new_session", request_data,
                                                'http://webservices.amadeus.com/VLSSOQ_04_1_1A')
-        return SessionExtractor(response_data).extract()
+        response = SessionExtractor(response_data).extract()
+        self.session_holder.remove_session(message_id)
+        return response
 
     def get_reservation(self, record_locator: str, message_id: str = None, close_trx: bool = False):
         """
@@ -323,5 +325,5 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.cancel_pnr(session_info, close_session)
         response_data = self.__request_wrapper("cancel_pnr", request_data,
                                                'http://webservices.amadeus.com/PNRXCL_17_1_1A')
-        return response_data
+        return CancelPnrExtractor(response_data).extract()
         # return GetPnrResponseExtractor(response_data).extract()
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index a25f8e9..be60e39 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -9,6 +9,7 @@ from pygds.core.sessions import SessionInfo
 import logging
 
 from pygds.core.ticket import TicketReply
+from pygds.core.types import CancelPnrReply
 
 
 class BaseResponseExtractor(object):
@@ -479,6 +480,16 @@ class IssueTicketResponseExtractor(BaseResponseExtractor):
         return TicketReply(status, error_code, qualifier, source, encoding, description)
 
 
+class CancelPnrExtractor(BaseResponseExtractor):
+    def __init__(self, xml_content):
+        super().__init__(xml_content, True, True, "PNR_Reply")
+
+    def _extract(self):
+        payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "PNR_Reply")
+        pnr = from_json_safe(payload, "pnrHeader", "reservationInfo", "reservation", "controlNumber")
+        return CancelPnrReply(pnr)
+
+
 def extract_amount(amount_info, type_key="fareDataQualifier", amount_key="fareAmount",
                    currency_key="fareCurrency") -> FareAmount:
     fare_amount = FareAmount()
diff --git a/pygds/core/types.py b/pygds/core/types.py
index a9d9a83..ff548f7 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -1079,3 +1079,14 @@ class FlightSeatMap:
         self.arrival_date: str = None
         self.class_of_service: str = None
         self.currency_code: str = None
+
+
+class CancelPnrReply(BasicDataObject):
+    def __init__(self, pnr: str):
+        self.pnr = pnr
+
+    def to_data(self):
+        return {
+            "pnr": self.pnr,
+            "cancelled": self.pnr is not None
+        }
-- 
2.17.1


From 3ca05f71cc073d7d33631d49ba019f7358822099 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Tue, 22 Oct 2019 13:35:44 +0000
Subject: [PATCH 08/46] merge feat/amadeus-flow

---
 pygds/amadeus/client.py                       |  18 ++-
 pygds/amadeus/xmlbuilders/builder.py          |  50 +++++++
 pygds/tests/amadeus/script_low_fare_search.py | 133 ++++++++++++++++++
 .../amadeus/test_flow_low_fare_search.py      | 122 ++++++++++++++++
 4 files changed, 322 insertions(+), 1 deletion(-)
 create mode 100644 pygds/tests/amadeus/script_low_fare_search.py
 create mode 100644 pygds/tests/amadeus/test_flow_low_fare_search.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 6eba05b..211a200 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -127,6 +127,20 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
         return response_data
 
+    def pnr_add_multi_for_pax_info_element(self, message_id, option_code, segment_name, family_name, quantity,
+                                           f_name, pax_type, inf_number, d_of_birth):
+        """
+            This method modifies the elements of a PNR (passengers, etc.)
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
+                                                                                   message_id, option_code, segment_name, family_name, quantity, f_name, pax_type, inf_number, d_of_birth)
+        print(request_data)
+        response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
+                                               'http://webservices.amadeus.com/PNRADD_17_1_1A')
+        print(response_data)
+        return GetPnrResponseExtractor(response_data).extract()
+
     def ticketing_pnr(self, message_id, passenger_reference_type, passenger_reference_value):
         """
             PNR ticketing process.
@@ -273,7 +287,7 @@ class AmadeusClient(BaseClient):
                                                         queues)
         response_data = self.__request_wrapper("queue_place_pnr", request_data, 'http://webservices.amadeus.com/QUQPCQ_03_1_1A')
         return response_data
-        # return GetPnrResponseExtractor(response_data).extract()
+        return GetPnrResponseExtractor(response_data).extract()
 
     def issue_combined(self, message_id: str, passengers: List[str], segments: List[str], retrieve_pnr: bool):
         """
@@ -327,3 +341,5 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/PNRXCL_17_1_1A')
         return CancelPnrExtractor(response_data).extract()
         # return GetPnrResponseExtractor(response_data).extract()
+        print(response_data)
+        return GetPnrResponseExtractor(response_data).extract()
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index a6a56f1..80fe0e9 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -727,6 +727,56 @@ class AmadeusXMLBuilder:
        </soapenv:Body>
     </soapenv:Envelope> """
 
+    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, option_code,
+                                                   segment_name, family_name, quantity, f_name, pax_type, inf_number, d_of_birth):
+
+        return f"""
+            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+                xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+                xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+                xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+                xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+                xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+                xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+                {self.generate_header("PNRADD_17_1_1A", message_id, session_id, sequence_number, security_token)}
+                <soapenv:Body>
+                    <PNR_AddMultiElements>
+                    <pnrActions>
+                        <optionCode>{option_code}</optionCode>
+                    </pnrActions>
+                    <travellerInfo>
+                        <elementManagementPassenger>
+                            <reference>
+                                <qualifier>PR</qualifier>
+                                <number>1</number>
+                            </reference>
+                            <segmentName>{segment_name}</segmentName>
+                        </elementManagementPassenger>
+                        <passengerData>
+                            <travellerInformation>
+                                <traveller>
+                                    <surname>{family_name}</surname>
+                                    <quantity>{quantity}</quantity>
+                                </traveller>
+                                <passenger>
+                                    <firstName>{f_name}</firstName>
+                                    <type>{pax_type}</type>
+                                    <infantIndicator>{inf_number}</infantIndicator>
+                                </passenger>
+                            </travellerInformation>
+                            <dateOfBirth>
+                                <dateAndTimeDetails>
+                                    <date>{d_of_birth}</date>
+                                </dateAndTimeDetails>
+                            </dateOfBirth>
+
+                        </passengerData>
+                        </travellerInfo>
+
+                    </PNR_AddMultiElements>
+                </soapenv:Body>
+            </soapenv:Envelope> """
+
     def issue_ticket_retrieve(self, message_id, security_token, sequence_number, session_id, tst_refs: List[str]):
         return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
diff --git a/pygds/tests/amadeus/script_low_fare_search.py b/pygds/tests/amadeus/script_low_fare_search.py
new file mode 100644
index 0000000..ba60764
--- /dev/null
+++ b/pygds/tests/amadeus/script_low_fare_search.py
@@ -0,0 +1,133 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+from pygds.core.request import RequestedSegment, LowFareSearchRequest
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary
+from pygds import log_handler
+from pygds.env_settings import get_setting
+# from pygds.core.helpers import get_data_from_json_safe as from_json_safe, ensure_list
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.core.payment import FormOfPayment, CreditCard
+from pygds.core.price import PriceRequest, Fare
+# from pygds.core.types import SellItinerary
+# from pygds.core.types import SellItinerary, TravellerInfo, TravellerNumbering
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    try:
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "061119", "081119")
+        segments = [RequestedSegment(origin=origine, destination=destination, departure_date=date_dep, arrival_date=date_arr)]
+        low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
+        log.debug(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
+        currency_code, c_qualifier = ("EUR", "RC")
+        search_results = client.fare_master_pricer_travel_board_search(low_fare_search, currency_code, c_qualifier)
+        log.debug("fare_master_pricer_travel_board_search")
+        ressults, session_info = (search_results.payload, search_results.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after search")
+            return
+        log.debug(ressults)
+        log.debug("sell_from_recommandation")
+        segments = (ressults[0]['itineraries'])
+        itineraries = []
+        for segment in segments:
+            seg = segment[0]
+            itinerary = SellItinerary(seg["board_airport"], seg["off_airport"], seg["departure_date"], seg["marketing_company"], seg["flight_number"], seg["book_class"], 2)
+            itineraries.append(itinerary)
+        choise_segment = client.sell_from_recommandation(itineraries)
+        ressults_sell, session_info = (choise_segment.payload, choise_segment.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after sell from recommendation")
+            return
+        log.debug(ressults_sell)
+        message_id = session_info.message_id  # is the message_id to use for the all others actions
+        traveller_infos = [TravellerInfo(1, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
+                           TravellerInfo(2, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
+        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
+        ressults_add_passengers, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after creat pnr")
+            return
+        log.debug(ressults_add_passengers)
+        log.debug("Create pnr")
+        response_data = client.create_pnr(message_id)
+
+        client.end_session(message_id)
+        log.debug(response_data.payload)
+        pnr = response_data.payload["pnr_header"].controle_number
+        log.debug("display pnr " + pnr if pnr is not None else "")
+        res_reservation = client.get_reservation(pnr, None, False)
+        res_reservation, message_id = res_reservation.payload, res_reservation.session_info.message_id
+        log.debug(" result reservation ")
+        log.info(res_reservation)
+        seg_refs = []
+        pax_refs = []
+        for seg in res_reservation["itineraries"]:
+            seg_refs.append(seg.sequence)
+        for pax in res_reservation["passengers"]:
+            pax_refs.append(pax.name_id)
+        log.info("price pnr")
+        price_request = PriceRequest(pax_refs, seg_refs)
+        log.debug("result of price_request")
+        log.debug(price_request)
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        client.end_session(message_id)
+        # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
+        # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 0, "SS1", "Ndiaye", 2, "Ibrahima", "ADT", 1, "01JAN60")
+        # log.debug(mise_a_j)
+        log.debug(res_updat_pas)
+        client.end_session(message_id)
+
+        log.debug(res_price.payload)
+        log.debug("End ")
+        log.debug("End result price")
+        chosen_price: Fare = res_price.payload[0]
+        log.info(f"Chosen price: {chosen_price}")
+        res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
+        log.debug("result TST")
+        session_info, res_tst = (res_tst.session_info, res_tst.payload)
+        log.debug(res_tst)
+        log.debug("Test queue_place_pnr ")
+        rest_q_place = client.queue_place_pnr(message_id, pnr, [68, 25, 46])
+        log.debug(rest_q_place)
+
+        log.debug("Test issue_combined")
+        res_issue_combined = client.issue_combined(message_id, pax_refs, seg_refs, False)
+        log.debug(res_issue_combined)
+        log.info(f"session from tst: {session_info}")
+        log.info(f"response from tst: {res_tst}")
+        log.debug(res_tst)
+        rf = client.send_command("RFSaliou", message_id)
+        log.debug(rf)
+        res_issue = client.ticketing_pnr(message_id, "PAX", pax_refs[1])
+        res_issue = client.issue_ticket_with_retrieve(message_id, [1])
+        log.debug(res_issue)
+        res_cancel = client.void_tickets(message_id, [1])
+        log.debug(res_cancel)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
diff --git a/pygds/tests/amadeus/test_flow_low_fare_search.py b/pygds/tests/amadeus/test_flow_low_fare_search.py
new file mode 100644
index 0000000..04cd29d
--- /dev/null
+++ b/pygds/tests/amadeus/test_flow_low_fare_search.py
@@ -0,0 +1,122 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+from pygds.core.request import RequestedSegment, LowFareSearchRequest
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary
+from pygds import log_handler
+from pygds.env_settings import get_setting
+# from pygds.core.helpers import get_data_from_json_safe as from_json_safe, ensure_list
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.core.payment import FormOfPayment, CreditCard
+from pygds.core.price import PriceRequest, Fare
+# from pygds.core.types import SellItinerary
+# from pygds.core.types import SellItinerary, TravellerInfo, TravellerNumbering
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    try:
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "081119")
+        segments = [RequestedSegment(origin=origine, destination=destination, departure_date=date_dep, arrival_date=date_arr)]
+        low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
+        log.debug(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
+        currency_code, c_qualifier = ("EUR", "RC")
+        search_results = client.fare_master_pricer_travel_board_search(low_fare_search, currency_code, c_qualifier)
+        log.debug("fare_master_pricer_travel_board_search")
+        ressults, session_info = (search_results.payload, search_results.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after search")
+            return
+        log.debug(ressults)
+        log.debug("sell_from_recommandation")
+        segments = (ressults[0]['itineraries'])
+        itineraries = []
+        for segment in segments:
+            seg = segment[0]
+            itinerary = SellItinerary(seg["board_airport"], seg["off_airport"], seg["departure_date"], seg["marketing_company"], seg["flight_number"], seg["book_class"], 2)
+            itineraries.append(itinerary)
+        choise_segment = client.sell_from_recommandation(itineraries)
+        ressults_sell, session_info = (choise_segment.payload, choise_segment.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after sell from recommendation")
+            return
+        log.debug(ressults_sell)
+        message_id = session_info.message_id  # is the message_id to use for the all others actions
+        traveller_infos = [TravellerInfo(1, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
+                           TravellerInfo(2, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
+        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
+        ressults_add_passengers, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after creat pnr")
+            return
+        log.debug(ressults_add_passengers)
+        log.debug("Create pnr")
+        response_data = client.create_pnr(message_id)
+        client.end_session(message_id)
+        log.debug(response_data.payload)
+        pnr = response_data.payload["pnr_header"].controle_number
+        log.debug("display pnr " + pnr if pnr is not None else "")
+        res_reservation = client.get_reservation(pnr, None, False)
+        res_reservation, message_id = res_reservation.payload, res_reservation.session_info.message_id
+        log.debug(" result reservation ")
+        log.info(res_reservation)
+        seg_refs = []
+        pax_refs = []
+        for seg in res_reservation["itineraries"]:
+            seg_refs.append(seg.sequence)
+        for pax in res_reservation["passengers"]:
+            pax_refs.append(pax.name_id)
+        log.info("price pnr")
+        price_request = PriceRequest(pax_refs, seg_refs)
+        log.debug("result of price_request")
+        log.debug(price_request)
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        # client.end_session(message_id)
+        mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
+        mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+        log.debug(mise_a_j)
+        log.debug(res_price.payload)
+        log.debug("End ")
+        log.debug("End result price")
+        chosen_price: Fare = res_price.payload[0]
+        log.info(f"Chosen price: {chosen_price}")
+        res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
+        log.debug("result TST")
+        session_info, res_tst = (res_tst.session_info, res_tst.payload)
+        log.debug(res_tst)
+        log.debug("Test queue_place_pnr ")
+
+        log.info(f"session from tst: {session_info}")
+        log.info(f"response from tst: {res_tst}")
+        log.debug(res_tst)
+        rf = client.send_command("RFSaliou", message_id)
+        log.debug(rf)
+        # res_issue = client.ticketing_pnr(message_id, "PAX", pax_refs[1])
+        # res_issue = client.issue_ticket_with_retrieve(message_id, [1])
+        # log.debug(res_issue)
+        # log.debug("")
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
-- 
2.17.1


From cd602c69263d57cdda834902ffa952bb02f9a867 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Tue, 22 Oct 2019 13:36:18 +0000
Subject: [PATCH 09/46] Amadeus test flow cancel.

---
 pygds/tests/amadeus/test_cancel.py | 55 ++++++++++++++++++++++++++++++
 1 file changed, 55 insertions(+)
 create mode 100644 pygds/tests/amadeus/test_cancel.py

diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
new file mode 100644
index 0000000..9081b45
--- /dev/null
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -0,0 +1,55 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.core.payment import FormOfPayment, CreditCard
+from pygds.core.price import PriceRequest  # , Fare
+# from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
+from pygds.env_settings import get_setting
+from pygds import log_handler
+from pygds.core.types import TravellerInfo, ReservationInfo
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+    pnr = "KDN6HQ"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    # m_id = None
+
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
+    # import web_pdb; web_pdb.set_trace()
+    try:
+        message_id = None
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+        log.info(session_info)
+        log.info(res_reservation)
+        message_id = session_info.message_id
+        # res_reservation = client.get_reservation(pnr, message_id, False)
+        cancel_response = client.cancel_pnr(message_id, False)
+        session_info, cancel_response = (cancel_response.session_info, cancel_response.payload)
+        log.info(cancel_response)
+        if session_info.session_ended is False:
+            client.end_session(message_id)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
-- 
2.17.1


From b3dabb830618a52914baf34f4e76f58e2040de5d Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Thu, 24 Oct 2019 19:59:00 +0000
Subject: [PATCH 10/46] fixes on: - add form of payment - ticket - PNR add
 multi element.

---
 pygds/amadeus/client.py              |  29 +++---
 pygds/amadeus/xmlbuilders/builder.py | 146 ++++++++++++---------------
 2 files changed, 79 insertions(+), 96 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 6eba05b..210e9ca 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -99,33 +99,35 @@ class AmadeusClient(BaseClient):
         self.add_session(response.session_info)
         return response
 
-    def add_form_of_payment(self, message_id, form_of_payment, passenger_reference_type, passenger_reference_value,
-                            form_of_payment_sequence_number, group_usage_attribute_type, fop: FormOfPayment):
+    def add_form_of_payment(self, message_id: str, fop: FormOfPayment, segment_refs: List[str], pax_refs: List[str], inf_refs: List[str], fop_sequence_number: str):
         """
             This method adds a form of payment to a PNR.
             The session must exists and a current PNR defined.
         """
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if not security_token:
+            raise NoSessionError(message_id)
         request_data = self.xml_builder.add_form_of_payment_builder(
-            message_id, session_id, sequence_number, security_token, form_of_payment, passenger_reference_type,
-            passenger_reference_value, form_of_payment_sequence_number, group_usage_attribute_type,
-            fop)
+            message_id, session_id, sequence_number, security_token, fop, segment_refs, pax_refs, inf_refs, fop_sequence_number)
+        print(request_data)
         response_data = self.__request_wrapper("add_form_of_payment", request_data,
                                                'http://webservices.amadeus.com/TFOPCQ_15_4_1A')
         return response_data
 
-    def pnr_add_multi_element(self, session_id, sequence_number, security_token, message_id, option_code, segment_name,
-                              identification, credit_card_code, account_number, expiry_date, currency_code):
+    def pnr_add_multi_element(self, message_id, option_code, segment_name):
         """
             This method modifies the elements of a PNR (passengers, etc.)
         """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if not security_token:
+            raise NoSessionError(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_builder(session_id, sequence_number, security_token,
-                                                                      message_id, option_code, segment_name,
-                                                                      identification, credit_card_code, account_number,
-                                                                      expiry_date, currency_code)
+                                                                      message_id, option_code, segment_name)
         response_data = self.__request_wrapper("pnr_add_multi_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
-        return response_data
+        response = GetPnrResponseExtractor(response_data).extract()
+        self.add_session(response.session_info)
+        return response
 
     def ticketing_pnr(self, message_id, passenger_reference_type, passenger_reference_value):
         """
@@ -140,11 +142,12 @@ class AmadeusClient(BaseClient):
         self.add_session(final_result.session_info)
         return final_result
 
-    def issue_ticket_with_retrieve(self, message_id):
+    def issue_ticket_with_retrieve(self, message_id, tst_refs: List[str], pax_refs: List[str]):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         if not session_id:
             raise NoSessionError(message_id)
-        request_data = self.xml_builder.issue_ticket_retrieve(message_id, security_token, sequence_number, session_id)
+        request_data = self.xml_builder.issue_ticket_retrieve(message_id, security_token, sequence_number, session_id,
+                                                              tst_refs, pax_refs)
         response_data = self.__request_wrapper("issue_ticket_with_retrieve", request_data,
                                                'http://webservices.amadeus.com/TTKTIQ_15_1_1A')
         final_result = IssueTicketResponseExtractor(response_data).extract()
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index a6a56f1..8d14a9f 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -5,7 +5,7 @@ from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary
 from pygds.core.request import LowFareSearchRequest
-from pygds.core.payment import CreditCard
+from pygds.core.payment import FormOfPayment
 from pygds.core.security_utils import generate_random_message_id, generate_created, generate_nonce, password_digest
 
 
@@ -575,48 +575,38 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def add_form_of_payment_builder(self, message_id, session_id, sequence_number, security_token, form_of_payment,
-                                    passenger_reference_type, passenger_reference_value,
-                                    form_of_payment_sequence_number,
-                                    group_usage_attribute_type, fop: CreditCard):
-        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
+    def add_form_of_payment_builder(self, message_id, session_id, sequence_number, security_token,
+                                    fop: FormOfPayment, segment_refs: List[str], pax_refs: List[str], inf_refs: List[str], fop_sequence_number):
 
         form_of_payment_code = fop.p_code
         company_code = fop.company_code
         form_of_payment_type = fop.p_type
-        vendor_code = fop.vendor_code
-        carte_number = fop.card_number
-        security_id = fop.security_id
-        expiry_date = fop.expiry_date
+        group_usage_attribute_type = "FP"  # "PAY"
+        form_of_payment = "FP"  # "DEF
+        pax_refs = pax_refs or []
+        inf_refs = inf_refs or []
+        segment_refs = segment_refs or []
         return f"""
-           <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3" xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
-       <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
-       <add:MessageID>{message_id}</add:MessageID>
-       <add:Action>http://webservices.amadeus.com/TFOPCQ_15_4_1A</add:Action>
-       <add:To>{self.endpoint}/{self.wsap}</add:To>
-       {security_part}
-       </soapenv:Header>
+    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+        xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+        xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+        xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
+        xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
+       {self.generate_header("TFOPCQ_15_4_1A", message_id, session_id, sequence_number, security_token, False)}
        <soapenv:Body>
           <FOP_CreateFormOfPayment>
              <transactionContext>
                 <transactionDetails>
-                <code>{form_of_payment}</code>
+                    <code>{form_of_payment}</code>
                 </transactionDetails>
              </transactionContext>
              <fopGroup>
                 <fopReference></fopReference>
-                <passengerAssociation>
-                   <passengerReference>
-                      <type>{passenger_reference_type}</type>
-                      <value>{passenger_reference_value}</value>
-                   </passengerReference>
-                </passengerAssociation>
+                {"".join([sub_parts.fop_passenger("PAX", ref) for ref in pax_refs])}
+                {"".join([sub_parts.fop_passenger("INF", ref) for ref in inf_refs])}
+                {"".join([sub_parts.fop_segment(ref) for ref in segment_refs])}
                 <mopDescription>
-                   <fopSequenceNumber>
-                      <sequenceDetails>
-                         <number>{form_of_payment_sequence_number}</number>
-                      </sequenceDetails>
-                   </fopSequenceNumber>
+                   {sub_parts.fop_sequence_number(fop_sequence_number) if fop_sequence_number else ""}
                    <mopDetails>
                       <fopPNRDetails>
                          <fopDetails>
@@ -642,16 +632,7 @@ class AmadeusXMLBuilder:
                             </formOfPayment>
                          </fopInformation>
                          <dummy/>
-                         <creditCardData>
-                            <creditCardDetails>
-                               <ccInfo>
-                                  <vendorCode>{vendor_code}</vendorCode>
-                                  <cardNumber>{carte_number}</cardNumber>
-                                  <securityId>{security_id}</securityId>
-                                  <expiryDate>{expiry_date}</expiryDate>
-                               </ccInfo>
-                            </creditCardDetails>
-                         </creditCardData>
+                         {sub_parts.fop_form_of_payment(fop)}
                       </mopInformation>
                       <dummy/>
                    </paymentModule>
@@ -666,12 +647,12 @@ class AmadeusXMLBuilder:
                            passenger_reference_value):
         return f"""
         <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
-        xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
-        xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
-        xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
-        xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
-        xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
-        xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+            xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+            xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+            xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+            xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+            xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
             {self.generate_header("TTKTIQ_15_1_1A", message_id, session_id, sequence_number, security_token)}
             <soapenv:Body>
                 <DocIssuance_IssueTicket>
@@ -687,47 +668,45 @@ class AmadeusXMLBuilder:
     """
 
     def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code,
-                                      segment_name, identification, credit_card_code, account_number, expiry_date,
-                                      currency_code):
+                                      segment_name):
         security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
+        # <nameInformation>
+        #     <qualifier>RF</qualifier>
+        #     <name>KOKOU</name>
+        # </nameInformation>
         return f"""
-                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
-    <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
-    <add:MessageID>{message_id}</add:MessageID>
-    <add:Action>http://webservices.amadeus.com/TTKTIQ_15_1_1A</add:Action>
-    <add:To>{self.endpoint}/{self.wsap}</add:To>{security_part}
-    </soapenv:Header>
-    <soapenv:Body>
-            <PNR_AddMultiElements>
-      <pnrActions>
-        <optionCode>{option_code}</optionCode>
-      </pnrActions>
-      <dataElementsMaster>
-        <marker1 />
-        <dataElementsIndiv>
-          <elementManagementData>
-            <segmentName>{segment_name}</segmentName>
-          </elementManagementData>
-          <formOfPayment>
-            <fop>
-              <identification>{identification}</identification>
-              <creditCardCode>{credit_card_code}</creditCardCode>
-              <accountNumber>{account_number}</accountNumber>
-              <expiryDate>{expiry_date}</expiryDate>
-              <currencyCode>{currency_code}</currencyCode>
-            </fop>
-            # <fop>
-            #   <identification>CA</identification>
-            #   <amount>96.46</amount>
-            # </fop>
-          </formOfPayment>
-        </dataElementsIndiv>
-      </dataElementsMaster>
-    </PNR_AddMultiElements>
-       </soapenv:Body>
-    </soapenv:Envelope> """
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            {self.generate_header("PNRADD_17_1_1A", message_id, session_id, sequence_number, security_token)}
+            <soapenv:Body>
+                <PNR_AddMultiElements>
+                    <pnrActions>
+                        <optionCode>{option_code}</optionCode>
+                    </pnrActions>
+                    <dataElementsMaster>
+                        <marker1 />
+                        <dataElementsIndiv>
+                            <elementManagementData>
+                                <segmentName>{segment_name}</segmentName>
+                            </elementManagementData>
+                        </dataElementsIndiv>
+                        <dataElementsIndiv>
+                            <elementManagementData>
+                                <segmentName>RF</segmentName>
+                            </elementManagementData>
+                                <freetextData>
+                                    <freetextDetail>
+                                        <subjectQualifier>3</subjectQualifier>
+                                        <type>P22</type>
+                                    </freetextDetail>
+                                    <longFreetext>{self.office_id}</longFreetext>
+                                </freetextData>
+                            </dataElementsIndiv>
+                    </dataElementsMaster>
+                </PNR_AddMultiElements>
+            </soapenv:Body>
+        </soapenv:Envelope> """
 
-    def issue_ticket_retrieve(self, message_id, security_token, sequence_number, session_id, tst_refs: List[str]):
+    def issue_ticket_retrieve(self, message_id, security_token, sequence_number, session_id, tst_refs: List[str], pax_refs: List[str]):
         return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                 xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
@@ -742,6 +721,7 @@ class AmadeusXMLBuilder:
                      <selection>
                         {"".join([sub_parts.ticket_issue_tst_ref(r) for r in tst_refs])}
                     </selection>
+                    {"".join([sub_parts.issue_ticket_pax("PAX", ref) for ref in pax_refs])}
                   </DocIssuance_IssueTicket>
                </soapenv:Body>
             </soapenv:Envelope>
-- 
2.17.1


From 596b901d168c49e7d05409112fd534f897925342 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Thu, 24 Oct 2019 20:00:37 +0000
Subject: [PATCH 11/46] fixes on retrieve PNR extractor

---
 .../amadeus/xml_parsers/response_extractor.py | 23 +++---
 pygds/amadeus/xml_parsers/retrive_pnr.py      | 18 ++---
 pygds/amadeus/xmlbuilders/sub_parts.py        | 73 ++++++++++++++++++-
 3 files changed, 94 insertions(+), 20 deletions(-)

diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index be60e39..9d8ff0b 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -447,16 +447,19 @@ class CreateTstResponseExtractor(BaseResponseExtractor):
     def _extract(self):
         payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "Ticket_CreateTSTFromPricingReply")
         pnr = from_json_safe(payload, "pnrLocatorData", "reservationInformation", "controlNumber")
-        tst_data = from_json_safe(payload, "tstList")
-        tst_ref_data = from_json_safe(tst_data, "tstReference")
-        tst_ref = None
-        if from_json_safe(tst_ref_data, "referenceType") == "TST":
-            tst_ref = from_json_safe(tst_ref_data, "uniqueReference")
-        passengers_data = ensure_list(from_json_safe(tst_data, "paxInformation", "refDetails"))
-        pax_refs = []
-        for p in passengers_data:
-            pax_refs.append(from_json_safe(p, "refNumber"))
-        return TstInformation(pnr, tst_ref, pax_refs)
+        tst_datas = from_json_safe(payload, "tstList")
+        tst_info = []
+        for tst_data in tst_datas:
+            tst_ref_data = from_json_safe(tst_data, "tstReference")
+            tst_ref = None
+            if from_json_safe(tst_ref_data, "referenceType") == "TST":
+                tst_ref = from_json_safe(tst_ref_data, "uniqueReference")
+            passengers_data = ensure_list(from_json_safe(tst_data, "paxInformation", "refDetails"))
+            pax_refs = []
+            for p in passengers_data:
+                pax_refs.append(from_json_safe(p, "refNumber"))
+            tst_info.append(TstInformation(pnr, tst_ref, pax_refs))
+        return tst_info
 
 
 class IssueTicketResponseExtractor(BaseResponseExtractor):
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 5708cef..e51d5c4 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -89,7 +89,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
                 free_text = from_json_safe(ssr, "freeText")
                 if free_text:
                     check_date_of_birth = re.split("[, /,////?//:; ]+", free_text)  # to transform the caracter chaine in liste_object
-                    print(check_date_of_birth)
+                    # print(check_date_of_birth)
                     if len(check_date_of_birth) >= 2:
                         check_date_of_birth = check_date_of_birth[1]
                         data_date_of_birth = reformat_date(check_date_of_birth, "%d%b%y", "%Y-%m-%d")
@@ -126,10 +126,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
             surname = from_json_safe(travel, "surname")
             forename = from_json_safe(psngr, "firstName")
             number_in_party = from_json_safe(travel, "quantity")
-            if psngr and from_json_safe(psngr, "type"):
-                type_passenger = from_json_safe(psngr, "type")
-            else:
-                type_passenger = "ADT"
+            type_passenger = from_json_safe(psngr, "type") or "ADT"
             passsenger = Passenger(ref, firstname, lastname, date_of_bt, gender, surname, forename, "", "", number_in_party, "", type_passenger, "")
             passengers_list.append(passsenger)
         return passengers_list
@@ -209,7 +206,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
                 if segment_name == "FA":
                     long_free_text = from_json_safe(ticket["otherDataFreetext"], "longFreetext")
                     ticketing = TicketingInfo("", "", "", "", "", "", long_free_text, qualifier, number)
-                    print(ticketing)
+                    # print(ticketing)
                     list_ticket.append(ticketing)
         return list_ticket
 
@@ -230,14 +227,15 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
         return list_remark
 
     def _tst_data(self):
-        tst_data = from_json_safe(self.payload, "tstData")
-        if tst_data:
+        tst_datas = from_json_safe(self.payload, "tstData")
+        tst_results = []
+        for tst_data in ensure_list(tst_datas):
             fare_elements = self._tst_fare_elements(tst_data)
             total_taxes, taxes = self._tst_taxes(tst_data)
             pax_refs, segment_refs = self._tst_pax_segs_refs(tst_data)
             base_fare, total_fare, amounts = self._tst_amounts(tst_data)
 
-            return {
+            tst = {
                 "passenger_references": pax_refs,
                 "base_fare": base_fare.to_dict() if base_fare else None,
                 "total_fare": total_fare.to_dict() if total_fare else None,
@@ -247,6 +245,8 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
                 "taxes": [ta.to_dict() for ta in taxes],
                 "fare_elements": [fe.to_dict() for fe in fare_elements]
             }
+            tst_results.append(tst)
+        return tst_results
 
     def _tst_pax_segs_refs(self, tst_data):
         pax_refs = []
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index ec1271e..133418d 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -1,6 +1,7 @@
 from typing import List
 
 from pygds.amadeus.price import InformativeFareTax
+from pygds.core.payment import CreditCard, FormOfPayment
 from pygds.core.price import PriceRequest
 from pygds.core.types import TravellerNumbering, Itinerary, FlightSegment
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
@@ -404,7 +405,7 @@ def _fare_informative_price_passenger_group(sequence_no, start, count, pax_type)
 
 
 def ppwbc_passenger_segment_selection(price_request: PriceRequest):
-    if not price_request or (not price_request.segments and not price_request.passengers):
+    if not price_request or not(price_request.segments or price_request.passengers):
         return ""
     pax_refs = []
     seg_refs = []
@@ -483,6 +484,17 @@ def ticket_issue_tst_ref(ref):
     </referenceDetails>"""
 
 
+def issue_ticket_pax(ref_type, ref):
+    return f"""
+    <paxSelection>
+        <passengerReference>
+            <type>{ref_type}</type>
+            <value>{ref}</value>
+        </passengerReference>
+    </paxSelection>
+    """
+
+
 def queue_place_target_queue(pcc: str, queue_number: str, category: str = "0"):
     return f"""
     <targetDetails>
@@ -619,3 +631,62 @@ def tcd_ticket_number(ticket_number: str):
         </documentDetails>
     </documentNumberDetails>
     """
+
+
+def fop_credit_card(credit_card: CreditCard):
+    return f"""
+    <creditCardData>
+        <creditCardDetails>
+            <ccInfo>
+                <vendorCode>{credit_card.vendor_code}</vendorCode>
+                <cardNumber>{credit_card.card_number}</cardNumber>
+                <securityId>{credit_card.security_id}</securityId>
+                <expiryDate>{credit_card.expiry_date}</expiryDate>
+            </ccInfo>
+        </creditCardDetails>
+    </creditCardData>
+    """
+
+
+def fop_form_of_payment(fop: FormOfPayment):
+    if isinstance(fop, CreditCard):
+        return fop_credit_card(fop)
+    return f"""
+    """
+
+
+def fop_passenger(passenger_type, passenger_value):
+    return f"""
+    <passengerAssociation>
+        <passengerReference>
+            <type>{passenger_type}</type>
+            <value>{passenger_value}</value>
+        </passengerReference>
+    </passengerAssociation>
+    """
+
+
+def fop_tst():
+    pass
+
+
+def fop_segment(segment_ref):
+    return f"""
+    <pnrElementAssociation>
+        <referenceDetails>
+            <type>SEG</type>
+            <value>{segment_ref}</value>
+        </referenceDetails>
+    </pnrElementAssociation>
+    """
+
+
+def fop_sequence_number(sequence_number: str):
+    return f"""
+    <fopSequenceNumber>
+        <sequenceDetails>
+            <number>{sequence_number}</number>
+        </sequenceDetails>
+    </fopSequenceNumber>
+    """
+
-- 
2.17.1


From 7a252a108a7a2d1e91c0aaa8a40a13ab19f445e9 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Thu, 24 Oct 2019 20:01:25 +0000
Subject: [PATCH 12/46] WIP: Amadeus test ticket flow

---
 pygds/tests/amadeus/test_cancel.py |   4 +-
 pygds/tests/amadeus/test_ticket.py | 121 +++++++++++++++++++++++++++++
 2 files changed, 123 insertions(+), 2 deletions(-)
 create mode 100644 pygds/tests/amadeus/test_ticket.py

diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
index 9081b45..ba39ed8 100644
--- a/pygds/tests/amadeus/test_cancel.py
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -24,8 +24,8 @@ def test():
     dir_path = os.path.join(dir_path, "..", "..", "..")
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
-    log = log_handler.get_logger("test_all")
-    pnr = "KDN6HQ"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    log = log_handler.get_logger("test_cancel")
+    pnr = "L6LMQP"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
new file mode 100644
index 0000000..32c088e
--- /dev/null
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -0,0 +1,121 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.core.payment import FormOfPayment, CreditCard
+from pygds.core.payment import CheckPayment, CreditCard
+from pygds.core.price import PriceRequest  # , Fare
+# from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
+from pygds.env_settings import get_setting
+from pygds import log_handler
+from pygds.core.types import TravellerInfo, ReservationInfo
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_ticket")
+    pnr = "LNB4CC"  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    # m_id = None
+
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
+    # import web_pdb; web_pdb.set_trace()
+    try:
+        message_id = None
+        log.info("1. Getting Reservation")
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+        log.info(session_info)
+        log.info(res_reservation)
+        if session_info.session_ended is True:
+            log.error("The session is ended when retrieving PNR")
+            return
+
+        company_id = res_reservation["pnr_header"].company_id
+        log.info("2. Pricing PNR")
+        message_id = session_info.message_id
+        passengers = [p.name_id for p in res_reservation["passengers"]]
+        segments = [s.segment_reference for s in res_reservation["itineraries"]]
+        price_request = PriceRequest(passengers, segments, "PUB")
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        session_info, res_price = (res_price.session_info, res_price.payload)
+        log.info(session_info)
+        log.info(res_price)
+        if session_info.session_ended is True:
+            log.error("The session is ended when pricing PNR")
+            return
+        if len(res_price) == 0:
+            log.error("No price found")
+            return
+
+        log.info("3. Creating TST")
+        tst = res_price[0].fare_reference
+        message_id = session_info.message_id
+        res_store_price = client.ticket_create_tst_from_price(message_id, tst)
+        session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
+        log.info(session_info)
+        log.info(res_store_price)
+        if session_info.session_ended is True:
+            log.error("The session is ended when storing TST")
+            return
+
+        log.info("4. Add form of payment")
+        message_id = session_info.message_id
+        # fop = CheckPayment("CHEQUE", "MOO")
+        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+        # session_info, res_fop = (res_fop.session_info, res_fop.payload)
+        # log.info(session_info)
+        log.info(res_fop)
+        if session_info.session_ended is True:
+            log.error("The session is ended when adding Form")
+            return
+
+        log.info("5. Save")
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        session_info, res_save = (res_save.session_info, res_save.payload)
+        log.debug(session_info)
+        log.debug(res_save)
+        if session_info.session_ended is True:
+            log.error("The session is ended when saving PNR")
+            return
+
+        log.info("6. Ticket")
+        message_id = session_info.message_id
+        res_ticket = client.issue_ticket_with_retrieve(message_id, [], [])
+        session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+        log.info(session_info)
+        log.info(res_ticket)
+        if session_info.session_ended is True:
+            log.error("The session is ended when ticketing")
+            return
+
+        # res_reservation = client.get_reservation(pnr, message_id, False)
+        # cancel_response = client.cancel_pnr(message_id, False)
+        # session_info, cancel_response = (cancel_response.session_info, cancel_response.payload)
+        # log.info(cancel_response)
+        # if session_info.session_ended is False:
+        #     client.end_session(message_id)
+        if session_info.session_ended is False:
+            client.end_session(message_id)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
-- 
2.17.1


From 7082bff4dc6f6b18878fc42214f8b5e0d6c19fae Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Fri, 25 Oct 2019 11:42:28 +0000
Subject: [PATCH 13/46] accept changes

---
 pygds/amadeus/client.py                       | 21 +++----
 .../amadeus/xml_parsers/response_extractor.py | 18 +++++-
 pygds/amadeus/xml_parsers/retrive_pnr.py      |  1 +
 pygds/amadeus/xmlbuilders/builder.py          | 10 +++-
 pygds/amadeus/xmlbuilders/sub_parts.py        |  3 +-
 pygds/core/types.py                           | 20 ++++++-
 pygds/tests/amadeus/script_low_fare_search.py | 58 ++++++++++---------
 pygds/tests/amadeus/tes_void_ticket.py        | 55 ++++++++++++++++++
 pygds/tests/amadeus/test_all.py               |  9 ++-
 pygds/tests/amadeus/test_cancel.py            |  4 +-
 .../amadeus/test_flow_low_fare_search.py      |  9 ++-
 11 files changed, 156 insertions(+), 52 deletions(-)
 create mode 100644 pygds/tests/amadeus/tes_void_ticket.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 211a200..342dd87 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -9,7 +9,7 @@ from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
-    IssueTicketResponseExtractor, CancelPnrExtractor
+    IssueTicketResponseExtractor, CancelPnrExtractor, VoidTicketExtractor
 from pygds.core.payment import FormOfPayment
 from .errors import ClientError, ServerError
 from .xmlbuilders.builder import AmadeusXMLBuilder
@@ -135,10 +135,10 @@ class AmadeusClient(BaseClient):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
                                                                                    message_id, option_code, segment_name, family_name, quantity, f_name, pax_type, inf_number, d_of_birth)
-        print(request_data)
+        # print(request_data)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
-        print(response_data)
+        # print(response_data)
         return GetPnrResponseExtractor(response_data).extract()
 
     def ticketing_pnr(self, message_id, passenger_reference_type, passenger_reference_value):
@@ -154,11 +154,11 @@ class AmadeusClient(BaseClient):
         self.add_session(final_result.session_info)
         return final_result
 
-    def issue_ticket_with_retrieve(self, message_id):
+    def issue_ticket_with_retrieve(self, message_id, tst_refs: List[str]):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         if not session_id:
             raise NoSessionError(message_id)
-        request_data = self.xml_builder.issue_ticket_retrieve(message_id, security_token, sequence_number, session_id)
+        request_data = self.xml_builder.issue_ticket_retrieve(message_id, security_token, sequence_number, session_id, tst_refs)
         response_data = self.__request_wrapper("issue_ticket_with_retrieve", request_data,
                                                'http://webservices.amadeus.com/TTKTIQ_15_1_1A')
         final_result = IssueTicketResponseExtractor(response_data).extract()
@@ -323,9 +323,12 @@ class AmadeusClient(BaseClient):
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
         request_data = self.xml_builder.void_tickets(session_info, ticket_numbers)
+        print(request_data)
         response_data = self.__request_wrapper("void_tickets", request_data,
-                                               'http://webservices.amadeus.com/TRCANQ_14_1_1A')
-        return response_data
+                                               'http://webservices.amadeus.com/TRCANQ_11_1_1A')
+        # return response_data
+        print("Testing void Ticket")
+        return VoidTicketExtractor(response_data).extract()
 
     def cancel_pnr(self, message_id: str, close_session: bool = False):
         """
@@ -339,7 +342,5 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.cancel_pnr(session_info, close_session)
         response_data = self.__request_wrapper("cancel_pnr", request_data,
                                                'http://webservices.amadeus.com/PNRXCL_17_1_1A')
-        return CancelPnrExtractor(response_data).extract()
-        # return GetPnrResponseExtractor(response_data).extract()
         print(response_data)
-        return GetPnrResponseExtractor(response_data).extract()
+        return CancelPnrExtractor(response_data).extract()
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index be60e39..f46f651 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -9,7 +9,7 @@ from pygds.core.sessions import SessionInfo
 import logging
 
 from pygds.core.ticket import TicketReply
-from pygds.core.types import CancelPnrReply
+from pygds.core.types import CancelPnrReply, VoidTicket
 
 
 class BaseResponseExtractor(object):
@@ -480,14 +480,28 @@ class IssueTicketResponseExtractor(BaseResponseExtractor):
         return TicketReply(status, error_code, qualifier, source, encoding, description)
 
 
+class VoidTicketExtractor(BaseResponseExtractor):
+    def __init__(self, xml_content):
+        super().__init__(xml_content, True, True, "Ticket_CancelDocumentReply")
+
+    def _extract(self):
+        payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "Ticket_CancelDocumentReply")
+        response_type = from_json_safe(payload, "transactionResults", "responseDetails", "responseType")
+        status_code = from_json_safe(payload, "transactionResults", "responseDetails", "statusCode")
+        ticket_number = from_json_safe(payload, "transactionResults", "ticketNumbers", "documentDetails", "number")
+        return VoidTicket(response_type, status_code, ticket_number)
+
+
 class CancelPnrExtractor(BaseResponseExtractor):
     def __init__(self, xml_content):
         super().__init__(xml_content, True, True, "PNR_Reply")
 
     def _extract(self):
         payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "PNR_Reply")
+        print(payload)
         pnr = from_json_safe(payload, "pnrHeader", "reservationInfo", "reservation", "controlNumber")
-        return CancelPnrReply(pnr)
+        company_id = from_json_safe(payload, "pnrHeader", "reservationInfo", "reservation", "companyId")
+        return CancelPnrReply(pnr, company_id)
 
 
 def extract_amount(amount_info, type_key="fareDataQualifier", amount_key="fareAmount",
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 5708cef..267534e 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -19,6 +19,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
     def _extract(self):
         payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "PNR_Reply")
         self.payload = payload
+        # print("******Test payload ******")
         # print(payload)
         return {
             'passengers': self._passengers(),
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 80fe0e9..24b99d3 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -879,10 +879,16 @@ class AmadeusXMLBuilder:
             xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
             xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
             xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
-            {self.generate_header("TRCANQ_14_1_1A", message_id, session_id, sequence_number, security_token)}
+            {self.generate_header("TRCANQ_11_1_1A", message_id, session_id, sequence_number, security_token)}
             <soapenv:Body>
-                <Ticket_CancelDocument xmlns="http://xml.amadeus.com/TRCANQ_14_1_1A" >
+                <Ticket_CancelDocument xmlns="http://xml.amadeus.com/TRCANQ_11_1_1A" >
                     {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
+                    <stockProviderDetails>
+                        <officeSettingsDetails>
+                            <stockProviderCode>6X</stockProviderCode>
+                        </officeSettingsDetails>
+                    </stockProviderDetails>
+
                 </Ticket_CancelDocument>
             </soapenv:Body>
         </soapenv:Envelope>
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index ec1271e..1f6d3d2 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -617,5 +617,4 @@ def tcd_ticket_number(ticket_number: str):
         <documentDetails>
             <number>{ticket_number}</number>
         </documentDetails>
-    </documentNumberDetails>
-    """
+    </documentNumberDetails> """
diff --git a/pygds/core/types.py b/pygds/core/types.py
index ff548f7..b5dff3b 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -1082,11 +1082,27 @@ class FlightSeatMap:
 
 
 class CancelPnrReply(BasicDataObject):
-    def __init__(self, pnr: str):
+    def __init__(self, pnr: str, company_id: str = None):
         self.pnr = pnr
+        self.company_id = company_id
 
     def to_data(self):
         return {
             "pnr": self.pnr,
-            "cancelled": self.pnr is not None
+            "cancelled": self.pnr is not None,
+            "company_id": self.company_id
+        }
+
+
+class VoidTicket(BasicDataObject):
+    def __init__(self, response_type: str, status_code: str = None, ticket_number: str = None):
+        self.response_type = response_type
+        self.status_code = status_code
+        self.ticket_number = ticket_number
+
+    def to_data(self):
+        return {
+            "response_type": self.response_type,
+            "status_code": self.status_code,
+            "ticket_number": self.ticket_number
         }
diff --git a/pygds/tests/amadeus/script_low_fare_search.py b/pygds/tests/amadeus/script_low_fare_search.py
index ba60764..505461b 100644
--- a/pygds/tests/amadeus/script_low_fare_search.py
+++ b/pygds/tests/amadeus/script_low_fare_search.py
@@ -30,7 +30,7 @@ def test():
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
     try:
-        origine, destination, date_dep, date_arr = ("CDG", "DTW", "061119", "081119")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "071119")
         segments = [RequestedSegment(origin=origine, destination=destination, departure_date=date_dep, arrival_date=date_arr)]
         low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
         log.debug(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
@@ -64,6 +64,7 @@ def test():
         if session_info.session_ended:
             log.error("Session is ended after creat pnr")
             return
+        log.debug("Result add passengers")
         log.debug(ressults_add_passengers)
         log.debug("Create pnr")
         response_data = client.create_pnr(message_id)
@@ -90,37 +91,38 @@ def test():
         client.end_session(message_id)
         # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
         # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
-        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 0, "SS1", "Ndiaye", 2, "Ibrahima", "ADT", 1, "01JAN60")
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 0, "SS1", "Ndiaye", 2, "Ibrahima", "ADT", 1, "05JAN92")
         # log.debug(mise_a_j)
-        log.debug(res_updat_pas)
-        client.end_session(message_id)
+        log.debug("update passenger")
+        log.debug(res_updat_pas.payload)
+        # client.end_session(message_id)
 
         log.debug(res_price.payload)
-        log.debug("End ")
-        log.debug("End result price")
-        chosen_price: Fare = res_price.payload[0]
-        log.info(f"Chosen price: {chosen_price}")
-        res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
-        log.debug("result TST")
-        session_info, res_tst = (res_tst.session_info, res_tst.payload)
-        log.debug(res_tst)
-        log.debug("Test queue_place_pnr ")
-        rest_q_place = client.queue_place_pnr(message_id, pnr, [68, 25, 46])
-        log.debug(rest_q_place)
+        # log.debug("End ")
+        # log.debug("End result price")
+        # chosen_price: Fare = res_price.payload[0]
+        # log.info(f"Chosen price: {chosen_price}")
+        # res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
+        # log.debug("result TST")
+        # session_info, res_tst = (res_tst.session_info, res_tst.payload)
+        # log.debug(res_tst)
+        # log.debug("Test queue_place_pnr ")
+        # rest_q_place = client.queue_place_pnr(message_id, pnr, [68, 25, 46])
+        # log.debug(rest_q_place)
 
-        log.debug("Test issue_combined")
-        res_issue_combined = client.issue_combined(message_id, pax_refs, seg_refs, False)
-        log.debug(res_issue_combined)
-        log.info(f"session from tst: {session_info}")
-        log.info(f"response from tst: {res_tst}")
-        log.debug(res_tst)
-        rf = client.send_command("RFSaliou", message_id)
-        log.debug(rf)
-        res_issue = client.ticketing_pnr(message_id, "PAX", pax_refs[1])
-        res_issue = client.issue_ticket_with_retrieve(message_id, [1])
-        log.debug(res_issue)
-        res_cancel = client.void_tickets(message_id, [1])
-        log.debug(res_cancel)
+        # log.debug("Test issue_combined")
+        # res_issue_combined = client.issue_combined(message_id, pax_refs, seg_refs, False)
+        # log.debug(res_issue_combined)
+        # log.info(f"session from tst: {session_info}")
+        # log.info(f"response from tst: {res_tst}")
+        # log.debug(res_tst)
+        # rf = client.send_command("RFSaliou", message_id)
+        # log.debug(rf)
+        # res_issue = client.ticketing_pnr(message_id, "PAX", pax_refs[1])
+        # res_issue = client.issue_ticket_with_retrieve(message_id, [1])
+        # log.debug(res_issue)
+        # res_cancel = client.void_tickets(message_id, [1])
+        # log.debug(res_cancel)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
diff --git a/pygds/tests/amadeus/tes_void_ticket.py b/pygds/tests/amadeus/tes_void_ticket.py
new file mode 100644
index 0000000..2a4d3cc
--- /dev/null
+++ b/pygds/tests/amadeus/tes_void_ticket.py
@@ -0,0 +1,55 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.core.payment import FormOfPayment, CreditCard
+# from pygds.core.price import PriceRequest  # , Fare
+# from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
+from pygds.env_settings import get_setting
+from pygds import log_handler
+# from pygds.core.types import TravellerInfo, ReservationInfo
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+    pnr = "LC87DQ"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    # m_id = None
+
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    # import web_pdb; web_pdb.set_trace()
+    try:
+        message_id = None
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+        log.info(session_info)
+        # log.info(res_reservation)
+        message_id = session_info.message_id
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        void_response = client.void_tickets(message_id, [1721234567890])
+        # session_info, void_response = (void_response.session_info, void_response.payload)
+        log.info(void_response.payload)
+        if session_info.session_ended is False:
+            client.end_session(message_id)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
diff --git a/pygds/tests/amadeus/test_all.py b/pygds/tests/amadeus/test_all.py
index e659ada..4bf6254 100644
--- a/pygds/tests/amadeus/test_all.py
+++ b/pygds/tests/amadeus/test_all.py
@@ -21,11 +21,16 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
+    pnr = "LCD4TN"
 
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     try:
         message_id = None
-        client.get_or_create_session_details(message_id)
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+        log.info(session_info)
+        log.info(res_reservation)
+        # client.get_or_create_session_details(message_id)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
index 9081b45..7108062 100644
--- a/pygds/tests/amadeus/test_cancel.py
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -25,10 +25,10 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "KDN6HQ"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "LCD4TN"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
diff --git a/pygds/tests/amadeus/test_flow_low_fare_search.py b/pygds/tests/amadeus/test_flow_low_fare_search.py
index 04cd29d..13f3164 100644
--- a/pygds/tests/amadeus/test_flow_low_fare_search.py
+++ b/pygds/tests/amadeus/test_flow_low_fare_search.py
@@ -106,9 +106,14 @@ def test():
         log.debug(res_tst)
         rf = client.send_command("RFSaliou", message_id)
         log.debug(rf)
-        # res_issue = client.ticketing_pnr(message_id, "PAX", pax_refs[1])
+        log.debug("***** Testing ticket ******")
+        res_issue = client.ticketing_pnr(message_id, "ADT", pax_refs)
         # res_issue = client.issue_ticket_with_retrieve(message_id, [1])
-        # log.debug(res_issue)
+
+        session_info = res_issue.session_info
+        if session_info.session_ended is False:
+            client.end_session(message_id)
+        log.debug(res_issue)
         # log.debug("")
     except ClientError as ce:
         log.error(f"client_error: {ce}")
-- 
2.17.1


From 02fa2d10a4f16d2e299d5a95887bceacef935d80 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Fri, 25 Oct 2019 16:03:20 +0000
Subject: [PATCH 14/46] active changes

---
 pygds/amadeus/client.py                       |  2 +-
 pygds/amadeus/xml_parsers/retrive_pnr.py      |  4 ++-
 pygds/amadeus/xmlbuilders/builder.py          |  7 ----
 pygds/tests/amadeus/low_fare_search.py        | 36 +++++++++++++++++++
 pygds/tests/amadeus/script_low_fare_search.py |  6 ++--
 5 files changed, 44 insertions(+), 11 deletions(-)
 create mode 100644 pygds/tests/amadeus/low_fare_search.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 44e739e..e9b3f27 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -137,7 +137,7 @@ class AmadeusClient(BaseClient):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
                                                                                    message_id, option_code, segment_name, family_name, quantity, f_name, pax_type, inf_number, d_of_birth)
-        # print(request_data)
+        print(request_data)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
         # print(response_data)
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 848d5c1..40dac4c 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -147,6 +147,8 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
             agent_signature = from_json_safe(data, "agentSignature")
             creation_office_id = from_json_safe(data, "creationOfficeId")
             creation_date = from_json_safe(data, "creationDate")
+            print("****** Test Creation DAte ********")
+            print(creation_date)
             creation_time = from_json_safe(data, "creationTime")
             creation_date_time = reformat_date(creation_date + creation_time, "%d%m%y%H%M", "%Y-%m-%dT%H:%M:%S")
             pnr = PnrInfo(dk, agent_signature, creation_office_id, creation_date_time)
@@ -188,7 +190,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
 
     def _ticketing_info(self):
         list_ticket = []
-        for ticket in ensure_list(from_json_safe(self.payload["dataElementsMaster"], "dataElementsIndiv")):
+        for ticket in ensure_list(from_json_safe(from_json_safe(self.payload, "dataElementsMaster"), "dataElementsIndiv")):
             if "ticketElement" in ticket:
                 data_element = from_json_safe(ticket, "ticketElement")
                 ticket_element = from_json_safe(data_element, "ticket")
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 24b99d3..28e8c36 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -764,15 +764,8 @@ class AmadeusXMLBuilder:
                                     <infantIndicator>{inf_number}</infantIndicator>
                                 </passenger>
                             </travellerInformation>
-                            <dateOfBirth>
-                                <dateAndTimeDetails>
-                                    <date>{d_of_birth}</date>
-                                </dateAndTimeDetails>
-                            </dateOfBirth>
-
                         </passengerData>
                         </travellerInfo>
-
                     </PNR_AddMultiElements>
                 </soapenv:Body>
             </soapenv:Envelope> """
diff --git a/pygds/tests/amadeus/low_fare_search.py b/pygds/tests/amadeus/low_fare_search.py
new file mode 100644
index 0000000..0960d8c
--- /dev/null
+++ b/pygds/tests/amadeus/low_fare_search.py
@@ -0,0 +1,36 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+from pygds.core.request import RequestedSegment, LowFareSearchRequest
+from pygds.core.types import TravellerNumbering
+from pygds import log_handler
+from pygds.env_settings import get_setting
+import os
+from pygds.amadeus.client import AmadeusClient
+endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+username = get_setting("AMADEUS_USERNAME")
+password = get_setting("AMADEUS_PASSWORD")
+office_id = get_setting("AMADEUS_OFFICE_ID")
+wsap = get_setting("AMADEUS_WSAP")
+dir_path = os.path.dirname(os.path.realpath(__file__))
+dir_path = os.path.join(dir_path, "..", "..", "..")
+os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+log = log_handler.get_logger("test_all")
+client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+
+
+def low_fare_search(origin: str, destination: str, date_dep: str, date_arr: str):
+    log.debug(f"make search in origin '{origin}' to the destination '{destination}'")
+    segments = [RequestedSegment(origin=origin, destination=destination, departure_date=date_dep, arrival_date=date_arr)]
+    low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
+    log.debug(f"making search from '{origin}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
+    currency_code, c_qualifier = ("EUR", "RC")
+    search_results = client.fare_master_pricer_travel_board_search(low_fare_search, currency_code, c_qualifier)
+    log.debug("fare_master_pricer_travel_board_search")
+    ressults, session_info = (search_results.payload, search_results.session_info)
+    if session_info.session_ended:
+        log.error("Session is ended after search")
+        return
+    log.debug(ressults)
diff --git a/pygds/tests/amadeus/script_low_fare_search.py b/pygds/tests/amadeus/script_low_fare_search.py
index 505461b..574eb69 100644
--- a/pygds/tests/amadeus/script_low_fare_search.py
+++ b/pygds/tests/amadeus/script_low_fare_search.py
@@ -6,7 +6,7 @@ from pygds.core.request import RequestedSegment, LowFareSearchRequest
 from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary
 from pygds import log_handler
 from pygds.env_settings import get_setting
-# from pygds.core.helpers import get_data_from_json_safe as from_json_safe, ensure_list
+from pygds.core.helpers import reformat_date
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
@@ -91,7 +91,9 @@ def test():
         client.end_session(message_id)
         # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
         # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
-        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 0, "SS1", "Ndiaye", 2, "Ibrahima", "ADT", 1, "05JAN92")
+        # r_date = reformat_date("10JUN78", "%d%m%y%H%M", "")
+
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 0, "S1", "Ndiaye", 2, "Ibrahima", "ADT", 1, "10JUN78")
         # log.debug(mise_a_j)
         log.debug("update passenger")
         log.debug(res_updat_pas.payload)
-- 
2.17.1


From 0f55d3b15250a2432a648d1b9d47dcd6047291dd Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Fri, 25 Oct 2019 16:15:20 +0000
Subject: [PATCH 15/46] Amadeus add TST on ticket

---
 pygds/tests/amadeus/test_ticket.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
index 32c088e..5b87daa 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -66,6 +66,7 @@ def test():
         session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
         log.info(session_info)
         log.info(res_store_price)
+        tst_refs = [tst.tst_reference for tst in res_store_price]
         if session_info.session_ended is True:
             log.error("The session is ended when storing TST")
             return
@@ -93,7 +94,7 @@ def test():
 
         log.info("6. Ticket")
         message_id = session_info.message_id
-        res_ticket = client.issue_ticket_with_retrieve(message_id, [], [])
+        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
         session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
         log.info(session_info)
         log.info(res_ticket)
-- 
2.17.1


From 589e1cccb5a0c15f60706ec71deccb977ba96aad Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Fri, 25 Oct 2019 17:30:28 +0000
Subject: [PATCH 16/46] add channges

---
 pygds/tests/amadeus/script_low_fare_search.py | 14 +++++++-------
 pygds/tests/amadeus/test_ticket.py            |  7 ++++---
 2 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/pygds/tests/amadeus/script_low_fare_search.py b/pygds/tests/amadeus/script_low_fare_search.py
index 574eb69..102cbf6 100644
--- a/pygds/tests/amadeus/script_low_fare_search.py
+++ b/pygds/tests/amadeus/script_low_fare_search.py
@@ -101,13 +101,13 @@ def test():
 
         log.debug(res_price.payload)
         # log.debug("End ")
-        # log.debug("End result price")
-        # chosen_price: Fare = res_price.payload[0]
-        # log.info(f"Chosen price: {chosen_price}")
-        # res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
-        # log.debug("result TST")
-        # session_info, res_tst = (res_tst.session_info, res_tst.payload)
-        # log.debug(res_tst)
+        log.debug("End result price")
+        chosen_price: Fare = res_price.payload[0]
+        log.info(f"Chosen price: {chosen_price}")
+        res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
+        log.debug("result TST")
+        session_info, res_tst = (res_tst.session_info, res_tst.payload)
+        log.debug(res_tst)
         # log.debug("Test queue_place_pnr ")
         # rest_q_place = client.queue_place_pnr(message_id, pnr, [68, 25, 46])
         # log.debug(rest_q_place)
diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
index 5b87daa..bb7513f 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -33,19 +33,20 @@ def test():
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
-        log.info("1. Getting Reservation")
+        log.info("1. Getting Reservation****************************")
         res_reservation = client.get_reservation(pnr, message_id, False)
         session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
         log.info(session_info)
         log.info(res_reservation)
         if session_info.session_ended is True:
-            log.error("The session is ended when retrieving PNR")
+            log.error("The session is ended when retrieving PNR*********************")
             return
 
         company_id = res_reservation["pnr_header"].company_id
-        log.info("2. Pricing PNR")
+        log.info("2. Pricing PNR ***********************************")
         message_id = session_info.message_id
         passengers = [p.name_id for p in res_reservation["passengers"]]
+        print(passengers)
         segments = [s.segment_reference for s in res_reservation["itineraries"]]
         price_request = PriceRequest(passengers, segments, "PUB")
         res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
-- 
2.17.1


From f5138deeba7437248e90e17166f3c5be99c43888 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Fri, 25 Oct 2019 17:37:13 +0000
Subject: [PATCH 17/46] accept changes

---
 pygds/tests/amadeus/test_ticket.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
index 32c088e..99d03bc 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -47,6 +47,8 @@ def test():
         message_id = session_info.message_id
         passengers = [p.name_id for p in res_reservation["passengers"]]
         segments = [s.segment_reference for s in res_reservation["itineraries"]]
+        print("****** Values passengers and segments")
+        print(passengers, segments)
         price_request = PriceRequest(passengers, segments, "PUB")
         res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
         session_info, res_price = (res_price.session_info, res_price.payload)
-- 
2.17.1


From d28ee2bf23f84a5aa834393495b232c145b1d5bb Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Fri, 25 Oct 2019 18:28:41 +0000
Subject: [PATCH 18/46] add verification of dict  instance

---
 pygds/core/helpers.py              | 3 +++
 pygds/tests/amadeus/test_ticket.py | 2 +-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/pygds/core/helpers.py b/pygds/core/helpers.py
index 7d9d70b..ef02d20 100644
--- a/pygds/core/helpers.py
+++ b/pygds/core/helpers.py
@@ -14,6 +14,9 @@ def get_data_from_json(json_data, *paths):
     """
     value = json_data
     for path in paths:
+        if not isinstance(json_data, dict):
+            return json_data
+
         if value is None:
             return None
         value = value[path]
diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
index 5b87daa..306a8a7 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -26,7 +26,7 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_ticket")
-    pnr = "LNB4CC"  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "LTGPDG"  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-- 
2.17.1


From 14da00f2c389b3f2b22430237105dfdfa39d4b26 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Fri, 25 Oct 2019 19:21:38 +0000
Subject: [PATCH 19/46] script low fare search

---
 .../amadeus/xml_parsers/response_extractor.py |  2 +-
 pygds/amadeus/xml_parsers/retrive_pnr.py      |  2 +-
 pygds/tests/amadeus/script_low_fare_search.py | 25 +++++++++++++++++++
 .../amadeus/test_flow_low_fare_search.py      | 25 ++++++++++++++++++-
 pygds/tests/amadeus/test_ticket.py            |  2 +-
 5 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 95e5184..1dd1d16 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -449,7 +449,7 @@ class CreateTstResponseExtractor(BaseResponseExtractor):
         pnr = from_json_safe(payload, "pnrLocatorData", "reservationInformation", "controlNumber")
         tst_datas = from_json_safe(payload, "tstList")
         tst_info = []
-        for tst_data in tst_datas:
+        for tst_data in ensure_list(tst_datas):
             tst_ref_data = from_json_safe(tst_data, "tstReference")
             tst_ref = None
             if from_json_safe(tst_ref_data, "referenceType") == "TST":
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 40dac4c..99da6b6 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -216,7 +216,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
     def _remark(self):
         list_remark = []
         sequence = 1
-        for data_element in ensure_list(from_json_safe(self.payload["dataElementsMaster"], "dataElementsIndiv")):
+        for data_element in ensure_list(from_json_safe(from_json_safe(self.payload, "dataElementsMaster"), "dataElementsIndiv")):
             data_remarks = from_json_safe(data_element, "miscellaneousRemarks")
             # print(data_remarks)
             if data_remarks and from_json_safe(data_remarks, "remarks", "type") == "RM":
diff --git a/pygds/tests/amadeus/script_low_fare_search.py b/pygds/tests/amadeus/script_low_fare_search.py
index 102cbf6..3fbe980 100644
--- a/pygds/tests/amadeus/script_low_fare_search.py
+++ b/pygds/tests/amadeus/script_low_fare_search.py
@@ -84,6 +84,29 @@ def test():
         for pax in res_reservation["passengers"]:
             pax_refs.append(pax.name_id)
         log.info("price pnr")
+
+        print("Add form of payment")
+        log.info("4. Add form of payment")
+        message_id = session_info.message_id
+        # fop = CheckPayment("CHEQUE", "MOO")
+        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+        # session_info, res_fop = (res_fop.session_info, res_fop.payload)
+        # log.info(session_info)
+        log.info(res_fop)
+        if session_info.session_ended is True:
+            log.error("The session is ended when adding Form")
+            return
+
+        log.info("5. Save")
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        session_info, res_save = (res_save.session_info, res_save.payload)
+        log.debug(session_info)
+        log.debug(res_save)
+        if session_info.session_ended is True:
+            log.error("The session is ended when saving PNR")
+            return
+
         price_request = PriceRequest(pax_refs, seg_refs)
         log.debug("result of price_request")
         log.debug(price_request)
@@ -108,6 +131,8 @@ def test():
         log.debug("result TST")
         session_info, res_tst = (res_tst.session_info, res_tst.payload)
         log.debug(res_tst)
+
+
         # log.debug("Test queue_place_pnr ")
         # rest_q_place = client.queue_place_pnr(message_id, pnr, [68, 25, 46])
         # log.debug(rest_q_place)
diff --git a/pygds/tests/amadeus/test_flow_low_fare_search.py b/pygds/tests/amadeus/test_flow_low_fare_search.py
index 13f3164..1a53a98 100644
--- a/pygds/tests/amadeus/test_flow_low_fare_search.py
+++ b/pygds/tests/amadeus/test_flow_low_fare_search.py
@@ -10,7 +10,7 @@ from pygds.env_settings import get_setting
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-# from pygds.core.payment import FormOfPayment, CreditCard
+from pygds.core.payment import CheckPayment, CreditCard
 from pygds.core.price import PriceRequest, Fare
 # from pygds.core.types import SellItinerary
 # from pygds.core.types import SellItinerary, TravellerInfo, TravellerNumbering
@@ -82,6 +82,28 @@ def test():
         for pax in res_reservation["passengers"]:
             pax_refs.append(pax.name_id)
         log.info("price pnr")
+        print("Testing FOP ***********")
+        log.info("4. Add form of payment")
+        # message_id = session_info.message_id
+        # fop = CheckPayment("CHEQUE", "MOO")
+        company_id = res_reservation["pnr_header"].company_id
+        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
+        # session_info, res_fop = (res_fop.session_info, res_fop.payload)
+        # log.info(session_info)
+        log.info(res_fop)
+        if session_info.session_ended is True:
+            log.error("The session is ended when adding Form")
+            return
+
+        log.info("5. Save")
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        session_info, res_save = (res_save.session_info, res_save.payload)
+        log.debug(session_info)
+        log.debug(res_save)
+        if session_info.session_ended is True:
+            log.error("The session is ended when saving PNR")
+            return
         price_request = PriceRequest(pax_refs, seg_refs)
         log.debug("result of price_request")
         log.debug(price_request)
@@ -106,6 +128,7 @@ def test():
         log.debug(res_tst)
         rf = client.send_command("RFSaliou", message_id)
         log.debug(rf)
+
         log.debug("***** Testing ticket ******")
         res_issue = client.ticketing_pnr(message_id, "ADT", pax_refs)
         # res_issue = client.issue_ticket_with_retrieve(message_id, [1])
diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
index bb7513f..0eb552c 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -26,7 +26,7 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_ticket")
-    pnr = "LNB4CC"  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "LN6C8E"  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-- 
2.17.1


From 512688dba3f9f265b5124dc06a4175c83fb414b5 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Mon, 28 Oct 2019 11:54:46 +0000
Subject: [PATCH 20/46] add full flow of low fare search

---
 pygds/tests/amadeus/test_low_fare_search.py | 221 ++++++++++++++++++++
 1 file changed, 221 insertions(+)
 create mode 100644 pygds/tests/amadeus/test_low_fare_search.py

diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
new file mode 100644
index 0000000..1c86d56
--- /dev/null
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -0,0 +1,221 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+from pygds.core.request import RequestedSegment, LowFareSearchRequest
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary
+from pygds import log_handler
+from pygds.env_settings import get_setting
+
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+from pygds.core.payment import CreditCard
+from pygds.core.price import PriceRequest
+
+queue_number = "1"
+
+
+def test():
+    """ A suite of tests """
+
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+
+    log.info("Begin calling Client API *********************************************")
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    log.info("End of call Client API ***********************************************")
+
+    try:
+
+        log.info("Begin call of Low Fare Search *************************************")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "071119")
+
+        segments = [
+            RequestedSegment(
+                origin=origine,
+                destination=destination,
+                departure_date=date_dep,
+                arrival_date=date_arr)
+        ]
+
+        low_fare_search = LowFareSearchRequest(
+            segments,
+            "Y",
+            "",
+            TravellerNumbering(1),
+            "",
+            "",
+            ["DL",
+             "AF"],
+            "",
+            "",
+            1)
+
+        log.info(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
+
+        currency_code, c_qualifier = ("EUR", "RC")
+        search_results = client.fare_master_pricer_travel_board_search(
+            low_fare_search, currency_code, c_qualifier
+        )
+
+        log.info("End of Low Fare Search ********************************************************************************")
+
+        ressults, session_info = (search_results.payload, search_results.session_info)
+
+        if session_info.session_ended:
+            log.error("Session is ended after search")
+            return
+
+        log.info("Begin call of sell from recommandation *************************************************************")
+
+        itineraries = ressults[0]['itineraries']
+
+        list_segments = []
+
+        for flight_segment in itineraries:
+
+            segment = flight_segment[0]
+
+            segment = SellItinerary(
+                segment["board_airport"],
+                segment["off_airport"],
+                segment["departure_date"],
+                segment["marketing_company"],
+                segment["flight_number"],
+                segment["book_class"],
+                2
+            )
+
+            list_segments.append(segment)
+
+        result_sell = client.sell_from_recommandation(
+            list_segments
+        )
+
+        result_sell, session_info = (result_sell.payload, result_sell.session_info)
+
+        if session_info.session_ended:
+
+            log.error("Session is ended after sell from recommendation")
+
+            return
+
+        log.info("End of Sell From Recommandation ******************************************************")
+
+        log.info("Begin Call of Add Passenger Info ****************************************************")
+
+        message_id = session_info.message_id  # is the message_id to use for the all others actions
+
+        traveller_infos = [TravellerInfo(1, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
+                           TravellerInfo(2, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
+
+        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
+
+        passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+
+        if session_info.session_ended:
+
+            log.error("Session is ended after creat pnr")
+
+            return
+
+        log.info("End of Calling of Add Passenger Information ****************************************")
+
+        log.info("Begin Call of Pricing Segment for some passenger ***********************************")
+        company_id = passenger_info_response["pnr_header"].company_id
+
+        seg_refs = []
+        pax_refs = []
+        for seg in passenger_info_response["itineraries"]:
+            seg_refs.append(seg.sequence)
+        for pax in passenger_info_response["passengers"]:
+            pax_refs.append(pax.name_id)
+
+        price_request = PriceRequest(pax_refs, seg_refs)
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        session_info, res_price = (res_price.session_info, res_price.payload)
+
+        log.info("End of Callinf of Price PNR *******************************************************")
+
+        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
+
+        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
+        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+
+        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
+
+        log.info("Begin Creating TST ********************************************************************")
+
+        tst = res_price[0].fare_reference
+        message_id = session_info.message_id
+        res_store_price = client.ticket_create_tst_from_price(message_id, tst)
+        session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
+
+        tst_refs = [tst.tst_reference for tst in res_store_price]
+        if session_info.session_ended is True:
+            log.error("The session is ended when storing TST")
+            return
+
+        log.info("End of Create TST *****************************************************************")
+
+        log.info("Begin Add Form of Payment *********************************************************")
+
+        message_id = session_info.message_id
+        # fop = CheckPayment("CHEQUE", "MOO")
+        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
+        log.info(type(res_fop))
+
+        if session_info.session_ended is True:
+            log.error("The session is ended when adding Form")
+            return
+
+        log.info("End of Add Form of Payment ********************************************************")
+
+        log.info("Begin Save ************************************************************************")
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        session_info, res_save = (res_save.session_info, res_save.payload)
+        log.debug(session_info)
+        log.debug(res_save)
+        if session_info.session_ended is True:
+            log.error("The session is ended when saving PNR")
+            return
+        log.info("End Sqve ****************************************************************************")
+
+        log.info("Begin Ticket ************************************************************************")
+
+        message_id = session_info.message_id
+        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+        log.info(session_info)
+        log.info(res_ticket)
+        if session_info.session_ended is True:
+            log.error("The session is ended when ticketing")
+            return
+
+        log.info("End of ticketing **********************************************************************")
+
+        log.info("Begin Place PNR in the Queue ***************************************************************************")
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
-- 
2.17.1


From 2c48948ebbf016234ae8f468934ed8bd694020f4 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Mon, 28 Oct 2019 13:10:36 +0000
Subject: [PATCH 21/46] accept changes

---
 pygds/amadeus/xmlbuilders/builder.py          |   7 +-
 pygds/tests/amadeus/script_low_fare_search.py | 162 ++++++++++++++++++
 2 files changed, 168 insertions(+), 1 deletion(-)
 create mode 100644 pygds/tests/amadeus/script_low_fare_search.py

diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 8d14a9f..4ba5fc6 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -669,7 +669,7 @@ class AmadeusXMLBuilder:
 
     def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code,
                                       segment_name):
-        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
+        # security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
         # <nameInformation>
         #     <qualifier>RF</qualifier>
         #     <name>KOKOU</name>
@@ -813,6 +813,11 @@ class AmadeusXMLBuilder:
             <soapenv:Body>
                 <Ticket_CancelDocument xmlns="http://xml.amadeus.com/TRCANQ_14_1_1A" >
                     {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
+                    <stockProviderDetails>
+                       <officeSettingsDetails>
+                          <stockProviderCode>6X</stockProviderCode>
+                       </officeSettingsDetails>
+                    </stockProviderDetails>
                 </Ticket_CancelDocument>
             </soapenv:Body>
         </soapenv:Envelope>
diff --git a/pygds/tests/amadeus/script_low_fare_search.py b/pygds/tests/amadeus/script_low_fare_search.py
new file mode 100644
index 0000000..bf8d7ae
--- /dev/null
+++ b/pygds/tests/amadeus/script_low_fare_search.py
@@ -0,0 +1,162 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+from pygds.core.request import RequestedSegment, LowFareSearchRequest
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary
+from pygds import log_handler
+from pygds.env_settings import get_setting
+from pygds.core.helpers import reformat_date
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.core.payment import FormOfPayment, CreditCard
+from pygds.core.price import PriceRequest, Fare
+# from pygds.core.types import SellItinerary
+# from pygds.core.types import SellItinerary, TravellerInfo, TravellerNumbering
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    try:
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "071119")
+        segments = [RequestedSegment(origin=origine, destination=destination, departure_date=date_dep, arrival_date=date_arr)]
+        low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
+        log.debug(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
+        currency_code, c_qualifier = ("EUR", "RC")
+        search_results = client.fare_master_pricer_travel_board_search(low_fare_search, currency_code, c_qualifier)
+        log.debug("fare_master_pricer_travel_board_search")
+        ressults, session_info = (search_results.payload, search_results.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after search")
+            return
+        log.debug(ressults)
+        log.debug("sell_from_recommandation")
+        segments = (ressults[0]['itineraries'])
+        itineraries = []
+        for segment in segments:
+            seg = segment[0]
+            itinerary = SellItinerary(seg["board_airport"], seg["off_airport"], seg["departure_date"], seg["marketing_company"], seg["flight_number"], seg["book_class"], 2)
+            itineraries.append(itinerary)
+        choise_segment = client.sell_from_recommandation(itineraries)
+        ressults_sell, session_info = (choise_segment.payload, choise_segment.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after sell from recommendation")
+            return
+        log.debug(ressults_sell)
+        message_id = session_info.message_id  # is the message_id to use for the all others actions
+        traveller_infos = [TravellerInfo(1, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
+                           TravellerInfo(2, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
+        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
+        ressults_add_passengers, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+        if session_info.session_ended:
+            log.error("Session is ended after creat pnr")
+            return
+        log.debug("Result add passengers")
+        log.debug(ressults_add_passengers)
+        log.debug("Create pnr")
+        response_data = client.create_pnr(message_id)
+
+        client.end_session(message_id)
+        log.debug(response_data.payload)
+        pnr = response_data.payload["pnr_header"].controle_number
+        log.debug("display pnr " + pnr if pnr is not None else "")
+        res_reservation = client.get_reservation(pnr, None, False)
+        res_reservation, message_id = res_reservation.payload, res_reservation.session_info.message_id
+        log.debug(" result reservation ")
+        log.info(res_reservation)
+        seg_refs = []
+        pax_refs = []
+        for seg in res_reservation["itineraries"]:
+            seg_refs.append(seg.sequence)
+        for pax in res_reservation["passengers"]:
+            pax_refs.append(pax.name_id)
+        log.info("price pnr")
+
+        print("Add form of payment")
+        log.info("4. Add form of payment")
+        message_id = session_info.message_id
+        # fop = CheckPayment("CHEQUE", "MOO")
+        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+        # session_info, res_fop = (res_fop.session_info, res_fop.payload)
+        # log.info(session_info)
+        log.info(res_fop)
+        if session_info.session_ended is True:
+            log.error("The session is ended when adding Form")
+            return
+
+        log.info("5. Save")
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        session_info, res_save = (res_save.session_info, res_save.payload)
+        log.debug(session_info)
+        log.debug(res_save)
+        if session_info.session_ended is True:
+            log.error("The session is ended when saving PNR")
+            return
+
+        price_request = PriceRequest(pax_refs, seg_refs)
+        log.debug("result of price_request")
+        log.debug(price_request)
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        client.end_session(message_id)
+        # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
+        # mise_a_j = client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+        # r_date = reformat_date("10JUN78", "%d%m%y%H%M", "")
+
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 0, "S1", "Ndiaye", 2, "Ibrahima", "ADT", 1, "10JUN78")
+        # log.debug(mise_a_j)
+        log.debug("update passenger")
+        log.debug(res_updat_pas.payload)
+        # client.end_session(message_id)
+
+        log.debug(res_price.payload)
+        # log.debug("End ")
+        log.debug("End result price")
+        chosen_price: Fare = res_price.payload[0]
+        log.info(f"Chosen price: {chosen_price}")
+        res_tst = client.ticket_create_tst_from_price(message_id, chosen_price.fare_reference)
+        log.debug("result TST")
+        session_info, res_tst = (res_tst.session_info, res_tst.payload)
+        log.debug(res_tst)
+
+
+        # log.debug("Test queue_place_pnr ")
+        # rest_q_place = client.queue_place_pnr(message_id, pnr, [68, 25, 46])
+        # log.debug(rest_q_place)
+
+        # log.debug("Test issue_combined")
+        # res_issue_combined = client.issue_combined(message_id, pax_refs, seg_refs, False)
+        # log.debug(res_issue_combined)
+        # log.info(f"session from tst: {session_info}")
+        # log.info(f"response from tst: {res_tst}")
+        # log.debug(res_tst)
+        # rf = client.send_command("RFSaliou", message_id)
+        # log.debug(rf)
+        # res_issue = client.ticketing_pnr(message_id, "PAX", pax_refs[1])
+        # res_issue = client.issue_ticket_with_retrieve(message_id, [1])
+        # log.debug(res_issue)
+        res_cancel = client.void_tickets(message_id, [1])
+        # log.debug(res_cancel)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
-- 
2.17.1


From 540d14c6078a2a204fef9a24534794a4beba6513 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Mon, 28 Oct 2019 15:14:48 +0000
Subject: [PATCH 22/46] Begin to add informative_pricing_without_pnr

---
 fop.xml                                       | 154 ++++++++++++++++++
 pygds/amadeus/client.py                       |   5 +-
 .../amadeus/xml_parsers/response_extractor.py |  10 ++
 pygds/tests/amadeus/queue.xml                 |  28 ++++
 pygds/tests/amadeus/test_low_fare_search.py   |  55 +++++--
 5 files changed, 235 insertions(+), 17 deletions(-)
 create mode 100644 fop.xml
 create mode 100644 pygds/tests/amadeus/queue.xml

diff --git a/fop.xml b/fop.xml
new file mode 100644
index 0000000..2fbf43d
--- /dev/null
+++ b/fop.xml
@@ -0,0 +1,154 @@
+b'<?xml version="1.0" encoding="UTF-8"?>
+<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
+    xmlns:awsse="http://xml.amadeus.com/2010/06/Session_v3" 
+    xmlns:wsa="http://www.w3.org/2005/08/addressing">
+    <soapenv:Header>
+        <wsa:To>http://www.w3.org/2005/08/addressing/anonymous</wsa:To>
+        <wsa:From>
+            <wsa:Address>https://nodeD1.test.webservices.amadeus.com/1ASIWCTSCSO</wsa:Address>
+        </wsa:From>
+        <wsa:Action>http://webservices.amadeus.com/TFOPCQ_15_4_1A</wsa:Action>
+        <wsa:MessageID>urn:uuid:c775b6ea-6af2-9754-c50a-0324451d2557</wsa:MessageID>
+        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">3c394dc9-dc3a-4b96-8547-b0fbefa674ab</wsa:RelatesTo>
+        <awsse:Session TransactionStatusCode="InSeries">
+            <awsse:SessionId>00P8I3BXVY</awsse:SessionId>
+            <awsse:SequenceNumber>7</awsse:SequenceNumber>
+            <awsse:SecurityToken>1Y6PLA1RNSBQ239XJF10CSQ7I4</awsse:SecurityToken>
+        </awsse:Session>
+    </soapenv:Header>
+    <soapenv:Body>
+        <FOP_CreateFormOfPaymentReply xmlns="http://xml.amadeus.com/TFOPCR_15_4_1A">
+            <transmissionError>
+                <errorOrWarningCodeDetails>
+                    <errorDetails>
+                        <errorCode>25779</errorCode>
+                    </errorDetails>
+                </errorOrWarningCodeDetails>
+                <errorWarningDescription>
+                    <freeTextDetails>
+                        <textSubjectQualifier>3</textSubjectQualifier>
+                        <source>M</source>
+                        <encoding>1</encoding>
+                    </freeTextDetails>
+                    <freeText>ERROR(S) DETECTED AT CREATION TIME</freeText>
+                </errorWarningDescription>
+            </transmissionError>
+            <fopDescription>
+                <fopReference></fopReference>
+                <passengerAssociation>
+                    <passengerReference>
+                        <type>PAX</type>
+                        <value>2</value>
+                    </passengerReference>
+                </passengerAssociation>
+                <passengerAssociation>
+                    <passengerReference>
+                        <type>PAX</type>
+                        <value>3</value>
+                    </passengerReference>
+                </passengerAssociation>
+                <pnrElementAssociation>
+                    <referenceDetails>
+                        <type>SEG</type>
+                        <value>1</value>
+                    </referenceDetails>
+                </pnrElementAssociation>
+                <fpElementError>
+                    <errorOrWarningCodeDetails>
+                        <errorDetails>
+                            <errorCode>3671</errorCode>
+                        </errorDetails>
+                    </errorOrWarningCodeDetails>
+                    <errorWarningDescription>
+                        <freeTextDetails>
+                            <textSubjectQualifier>3</textSubjectQualifier>
+                            <source>M</source>
+                            <encoding>1</encoding>
+                        </freeTextDetails>
+                        <freeText>FARE ELEMENT ALREADY EXISTS FOR PASSENGER/SEGMENT</freeText>
+                    </errorWarningDescription>
+                </fpElementError>
+                <mopDescription>
+                    <fopSequenceNumber>
+                        <sequenceDetails>
+                            <number>1</number>
+                        </sequenceDetails>
+                    </fopSequenceNumber>
+                    <mopDetails>
+                        <fopPNRDetails>
+                            <fopDetails>
+                                <fopCode>CCVI</fopCode>
+                                <fopStatus>N</fopStatus>
+                                <fopEdiCode>CCVI</fopEdiCode>
+                                <fopReportingCode>CC</fopReportingCode>
+                                <fopElecTicketingCode>CC</fopElecTicketingCode>
+                            </fopDetails>
+                        </fopPNRDetails>
+                        <oldFopFreeflow>
+                            <freeTextDetails>
+                                <textSubjectQualifier>ZZZ</textSubjectQualifier>
+                                <source>M</source>
+                                <encoding>ZZZ</encoding>
+                            </freeTextDetails>
+                            <freeText>CCVIXXXXXXXXXXXX0004/0838*CV</freeText>
+                        </oldFopFreeflow>
+                        <pnrSupplementaryData>
+                            <dataAndSwitchMap>
+                                <criteriaSetType>S</criteriaSetType>
+                                <criteriaDetails>
+                                    <attributeType>13</attributeType>
+                                    <attributeDescription>1</attributeDescription>
+                                </criteriaDetails>
+                                <criteriaDetails>
+                                    <attributeType>5</attributeType>
+                                    <attributeDescription>1</attributeDescription>
+                                </criteriaDetails>
+                            </dataAndSwitchMap>
+                        </pnrSupplementaryData>
+                    </mopDetails>
+                    <paymentModule>
+                        <groupUsage>
+                            <attributeDetails>
+                                <attributeType>FP</attributeType>
+                            </attributeDetails>
+                        </groupUsage>
+                        <paymentData>
+                            <merchantInformation>
+                                <companyCode>1A</companyCode>
+                            </merchantInformation>
+                        </paymentData>
+                        <mopInformation>
+                            <fopInformation>
+                                <formOfPayment>
+                                    <type>CC</type>
+                                </formOfPayment>
+                            </fopInformation>
+                            <dummy></dummy>
+                            <creditCardData>
+                                <creditCardDetails>
+                                    <ccInfo>
+                                        <vendorCode>VI</vendorCode>
+                                        <cardNumber>XXXXXXXXXXXX0004</cardNumber>
+                                        <expiryDate>0838</expiryDate>
+                                    </ccInfo>
+                                </creditCardDetails>
+                            </creditCardData>
+                        </mopInformation>
+                        <dummy></dummy>
+                        <mopDetailedData>
+                            <fopInformation>
+                                <formOfPayment>
+                                    <type>CC</type>
+                                </formOfPayment>
+                            </fopInformation>
+                            <dummy></dummy>
+                            <creditCardDetailedData>
+                                <authorisationSupplementaryData></authorisationSupplementaryData>
+                            </creditCardDetailedData>
+                        </mopDetailedData>
+                    </paymentModule>
+                </mopDescription>
+            </fopDescription>
+        </FOP_CreateFormOfPaymentReply>
+    </soapenv:Body>
+</soapenv:Envelope>'
\ No newline at end of file
diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 210e9ca..cd39647 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -9,7 +9,7 @@ from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
-    IssueTicketResponseExtractor, CancelPnrExtractor
+    IssueTicketResponseExtractor, CancelPnrExtractor, QueueExtractor
 from pygds.core.payment import FormOfPayment
 from .errors import ClientError, ServerError
 from .xmlbuilders.builder import AmadeusXMLBuilder
@@ -275,7 +275,8 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.queue_place_pnr(message_id, session_id, sequence_number, security_token, pnr,
                                                         queues)
         response_data = self.__request_wrapper("queue_place_pnr", request_data, 'http://webservices.amadeus.com/QUQPCQ_03_1_1A')
-        return response_data
+
+        return QueueExtractor(response_data).extract()
         # return GetPnrResponseExtractor(response_data).extract()
 
     def issue_combined(self, message_id: str, passengers: List[str], segments: List[str], retrieve_pnr: bool):
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 9d8ff0b..e488f51 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -500,3 +500,13 @@ def extract_amount(amount_info, type_key="fareDataQualifier", amount_key="fareAm
     fare_amount.amount = from_json_safe(amount_info, amount_key)
     fare_amount.currency = from_json_safe(amount_info, currency_key)
     return fare_amount
+
+
+class QueueExtractor(BaseResponseExtractor):
+    def __init__(self, xml_content):
+        super().__init__(xml_content, True, True, "Queue_PlacePNRReply")
+
+    def _extract(self):
+        payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "Queue_PlacePNRReply")
+        pnr = from_json_safe(payload, "recordLocator", "reservation", "controlNumber")
+        return pnr
diff --git a/pygds/tests/amadeus/queue.xml b/pygds/tests/amadeus/queue.xml
new file mode 100644
index 0000000..adc0508
--- /dev/null
+++ b/pygds/tests/amadeus/queue.xml
@@ -0,0 +1,28 @@
+b'<?xml version="1.0" encoding="UTF-8"?>
+<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
+    xmlns:awsse="http://xml.amadeus.com/2010/06/Session_v3" 
+    xmlns:wsa="http://www.w3.org/2005/08/addressing">
+    <soapenv:Header>
+        <wsa:To>http://www.w3.org/2005/08/addressing/anonymous</wsa:To>
+        <wsa:From>
+            <wsa:Address>https://nodeD1.test.webservices.amadeus.com/1ASIWCTSCSO</wsa:Address>
+        </wsa:From>
+        <wsa:Action>http://webservices.amadeus.com/QUQPCQ_03_1_1A</wsa:Action>
+        <wsa:MessageID>urn:uuid:34406251-f155-9c24-6181-ca5206ab79d7</wsa:MessageID>
+        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">6cc29bdc-b43e-4911-a380-d289d6fcf09b</wsa:RelatesTo>
+        <awsse:Session TransactionStatusCode="InSeries">
+            <awsse:SessionId>00P8ZULZGN</awsse:SessionId>
+            <awsse:SequenceNumber>10</awsse:SequenceNumber>
+            <awsse:SecurityToken>3ULK1SBCO89G92P7EZ4QMPSZ07</awsse:SecurityToken>
+        </awsse:Session>
+    </soapenv:Header>
+    <soapenv:Body>
+        <Queue_PlacePNRReply xmlns="http://xml.amadeus.com/QUQPCR_03_1_1A">
+            <recordLocator>
+                <reservation>
+                    <controlNumber>MBJGP5</controlNumber>
+                </reservation>
+            </recordLocator>
+        </Queue_PlacePNRReply>
+    </soapenv:Body>
+</soapenv:Envelope>'
\ No newline at end of file
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 1c86d56..e605e64 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -68,18 +68,18 @@ def test():
         search_results = client.fare_master_pricer_travel_board_search(
             low_fare_search, currency_code, c_qualifier
         )
-
-        log.info("End of Low Fare Search ********************************************************************************")
-
-        ressults, session_info = (search_results.payload, search_results.session_info)
+        results, session_info = (search_results.payload, search_results.session_info)
+        log.info(results)
 
         if session_info.session_ended:
             log.error("Session is ended after search")
             return
 
+        log.info("End of Low Fare Search ********************************************************************************")
+
         log.info("Begin call of sell from recommandation *************************************************************")
 
-        itineraries = ressults[0]['itineraries']
+        itineraries = results[0]['itineraries']
 
         list_segments = []
 
@@ -104,6 +104,7 @@ def test():
         )
 
         result_sell, session_info = (result_sell.payload, result_sell.session_info)
+        log.info(result_sell)
 
         if session_info.session_ended:
 
@@ -125,6 +126,7 @@ def test():
         passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
 
         passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+        log.info(passenger_info_response)
 
         if session_info.session_ended:
 
@@ -135,6 +137,7 @@ def test():
         log.info("End of Calling of Add Passenger Information ****************************************")
 
         log.info("Begin Call of Pricing Segment for some passenger ***********************************")
+
         company_id = passenger_info_response["pnr_header"].company_id
 
         seg_refs = []
@@ -147,8 +150,15 @@ def test():
         price_request = PriceRequest(pax_refs, seg_refs)
         res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
         session_info, res_price = (res_price.session_info, res_price.payload)
+        log.info(res_price)
 
-        log.info("End of Callinf of Price PNR *******************************************************")
+        if session_info.session_ended:
+
+            log.error("Session is ended after price pnr")
+
+            return
+
+        log.info("End of Calling of Price PNR *******************************************************")
 
         log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
 
@@ -163,8 +173,9 @@ def test():
         message_id = session_info.message_id
         res_store_price = client.ticket_create_tst_from_price(message_id, tst)
         session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
-
         tst_refs = [tst.tst_reference for tst in res_store_price]
+        log.info(res_store_price)
+
         if session_info.session_ended is True:
             log.error("The session is ended when storing TST")
             return
@@ -177,19 +188,20 @@ def test():
         # fop = CheckPayment("CHEQUE", "MOO")
         fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
         res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
-        log.info(type(res_fop))
+        log.info(res_fop)
 
-        if session_info.session_ended is True:
-            log.error("The session is ended when adding Form")
-            return
+        # if res_fop.session_info.session_ended is True:
+        #     log.error("The session is ended when adding Form")
+        #     return
 
         log.info("End of Add Form of Payment ********************************************************")
 
         log.info("Begin Save ************************************************************************")
         res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
         session_info, res_save = (res_save.session_info, res_save.payload)
-        log.debug(session_info)
-        log.debug(res_save)
+        log.info(res_save)
+        pnr = res_save["pnr_header"].controle_number
+
         if session_info.session_ended is True:
             log.error("The session is ended when saving PNR")
             return
@@ -200,15 +212,28 @@ def test():
         message_id = session_info.message_id
         res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
         session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
-        log.info(session_info)
         log.info(res_ticket)
+
         if session_info.session_ended is True:
             log.error("The session is ended when ticketing")
             return
 
         log.info("End of ticketing **********************************************************************")
 
-        log.info("Begin Place PNR in the Queue ***************************************************************************")
+        log.info("Begin Placing PNR in the Queue ********************************************************")
+
+        global queue_number
+        queues = list()
+        queues.append(queue_number)
+        result_queue = client.queue_place_pnr(message_id, pnr, queues)
+        session_info, res_queue = (result_queue.session_info, result_queue.payload)
+        log.info(session_info)
+        log.info(res_queue)
+        if session_info.session_ended is True:
+            log.error("The session is ended when place pnr in the queue")
+            return
+
+        client.end_session(message_id)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
-- 
2.17.1


From 28e0be544e8f408d6e1b60b1c284e02c8c9e9d11 Mon Sep 17 00:00:00 2001
From: Demba <demba@ctsfares.com>
Date: Mon, 28 Oct 2019 19:34:35 +0000
Subject: [PATCH 23/46] add extractor form of payment amadeus

---
 pygds/amadeus/client.py                       |   5 +-
 .../amadeus/xml_parsers/response_extractor.py |  12 ++
 pygds/amadeus/xmlbuilders/builder.py          |   5 +-
 pygds/amadeus/xmlbuilders/sub_parts.py        |   4 +-
 pygds/core/form_of_payment.py                 |  35 ++++
 pygds/tests/amadeus/test_cancel.py            |   4 -
 pygds/tests/amadeus/test_low_fare_search.py   |  56 ++-----
 pygds/tests/amadeus/test_ticket.py            | 154 +++++++++---------
 8 files changed, 141 insertions(+), 134 deletions(-)
 create mode 100644 pygds/core/form_of_payment.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 210e9ca..7e59979 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -9,7 +9,7 @@ from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
-    IssueTicketResponseExtractor, CancelPnrExtractor
+    IssueTicketResponseExtractor, CancelPnrExtractor, FoPExtractor
 from pygds.core.payment import FormOfPayment
 from .errors import ClientError, ServerError
 from .xmlbuilders.builder import AmadeusXMLBuilder
@@ -109,10 +109,9 @@ class AmadeusClient(BaseClient):
             raise NoSessionError(message_id)
         request_data = self.xml_builder.add_form_of_payment_builder(
             message_id, session_id, sequence_number, security_token, fop, segment_refs, pax_refs, inf_refs, fop_sequence_number)
-        print(request_data)
         response_data = self.__request_wrapper("add_form_of_payment", request_data,
                                                'http://webservices.amadeus.com/TFOPCQ_15_4_1A')
-        return response_data
+        return FoPExtractor(response_data).extract()
 
     def pnr_add_multi_element(self, message_id, option_code, segment_name):
         """
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 9d8ff0b..79f2cd1 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -10,6 +10,7 @@ import logging
 
 from pygds.core.ticket import TicketReply
 from pygds.core.types import CancelPnrReply
+from pygds.core.form_of_payment import FormOfPayment
 
 
 class BaseResponseExtractor(object):
@@ -500,3 +501,14 @@ def extract_amount(amount_info, type_key="fareDataQualifier", amount_key="fareAm
     fare_amount.amount = from_json_safe(amount_info, amount_key)
     fare_amount.currency = from_json_safe(amount_info, currency_key)
     return fare_amount
+
+
+class FoPExtractor(BaseResponseExtractor):
+    def __init__(self, xml_content):
+        super().__init__(xml_content, True, True, "FOP_CreateFormOfPaymentReply")
+
+    def _extract(self):
+        payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "FOP_CreateFormOfPaymentReply")
+        fop_reference = from_json_safe(payload, "fopDescription", "fopReference")
+        mop_description = from_json_safe(payload, "fopDescription", "mopDescription")
+        return FormOfPayment(fop_reference, mop_description)
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 8d14a9f..deaf12f 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -667,9 +667,8 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
     """
 
-    def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code,
-                                      segment_name):
-        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
+    def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code, segment_name):
+        # security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
         # <nameInformation>
         #     <qualifier>RF</qualifier>
         #     <name>KOKOU</name>
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index 133418d..510c141 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -74,7 +74,6 @@ def mptbs_currency_conversion(currency: str):
 
 
 def mptbs_pricing_types_com(types: str = None, identify: str = ""):
-
     return f"""
     <corporate>
         <corporateId>
@@ -405,7 +404,7 @@ def _fare_informative_price_passenger_group(sequence_no, start, count, pax_type)
 
 
 def ppwbc_passenger_segment_selection(price_request: PriceRequest):
-    if not price_request or not(price_request.segments or price_request.passengers):
+    if not price_request or not (price_request.segments or price_request.passengers):
         return ""
     pax_refs = []
     seg_refs = []
@@ -689,4 +688,3 @@ def fop_sequence_number(sequence_number: str):
         </sequenceDetails>
     </fopSequenceNumber>
     """
-
diff --git a/pygds/core/form_of_payment.py b/pygds/core/form_of_payment.py
new file mode 100644
index 0000000..7fcf5c8
--- /dev/null
+++ b/pygds/core/form_of_payment.py
@@ -0,0 +1,35 @@
+from typing import Dict
+import json
+
+
+class FormOfPaymentBasic:
+    def to_data(self):
+        """
+            Method that returns a dictionary containing useful data. Must be implemented by sub-classes
+        """
+        raise NotImplementedError(" this is not yet implemented")
+
+    def to_json(self):
+        """
+            Dumps the object to json string
+        """
+        return json.dumps(self.to_data(), indent=4)
+
+    def __repr__(self):
+        """
+            method that redefined the string type
+        """
+        return self.to_json()
+
+
+class FormOfPayment(FormOfPaymentBasic):
+
+    def __init__(self, fop_reference: Dict, mop_description: Dict):
+        self.fop_reference = fop_reference
+        self.mop_description = mop_description
+
+    def to_data(self):
+        return {
+            "fop_reference": self.fop_reference,
+            "mop_description": self.mop_description
+        }
diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
index ba39ed8..19f536a 100644
--- a/pygds/tests/amadeus/test_cancel.py
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -5,12 +5,8 @@
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-# from pygds.core.payment import FormOfPayment, CreditCard
-from pygds.core.price import PriceRequest  # , Fare
-# from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
 from pygds.env_settings import get_setting
 from pygds import log_handler
-from pygds.core.types import TravellerInfo, ReservationInfo
 
 
 def test():
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 1c86d56..c44b37f 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -39,7 +39,7 @@ def test():
     try:
 
         log.info("Begin call of Low Fare Search *************************************")
-        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "071119")
+        origine, destination, date_dep, date_arr = ("DSS", "CDG", "051119", "071119")
 
         segments = [
             RequestedSegment(
@@ -49,44 +49,21 @@ def test():
                 arrival_date=date_arr)
         ]
 
-        low_fare_search = LowFareSearchRequest(
-            segments,
-            "Y",
-            "",
-            TravellerNumbering(1),
-            "",
-            "",
-            ["DL",
-             "AF"],
-            "",
-            "",
-            1)
-
+        low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
         log.info(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
-
         currency_code, c_qualifier = ("EUR", "RC")
-        search_results = client.fare_master_pricer_travel_board_search(
-            low_fare_search, currency_code, c_qualifier
-        )
-
-        log.info("End of Low Fare Search ********************************************************************************")
-
+        search_results = client.fare_master_pricer_travel_board_search(low_fare_search, currency_code, c_qualifier)
+        log.info(
+            "End of Low Fare Search ********************************************************************************")
         ressults, session_info = (search_results.payload, search_results.session_info)
-
         if session_info.session_ended:
             log.error("Session is ended after search")
             return
-
         log.info("Begin call of sell from recommandation *************************************************************")
-
         itineraries = ressults[0]['itineraries']
-
         list_segments = []
-
         for flight_segment in itineraries:
-
             segment = flight_segment[0]
-
             segment = SellItinerary(
                 segment["board_airport"],
                 segment["off_airport"],
@@ -98,26 +75,15 @@ def test():
             )
 
             list_segments.append(segment)
-
-        result_sell = client.sell_from_recommandation(
-            list_segments
-        )
-
+        result_sell = client.sell_from_recommandation(list_segments)
         result_sell, session_info = (result_sell.payload, result_sell.session_info)
-
         if session_info.session_ended:
-
             log.error("Session is ended after sell from recommendation")
-
             return
-
         log.info("End of Sell From Recommandation ******************************************************")
-
         log.info("Begin Call of Add Passenger Info ****************************************************")
-
         message_id = session_info.message_id  # is the message_id to use for the all others actions
-
-        traveller_infos = [TravellerInfo(1, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
+        traveller_infos = [TravellerInfo(1, "Samba", "Dianko", "Thiam", "03121990", "ADT"),
                            TravellerInfo(2, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
 
         reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
@@ -127,7 +93,6 @@ def test():
         passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
 
         if session_info.session_ended:
-
             log.error("Session is ended after creat pnr")
 
             return
@@ -152,8 +117,8 @@ def test():
 
         log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
 
-        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
-        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIOP-BALLA/P1", message_id)
+        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIOP-BALLA/P2", message_id)
 
         log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
 
@@ -208,7 +173,8 @@ def test():
 
         log.info("End of ticketing **********************************************************************")
 
-        log.info("Begin Place PNR in the Queue ***************************************************************************")
+        log.info(
+            "Begin Place PNR in the Queue ***************************************************************************")
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_ticket.py
index 306a8a7..62772a7 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_ticket.py
@@ -4,14 +4,16 @@
 
 import os
 from pygds.amadeus.client import AmadeusClient
-from pygds.amadeus.errors import ClientError, ServerError
+# from pygds.amadeus.errors import ClientError, ServerError
 # from pygds.core.payment import FormOfPayment, CreditCard
-from pygds.core.payment import CheckPayment, CreditCard
+from pygds.core.payment import CreditCard
 from pygds.core.price import PriceRequest  # , Fare
 # from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
 from pygds.env_settings import get_setting
 from pygds import log_handler
-from pygds.core.types import TravellerInfo, ReservationInfo
+
+
+# from pygds.core.types import TravellerInfo, ReservationInfo
 
 
 def test():
@@ -31,76 +33,76 @@ def test():
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     # import web_pdb; web_pdb.set_trace()
-    try:
-        message_id = None
-        log.info("1. Getting Reservation")
-        res_reservation = client.get_reservation(pnr, message_id, False)
-        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
-        log.info(session_info)
-        log.info(res_reservation)
-        if session_info.session_ended is True:
-            log.error("The session is ended when retrieving PNR")
-            return
+    # try:
+    message_id = None
+    log.info("1. Getting Reservation")
+    res_reservation = client.get_reservation(pnr, message_id, False)
+    session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+    log.info(session_info)
+    log.info(res_reservation)
+    if session_info.session_ended is True:
+        log.error("The session is ended when retrieving PNR")
+        return
 
-        company_id = res_reservation["pnr_header"].company_id
-        log.info("2. Pricing PNR")
-        message_id = session_info.message_id
-        passengers = [p.name_id for p in res_reservation["passengers"]]
-        segments = [s.segment_reference for s in res_reservation["itineraries"]]
-        price_request = PriceRequest(passengers, segments, "PUB")
-        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
-        session_info, res_price = (res_price.session_info, res_price.payload)
-        log.info(session_info)
-        log.info(res_price)
-        if session_info.session_ended is True:
-            log.error("The session is ended when pricing PNR")
-            return
-        if len(res_price) == 0:
-            log.error("No price found")
-            return
+    company_id = res_reservation["pnr_header"].company_id
+    log.info("2. Pricing PNR")
+    message_id = session_info.message_id
+    passengers = [p.name_id for p in res_reservation["passengers"]]
+    segments = [s.segment_reference for s in res_reservation["itineraries"]]
+    price_request = PriceRequest(passengers, segments, "PUB")
+    res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+    session_info, res_price = (res_price.session_info, res_price.payload)
+    log.info(session_info)
+    log.info(res_price)
+    if session_info.session_ended is True:
+        log.error("The session is ended when pricing PNR")
+        return
+    if len(res_price) == 0:
+        log.error("No price found")
+        return
 
-        log.info("3. Creating TST")
-        tst = res_price[0].fare_reference
-        message_id = session_info.message_id
-        res_store_price = client.ticket_create_tst_from_price(message_id, tst)
-        session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
-        log.info(session_info)
-        log.info(res_store_price)
-        tst_refs = [tst.tst_reference for tst in res_store_price]
-        if session_info.session_ended is True:
-            log.error("The session is ended when storing TST")
-            return
+    log.info("3. Creating TST")
+    tst = res_price[0].fare_reference
+    message_id = session_info.message_id
+    res_store_price = client.ticket_create_tst_from_price(message_id, tst)
+    session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
+    log.info(session_info)
+    log.info(res_store_price)
+    tst_refs = [tst.tst_reference for tst in res_store_price]
+    if session_info.session_ended is True:
+        log.error("The session is ended when storing TST")
+        return
 
-        log.info("4. Add form of payment")
-        message_id = session_info.message_id
-        # fop = CheckPayment("CHEQUE", "MOO")
-        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-        res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
-        # session_info, res_fop = (res_fop.session_info, res_fop.payload)
-        # log.info(session_info)
-        log.info(res_fop)
-        if session_info.session_ended is True:
-            log.error("The session is ended when adding Form")
-            return
+    log.info("4. Add form of payment")
+    message_id = session_info.message_id
+    # fop = CheckPayment("CHEQUE", "MOO")
+    fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+    res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+    # session_info, res_fop = (res_fop.session_info, res_fop.payload)
+    # log.info(session_info)
+    log.info(res_fop)
+    if session_info.session_ended is True:
+        log.error("The session is ended when adding Form")
+        return
 
-        log.info("5. Save")
-        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
-        session_info, res_save = (res_save.session_info, res_save.payload)
-        log.debug(session_info)
-        log.debug(res_save)
-        if session_info.session_ended is True:
-            log.error("The session is ended when saving PNR")
-            return
+    log.info("5. Save")
+    res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+    session_info, res_save = (res_save.session_info, res_save.payload)
+    log.debug(session_info)
+    log.debug(res_save)
+    if session_info.session_ended is True:
+        log.error("The session is ended when saving PNR")
+        return
 
-        log.info("6. Ticket")
-        message_id = session_info.message_id
-        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
-        session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
-        log.info(session_info)
-        log.info(res_ticket)
-        if session_info.session_ended is True:
-            log.error("The session is ended when ticketing")
-            return
+    log.info("6. Ticket")
+    message_id = session_info.message_id
+    res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+    session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+    log.info(session_info)
+    log.info(res_ticket)
+    if session_info.session_ended is True:
+        log.error("The session is ended when ticketing")
+        return
 
         # res_reservation = client.get_reservation(pnr, message_id, False)
         # cancel_response = client.cancel_pnr(message_id, False)
@@ -108,14 +110,14 @@ def test():
         # log.info(cancel_response)
         # if session_info.session_ended is False:
         #     client.end_session(message_id)
-        if session_info.session_ended is False:
-            client.end_session(message_id)
-    except ClientError as ce:
-        log.error(f"client_error: {ce}")
-        log.error(f"session: {ce.session_info}")
-    except ServerError as se:
-        log.error(f"server_error: {se}")
-        log.error(f"session: {se.session_info}")
+    # elif sesion_info.session_ended is False:
+    #     client.end_session(message_id)
+    # except ClientError as ce:
+    #     log.error(f"client_error: {ce}")
+    # log.error(f"session: {ce.session_info}")
+    # except ServerError as se:
+    #     log.error(f"server_error: {se}")
+    #     log.error(f"session: {se.session_info}")
 
 
 if __name__ == "__main__":
-- 
2.17.1


From c86223775cdac71b877f700808f0c9204e1dda74 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 28 Oct 2019 19:47:27 +0000
Subject: [PATCH 24/46] fix on Amadeus create Tst response extractor.

---
 pygds/amadeus/xml_parsers/response_extractor.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 9d8ff0b..ec0a079 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -449,7 +449,7 @@ class CreateTstResponseExtractor(BaseResponseExtractor):
         pnr = from_json_safe(payload, "pnrLocatorData", "reservationInformation", "controlNumber")
         tst_datas = from_json_safe(payload, "tstList")
         tst_info = []
-        for tst_data in tst_datas:
+        for tst_data in ensure_list(tst_datas):
             tst_ref_data = from_json_safe(tst_data, "tstReference")
             tst_ref = None
             if from_json_safe(tst_ref_data, "referenceType") == "TST":
-- 
2.17.1


From 0e436972183c0c36d3b74b674f47dab50e78d2f6 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Mon, 28 Oct 2019 19:49:06 +0000
Subject: [PATCH 25/46] file logger on Amadeus client for Certification
 process.

---
 pygds/amadeus/client.py   |  4 ++++
 pygds/core/file_logger.py | 23 +++++++++++++++++++++++
 2 files changed, 27 insertions(+)
 create mode 100644 pygds/core/file_logger.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 210e9ca..1597726 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -1,6 +1,7 @@
 # coding: utf-8
 from typing import List
 from pygds.amadeus.xml_parsers.retrive_pnr import GetPnrResponseExtractor
+from pygds.core.file_logger import FileLogger
 from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary
@@ -30,6 +31,7 @@ class AmadeusClient(BaseClient):
     def __init__(self, endpoint: str, username: str, password: str, office_id: str, wsap: str, debug: bool = False):
         super().__init__(endpoint, username, password, office_id, debug)
         self.xml_builder: AmadeusXMLBuilder = AmadeusXMLBuilder(endpoint, username, password, office_id, wsap)
+        self.file_logger = FileLogger()
 
     def __request_wrapper(self, method_name: str, request_data: str, soap_action: str):
         """
@@ -47,7 +49,9 @@ class AmadeusClient(BaseClient):
         status = response.status_code
         if self.is_debugging:
             self.log.debug(request_data)
+            self.file_logger.log_data(request_data, f"{method_name}_request.xml", False, True)
             self.log.debug(response.content)
+            self.file_logger.log_data(response.content, f"{method_name}_response.xml", True, False)
             self.log.debug(f"{method_name} status: {status}")
         if status == 500:
             error = ErrorExtractor(response.content).extract()
diff --git a/pygds/core/file_logger.py b/pygds/core/file_logger.py
new file mode 100644
index 0000000..7f4565f
--- /dev/null
+++ b/pygds/core/file_logger.py
@@ -0,0 +1,23 @@
+import logging
+import os
+
+log = logging.getLogger(__file__)
+
+
+class FileLogger:
+
+    def __init__(self):
+        self.directory = os.path.join(os.getcwd(), "out", "certif")
+        if os.path.exists(self.directory) is False:
+            os.mkdir(self.directory)
+        self.counter = 0
+
+    def log_data(self, data, name, binary: bool = False, increment: bool = False):
+        if increment is True:
+            self.counter += 1
+        file_path = os.path.join(self.directory, f"{self.counter}-{name}")
+        print(f"type of data: {type(data)}")
+        with open(file_path, f"w{'b' if binary else 't'}") as file:
+            file.write(data)
+            file.close()
+        log.info(f"data succesfully logged to {file_path}")
-- 
2.17.1


From 3f5ebebe2a9c3819080a0e3024aecae166edb688 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Mon, 28 Oct 2019 20:11:42 +0000
Subject: [PATCH 26/46] end of flow

---
 fop.xml                                       |  14 +-
 pygds/amadeus/client.py                       |   6 +-
 .../amadeus/xml_parsers/response_extractor.py |  51 +++
 pygds/amadeus/xmlbuilders/sub_parts.py        |  14 +-
 pygds/core/types.py                           |   2 +-
 pygds/tests/amadeus/queue.xml                 | 291 +++++++++++++++++-
 pygds/tests/amadeus/test_low_fare_search.py   |  30 +-
 7 files changed, 371 insertions(+), 37 deletions(-)

diff --git a/fop.xml b/fop.xml
index 2fbf43d..697cf86 100644
--- a/fop.xml
+++ b/fop.xml
@@ -8,12 +8,12 @@ b'<?xml version="1.0" encoding="UTF-8"?>
             <wsa:Address>https://nodeD1.test.webservices.amadeus.com/1ASIWCTSCSO</wsa:Address>
         </wsa:From>
         <wsa:Action>http://webservices.amadeus.com/TFOPCQ_15_4_1A</wsa:Action>
-        <wsa:MessageID>urn:uuid:c775b6ea-6af2-9754-c50a-0324451d2557</wsa:MessageID>
-        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">3c394dc9-dc3a-4b96-8547-b0fbefa674ab</wsa:RelatesTo>
+        <wsa:MessageID>urn:uuid:144ec883-36aa-ab04-3109-8ece320552b8</wsa:MessageID>
+        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">45234ddc-bee9-4cc6-b1dd-84bc341be5ae</wsa:RelatesTo>
         <awsse:Session TransactionStatusCode="InSeries">
-            <awsse:SessionId>00P8I3BXVY</awsse:SessionId>
-            <awsse:SequenceNumber>7</awsse:SequenceNumber>
-            <awsse:SecurityToken>1Y6PLA1RNSBQ239XJF10CSQ7I4</awsse:SecurityToken>
+            <awsse:SessionId>01G48BPWL6</awsse:SessionId>
+            <awsse:SequenceNumber>3</awsse:SequenceNumber>
+            <awsse:SecurityToken>BJU04HV0E8VRIMMHAH5RA7OE</awsse:SecurityToken>
         </awsse:Session>
     </soapenv:Header>
     <soapenv:Body>
@@ -56,7 +56,7 @@ b'<?xml version="1.0" encoding="UTF-8"?>
                 <fpElementError>
                     <errorOrWarningCodeDetails>
                         <errorDetails>
-                            <errorCode>3671</errorCode>
+                            <errorCode>3323</errorCode>
                         </errorDetails>
                     </errorOrWarningCodeDetails>
                     <errorWarningDescription>
@@ -65,7 +65,7 @@ b'<?xml version="1.0" encoding="UTF-8"?>
                             <source>M</source>
                             <encoding>1</encoding>
                         </freeTextDetails>
-                        <freeText>FARE ELEMENT ALREADY EXISTS FOR PASSENGER/SEGMENT</freeText>
+                        <freeText>NEED TST FOR SPECIFIED SEGMENTS</freeText>
                     </errorWarningDescription>
                 </fpElementError>
                 <mopDescription>
diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index cd39647..ef232da 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -9,7 +9,7 @@ from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
-    IssueTicketResponseExtractor, CancelPnrExtractor, QueueExtractor
+    IssueTicketResponseExtractor, CancelPnrExtractor, QueueExtractor, InformativePricingWithoutPnrExtractor
 from pygds.core.payment import FormOfPayment
 from .errors import ClientError, ServerError
 from .xmlbuilders.builder import AmadeusXMLBuilder
@@ -168,8 +168,8 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.fare_informative_price_without_pnr(numbering, itineraries)
         response_data = self.__request_wrapper("fare_informative_price_without_pnr", request_data,
                                                'http://webservices.amadeus.com/TIPNRQ_18_1_1A')
-        extractor = PriceSearchExtractor(response_data)
-        return extractor.extract()
+
+        return InformativePricingWithoutPnrExtractor(response_data).extract()
 
     def fare_check_rules(self, message_id, line_number):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index e488f51..8227bfb 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -510,3 +510,54 @@ class QueueExtractor(BaseResponseExtractor):
         payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "Queue_PlacePNRReply")
         pnr = from_json_safe(payload, "recordLocator", "reservation", "controlNumber")
         return pnr
+
+
+class InformativePricingWithoutPnrExtractor(BaseResponseExtractor):
+    def __init__(self, xml_content):
+        super().__init__(xml_content, True, True, "Fare_InformativePricingWithoutPNRReply")
+
+    def _extract(self):
+        payload = from_xml(
+            self.xml_content, "soapenv:Envelope", "soapenv:Body", "Fare_InformativePricingWithoutPNRReply"
+        )
+        conversion_rate_details = from_json_safe(
+            payload, "mainGroup", "convertionRate", "conversionRateDetails"
+        )
+        indicators = from_json_safe(
+            payload, "mainGroup", "generalIndicatorsGroup", "generalIndicators", "priceTicketDetails", "indicators"
+        )
+
+        number_of_pax = from_json_safe(
+            payload, "mainGroup", "pricingGroupLevelGroup", "numberOfPax"
+        )
+
+        pricing_indicators = from_json_safe(
+            payload, "mainGroup", "pricingGroupLevelGroup", "fareInfoGroup", "pricingIndicators"
+        )
+
+        fare_amount = from_json_safe(
+            payload, "mainGroup", "pricingGroupLevelGroup", "fareInfoGroup", "fareAmount"
+        )
+
+        segment_information = from_json_safe(
+            payload, "mainGroup", "pricingGroupLevelGroup", "fareInfoGroup", "segmentLevelGroup", "segmentInformation"
+        )
+
+        segment_information = from_json_safe(
+            payload, "mainGroup", "pricingGroupLevelGroup", "fareInfoGroup", "fareComponentDetailsGroup"
+        )
+
+        data = {
+            "conversion_rate_details": conversion_rate_details,
+            "indicators": indicators,
+            "number_of_pax": number_of_pax,
+            "pricing_indicators": pricing_indicators,
+            "fare_amount": fare_amount,
+            "segment_information": segment_information,
+            "number_of_pax": number_of_pax,
+            "pricing_indicators": pricing_indicators,
+            "fare_amount": fare_amount,
+            "segment_information": segment_information
+        }
+
+        return data
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index 133418d..1b03639 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -344,21 +344,20 @@ def _fare_informative_price_segment(segment: FlightSegment, itinerary_no: int, s
     return f"""
     <segmentInformation>
        <flightDate>
-            <departureDate>{segment.departure.date}</departureDate>
-            <departureTime>{segment.departure.time}</departureTime>
+            <departureDate>{segment.departure_date_time}</departureDate>
         </flightDate>
         <boardPointDetails>
-            <trueLocationId>{segment.departure.airport}</trueLocationId>
+            <trueLocationId>{segment.departure_airport}</trueLocationId>
         </boardPointDetails>
         <offpointDetails>
-            <trueLocationId>{segment.arrival.airport}</trueLocationId>
+            <trueLocationId>{segment.arrival_airpot}</trueLocationId>
         </offpointDetails>
         <companyDetails>
-            <marketingCompany>{segment.airline}</marketingCompany>
+            <marketingCompany>{segment.marketing}</marketingCompany>
         </companyDetails>
         <flightIdentification>
-            <flightNumber>{segment.flightNumber}</flightNumber>
-            <bookingClass>{segment.classOfService}</bookingClass>
+            <flightNumber>{segment.flight_number}</flightNumber>
+            <bookingClass>{segment.class_of_service}</bookingClass>
         </flightIdentification>
         <flightTypeDetails>
             <flightIndicator>{itinerary_no}</flightIndicator>
@@ -689,4 +688,3 @@ def fop_sequence_number(sequence_number: str):
         </sequenceDetails>
     </fopSequenceNumber>
     """
-
diff --git a/pygds/core/types.py b/pygds/core/types.py
index ff548f7..0013cc9 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -169,7 +169,7 @@ class Itinerary(BasicDataObject):
 
     def __init__(self, itinerary_type: str = None, elapsed_time: str = None):
 
-        self.segments: List[FlightSegment] = []
+        self.segments = []
         self.itinerary_type = itinerary_type
         self.elapsed_time = elapsed_time
 
diff --git a/pygds/tests/amadeus/queue.xml b/pygds/tests/amadeus/queue.xml
index adc0508..adb9c74 100644
--- a/pygds/tests/amadeus/queue.xml
+++ b/pygds/tests/amadeus/queue.xml
@@ -1,4 +1,4 @@
-b'<?xml version="1.0" encoding="UTF-8"?>
+<?xml version="1.0" encoding="UTF-8"?>
 <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
     xmlns:awsse="http://xml.amadeus.com/2010/06/Session_v3" 
     xmlns:wsa="http://www.w3.org/2005/08/addressing">
@@ -7,22 +7,285 @@ b'<?xml version="1.0" encoding="UTF-8"?>
         <wsa:From>
             <wsa:Address>https://nodeD1.test.webservices.amadeus.com/1ASIWCTSCSO</wsa:Address>
         </wsa:From>
-        <wsa:Action>http://webservices.amadeus.com/QUQPCQ_03_1_1A</wsa:Action>
-        <wsa:MessageID>urn:uuid:34406251-f155-9c24-6181-ca5206ab79d7</wsa:MessageID>
-        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">6cc29bdc-b43e-4911-a380-d289d6fcf09b</wsa:RelatesTo>
+        <wsa:Action>http://webservices.amadeus.com/TIPNRQ_18_1_1A</wsa:Action>
+        <wsa:MessageID>urn:uuid:af710175-67d8-ac44-e5f7-76b3a1bca155</wsa:MessageID>
+        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">fc569b2d-e302-4c4c-84f3-786310a0194d</wsa:RelatesTo>
         <awsse:Session TransactionStatusCode="InSeries">
-            <awsse:SessionId>00P8ZULZGN</awsse:SessionId>
-            <awsse:SequenceNumber>10</awsse:SequenceNumber>
-            <awsse:SecurityToken>3ULK1SBCO89G92P7EZ4QMPSZ07</awsse:SecurityToken>
+            <awsse:SessionId>01GA5F25YQ</awsse:SessionId>
+            <awsse:SequenceNumber>1</awsse:SequenceNumber>
+            <awsse:SecurityToken>3O5S2T0M5L98M301CGKDYISO53</awsse:SecurityToken>
         </awsse:Session>
     </soapenv:Header>
     <soapenv:Body>
-        <Queue_PlacePNRReply xmlns="http://xml.amadeus.com/QUQPCR_03_1_1A">
-            <recordLocator>
-                <reservation>
-                    <controlNumber>MBJGP5</controlNumber>
-                </reservation>
-            </recordLocator>
-        </Queue_PlacePNRReply>
+        <Fare_InformativePricingWithoutPNRReply xmlns="http://xml.amadeus.com/TIPNRR_18_1_1A">
+            <messageDetails>
+                <messageFunctionDetails>
+                    <businessFunction>1</businessFunction>
+                    <messageFunction>741</messageFunction>
+                    <responsibleAgency>1A</responsibleAgency>
+                </messageFunctionDetails>
+                <responseType>A</responseType>
+            </messageDetails>
+            <mainGroup>
+                <dummySegment></dummySegment>
+                <convertionRate>
+                    <conversionRateDetails>
+                        <rateType>USR</rateType>
+                        <pricingAmount>1.000000</pricingAmount>
+                        <dutyTaxFeeType>US</dutyTaxFeeType>
+                    </conversionRateDetails>
+                </convertionRate>
+                <generalIndicatorsGroup>
+                    <generalIndicators>
+                        <priceTicketDetails>
+                            <indicators>I</indicators>
+                        </priceTicketDetails>
+                    </generalIndicators>
+                </generalIndicatorsGroup>
+                <pricingGroupLevelGroup>
+                    <numberOfPax>
+                        <segmentControlDetails>
+                            <quantity>1</quantity>
+                            <numberOfUnits>1</numberOfUnits>
+                        </segmentControlDetails>
+                    </numberOfPax>
+                    <passengersID>
+                        <travellerDetails>
+                            <measurementValue>1</measurementValue>
+                        </travellerDetails>
+                    </passengersID>
+                    <fareInfoGroup>
+                        <emptySegment></emptySegment>
+                        <pricingIndicators>
+                            <priceTicketDetails>
+                                <indicators>717</indicators>
+                            </priceTicketDetails>
+                            <priceTariffType>I</priceTariffType>
+                            <productDateTimeDetails>
+                                <departureDate>011119</departureDate>
+                                <departureTime>2359</departureTime>
+                            </productDateTimeDetails>
+                            <companyDetails>
+                                <otherCompany>AA</otherCompany>
+                            </companyDetails>
+                        </pricingIndicators>
+                        <fareAmount>
+                            <monetaryDetails>
+                                <typeQualifier>B</typeQualifier>
+                                <amount>3229.00</amount>
+                                <currency>USD</currency>
+                            </monetaryDetails>
+                            <otherMonetaryDetails>
+                                <typeQualifier>712</typeQualifier>
+                                <amount>3432.70</amount>
+                                <currency>USD</currency>
+                            </otherMonetaryDetails>
+                        </fareAmount>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>4</textSubjectQualifier>
+                                <informationType>15</informationType>
+                            </freeTextQualification>
+                            <freeText>04NOV19CHI AA PAR3229.00NUC3229.00END ROE1.000000</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>10</informationType>
+                            </freeTextQualification>
+                            <freeText>BG:AA</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A49</informationType>
+                            </freeTextQualification>
+                            <freeText> - SEE ADV PURCHASE</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>FARE FAMILIES:    (ENTER FQFn FOR DETAILS, FXY FOR UPSELL)</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>FARE FAMILY:FC1:1:MAINFL</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>FARE VALID FOR E TICKET ONLY</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>TICKET STOCK RESTRICTION</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>BG CXR: AA</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>PRICED WITH VALIDATING CARRIER AA - REPRICE IF DIFFERENT VC</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>1</textSubjectQualifier>
+                                <informationType>1A0</informationType>
+                            </freeTextQualification>
+                            <freeText>28OCT19 PER GAF REQUIREMENTS FARE NOT VALID UNTIL TICKETED</freeText>
+                        </textData>
+                        <textData>
+                            <freeTextQualification>
+                                <textSubjectQualifier>3</textSubjectQualifier>
+                                <informationType>710</informationType>
+                            </freeTextQualification>
+                            <freeText>WARNING - CLASS AVAILABILITY MAY NOT BE SUFFICIENT ON CERTAIN FLIGHTS</freeText>
+                        </textData>
+                        <surchargesGroup>
+                            <taxesAmount>
+                                <taxDetails>
+                                    <rate>175.00</rate>
+                                    <countryCode>YR</countryCode>
+                                    <type>VB</type>
+                                </taxDetails>
+                                <taxDetails>
+                                    <rate>18.60</rate>
+                                    <countryCode>US</countryCode>
+                                    <type>AP</type>
+                                </taxDetails>
+                                <taxDetails>
+                                    <rate>5.60</rate>
+                                    <countryCode>AY</countryCode>
+                                    <type>SE</type>
+                                </taxDetails>
+                                <taxDetails>
+                                    <rate>4.50</rate>
+                                    <countryCode>XF</countryCode>
+                                </taxDetails>
+                            </taxesAmount>
+                            <pfcAmount>
+                                <monetaryDetails>
+                                    <typeQualifier>702</typeQualifier>
+                                    <amount>4.50</amount>
+                                    <location>ORD</location>
+                                </monetaryDetails>
+                            </pfcAmount>
+                        </surchargesGroup>
+                        <segmentLevelGroup>
+                            <segmentInformation>
+                                <flightDate>
+                                    <departureDate>041119</departureDate>
+                                </flightDate>
+                                <boardPointDetails>
+                                    <trueLocationId>ORD</trueLocationId>
+                                </boardPointDetails>
+                                <offpointDetails>
+                                    <trueLocationId>CDG</trueLocationId>
+                                </offpointDetails>
+                                <companyDetails>
+                                    <marketingCompany>AA</marketingCompany>
+                                </companyDetails>
+                                <flightIdentification>
+                                    <flightNumber>151</flightNumber>
+                                    <bookingClass>Y</bookingClass>
+                                    <operationalSuffix>X</operationalSuffix>
+                                </flightIdentification>
+                                <itemNumber>1</itemNumber>
+                            </segmentInformation>
+                            <additionalInformation>
+                                <priceTicketDetails>
+                                    <indicators>ANS</indicators>
+                                </priceTicketDetails>
+                            </additionalInformation>
+                            <fareBasis>
+                                <additionalFareDetails>
+                                    <rateClass>Y1N0C9S1</rateClass>
+                                    <secondRateClass>Y</secondRateClass>
+                                </additionalFareDetails>
+                            </fareBasis>
+                            <baggageAllowance>
+                                <baggageDetails>
+                                    <freeAllowance>1</freeAllowance>
+                                    <quantityCode>N</quantityCode>
+                                </baggageDetails>
+                            </baggageAllowance>
+                            <ptcSegment>
+                                <quantityDetails>
+                                    <numberOfUnit>1</numberOfUnit>
+                                    <unitQualifier>ADT</unitQualifier>
+                                </quantityDetails>
+                            </ptcSegment>
+                        </segmentLevelGroup>
+                        <fareComponentDetailsGroup>
+                            <fareComponentID>
+                                <itemNumberDetails>
+                                    <number>1</number>
+                                    <type>FC</type>
+                                </itemNumberDetails>
+                            </fareComponentID>
+                            <marketFareComponent>
+                                <boardPointDetails>
+                                    <trueLocationId>CHI</trueLocationId>
+                                </boardPointDetails>
+                                <offpointDetails>
+                                    <trueLocationId>PAR</trueLocationId>
+                                </offpointDetails>
+                            </marketFareComponent>
+                            <monetaryInformation>
+                                <monetaryDetails>
+                                    <typeQualifier>TFC</typeQualifier>
+                                    <amount>3229.00</amount>
+                                    <currency>NUC</currency>
+                                </monetaryDetails>
+                            </monetaryInformation>
+                            <componentClassInfo>
+                                <fareBasisDetails>
+                                    <rateTariffClass>Y1N0C9S1</rateTariffClass>
+                                </fareBasisDetails>
+                            </componentClassInfo>
+                            <fareQualifiersDetail>
+                                <discountDetails>
+                                    <fareQualifier>BOR</fareQualifier>
+                                </discountDetails>
+                            </fareQualifiersDetail>
+                            <fareFamilyDetails>
+                                <fareFamilyname>MAINFL</fareFamilyname>
+                                <hierarchy>9997</hierarchy>
+                            </fareFamilyDetails>
+                            <fareFamilyOwner>
+                                <companyIdentification>
+                                    <otherCompany>AA</otherCompany>
+                                </companyIdentification>
+                            </fareFamilyOwner>
+                            <couponDetailsGroup>
+                                <productId>
+                                    <referenceDetails>
+                                        <type>ST</type>
+                                        <value>1</value>
+                                    </referenceDetails>
+                                </productId>
+                            </couponDetailsGroup>
+                        </fareComponentDetailsGroup>
+                    </fareInfoGroup>
+                </pricingGroupLevelGroup>
+            </mainGroup>
+        </Fare_InformativePricingWithoutPNRReply>
     </soapenv:Body>
 </soapenv:Envelope>'
\ No newline at end of file
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index e605e64..e2a1842 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -3,7 +3,7 @@
 """
 
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
-from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary, Itinerary, FlightSegment
 from pygds import log_handler
 from pygds.env_settings import get_setting
 
@@ -74,7 +74,6 @@ def test():
         if session_info.session_ended:
             log.error("Session is ended after search")
             return
-
         log.info("End of Low Fare Search ********************************************************************************")
 
         log.info("Begin call of sell from recommandation *************************************************************")
@@ -83,11 +82,13 @@ def test():
 
         list_segments = []
 
+        itinerary = Itinerary()
+
         for flight_segment in itineraries:
 
             segment = flight_segment[0]
 
-            segment = SellItinerary(
+            _segment = SellItinerary(
                 segment["board_airport"],
                 segment["off_airport"],
                 segment["departure_date"],
@@ -96,8 +97,29 @@ def test():
                 segment["book_class"],
                 2
             )
+            list_segments.append(_segment)
+
+            itinerary.addSegment(FlightSegment(departure_date_time=segment["departure_date"],
+                                               arrival_date_time=segment["arrival_date"],
+                                               airline=None,
+                                               arrival_airpot=segment["board_airport"],
+                                               departure_airport=segment["off_airport"],
+                                               flight_number=segment["flight_number"],
+                                               marketing=segment["marketing_company"],
+                                               class_of_service=segment["book_class"]
+                                               ))
+
+        log.info("Begin fare informative pricing without pnr")
+
+        itineraries = [
+            itinerary
+        ]
+
+        result_informative_pricing = client.fare_informative_price_without_pnr(TravellerNumbering(1), itineraries)
+
+        log.info(result_informative_pricing)
 
-            list_segments.append(segment)
+        log.info("End of informative pricing without pnr")
 
         result_sell = client.sell_from_recommandation(
             list_segments
-- 
2.17.1


From 3ca5500c811fa60c84b61156b5996f48418c32db Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Tue, 29 Oct 2019 11:43:30 +0000
Subject: [PATCH 27/46] changes tes_ticket to test_ticket

---
 pygds/amadeus/client.py                       |   6 +-
 pygds/amadeus/xml_parsers/retrive_pnr.py      |   7 -
 pygds/amadeus/xmlbuilders/builder.py          |  57 +++++----
 pygds/core/types.py                           |  13 +-
 pygds/tests/amadeus/test_cancel.py            |   4 -
 .../amadeus/test_flow_low_fare_search.py      |   2 +-
 pygds/tests/amadeus/test_low_fare_search.py   | 120 +++++++++---------
 .../{test_ticket.py => test_price_ticket.py}  |   7 +-
 pygds/tests/amadeus/test_update_passenger.py  |  65 ++++++++++
 ...tes_void_ticket.py => test_void_ticket.py} |   0
 10 files changed, 174 insertions(+), 107 deletions(-)
 rename pygds/tests/amadeus/{test_ticket.py => test_price_ticket.py} (94%)
 create mode 100644 pygds/tests/amadeus/test_update_passenger.py
 rename pygds/tests/amadeus/{tes_void_ticket.py => test_void_ticket.py} (100%)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index e9b3f27..622123b 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -129,14 +129,14 @@ class AmadeusClient(BaseClient):
         self.add_session(response.session_info)
         return response
 
-    def pnr_add_multi_for_pax_info_element(self, message_id, option_code, segment_name, family_name, quantity,
-                                           f_name, pax_type, inf_number, d_of_birth):
+    def pnr_add_multi_for_pax_info_element(self, message_id, ref_number, surname, quantity,
+                                           first_name, pax_type, inf_number, date_of_birth):
         """
             This method modifies the elements of a PNR (passengers, etc.)
         """
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
-                                                                                   message_id, option_code, segment_name, family_name, quantity, f_name, pax_type, inf_number, d_of_birth)
+                                                                                   message_id, ref_number, surname, quantity, first_name, pax_type, inf_number, date_of_birth)
         print(request_data)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 99da6b6..9c1ecf5 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -19,8 +19,6 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
     def _extract(self):
         payload = from_xml(self.xml_content, "soapenv:Envelope", "soapenv:Body", "PNR_Reply")
         self.payload = payload
-        # print("******Test payload ******")
-        # print(payload)
         return {
             'passengers': self._passengers(),
             'itineraries': self._segments(),
@@ -90,7 +88,6 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
                 free_text = from_json_safe(ssr, "freeText")
                 if free_text:
                     check_date_of_birth = re.split("[, /,////?//:; ]+", free_text)  # to transform the caracter chaine in liste_object
-                    # print(check_date_of_birth)
                     if len(check_date_of_birth) >= 2:
                         check_date_of_birth = check_date_of_birth[1]
                         data_date_of_birth = reformat_date(check_date_of_birth, "%d%b%y", "%Y-%m-%d")
@@ -147,8 +144,6 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
             agent_signature = from_json_safe(data, "agentSignature")
             creation_office_id = from_json_safe(data, "creationOfficeId")
             creation_date = from_json_safe(data, "creationDate")
-            print("****** Test Creation DAte ********")
-            print(creation_date)
             creation_time = from_json_safe(data, "creationTime")
             creation_date_time = reformat_date(creation_date + creation_time, "%d%m%y%H%M", "%Y-%m-%dT%H:%M:%S")
             pnr = PnrInfo(dk, agent_signature, creation_office_id, creation_date_time)
@@ -209,7 +204,6 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
                 if segment_name == "FA":
                     long_free_text = from_json_safe(ticket["otherDataFreetext"], "longFreetext")
                     ticketing = TicketingInfo("", "", "", "", "", "", long_free_text, qualifier, number)
-                    # print(ticketing)
                     list_ticket.append(ticketing)
         return list_ticket
 
@@ -218,7 +212,6 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
         sequence = 1
         for data_element in ensure_list(from_json_safe(from_json_safe(self.payload, "dataElementsMaster"), "dataElementsIndiv")):
             data_remarks = from_json_safe(data_element, "miscellaneousRemarks")
-            # print(data_remarks)
             if data_remarks and from_json_safe(data_remarks, "remarks", "type") == "RM":
                 rems = from_json_safe(data_remarks, "remarks")
                 remark_type = from_json_safe(rems, "type")
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index d58a7f2..a756f99 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -727,8 +727,8 @@ class AmadeusXMLBuilder:
        </soapenv:Body>
     </soapenv:Envelope> """
 
-    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, option_code,
-                                                   segment_name, family_name, quantity, f_name, pax_type, inf_number, d_of_birth):
+    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, ref_number,
+                                                   surname, quantity, first_name, pax_type, inf_number, date_of_birth):
 
         return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
@@ -741,30 +741,35 @@ class AmadeusXMLBuilder:
                 {self.generate_header("PNRADD_17_1_1A", message_id, session_id, sequence_number, security_token)}
                 <soapenv:Body>
                     <PNR_AddMultiElements>
-                    <pnrActions>
-                        <optionCode>{option_code}</optionCode>
-                    </pnrActions>
-                    <travellerInfo>
-                        <elementManagementPassenger>
-                            <reference>
-                                <qualifier>PR</qualifier>
-                                <number>1</number>
-                            </reference>
-                            <segmentName>{segment_name}</segmentName>
-                        </elementManagementPassenger>
-                        <passengerData>
-                            <travellerInformation>
-                                <traveller>
-                                    <surname>{family_name}</surname>
-                                    <quantity>{quantity}</quantity>
-                                </traveller>
-                                <passenger>
-                                    <firstName>{f_name}</firstName>
-                                    <type>{pax_type}</type>
-                                    <infantIndicator>{inf_number}</infantIndicator>
-                                </passenger>
-                            </travellerInformation>
-                        </passengerData>
+                        <pnrActions>
+                            <optionCode>0</optionCode>
+                        </pnrActions>
+                        <travellerInfo>
+                            <elementManagementPassenger>
+                                <reference>
+                                    <qualifier>PT</qualifier>
+                                    <number>{ref_number}</number>
+                                </reference>
+                                <segmentName>NM</segmentName>
+                            </elementManagementPassenger>
+                            <passengerData>
+                                <travellerInformation>
+                                    <traveller>
+                                        <surname>{surname}</surname>
+                                        <quantity>{quantity}</quantity>
+                                    </traveller>
+                                    <passenger>
+                                        <firstName>{first_name}</firstName>
+                                        <type>{pax_type}</type>
+                                        <infantIndicator>{inf_number}</infantIndicator>
+                                    </passenger>
+                                </travellerInformation>
+                                <dateOfBirth>
+                                    <dateAndTimeDetails>
+                                        <date>{date_of_birth}</date>
+                                    </dateAndTimeDetails>
+                                </dateOfBirth>
+                            </passengerData>
                         </travellerInfo>
                     </PNR_AddMultiElements>
                 </soapenv:Body>
diff --git a/pygds/core/types.py b/pygds/core/types.py
index b5dff3b..0b896e1 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -675,9 +675,6 @@ class SellItinerary(BasicDataObject):
 
 
 class TravellerInfo(BasicDataObject):
-    def to_data(self):
-        pass
-
     def __init__(self, ref_number, first_name, surname, last_name, date_of_birth, pax_type):
         self.ref_number = ref_number
         self.first_name = first_name
@@ -686,6 +683,16 @@ class TravellerInfo(BasicDataObject):
         self.date_of_birth = date_of_birth
         self.pax_type = pax_type
 
+        def to_data(self):
+            return {
+                "ref_number": self.ref_number,
+                "first_name": self.first_name,
+                "surname": self.surname,
+                "last_name": self.last_name,
+                "date_of_birth": self.date_of_birth,
+                "pax_type": self.pax_type
+            }
+
 
 class TravellerNumbering(BasicDataObject):
     """
diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
index 7108062..ce1d32f 100644
--- a/pygds/tests/amadeus/test_cancel.py
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -5,12 +5,8 @@
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-# from pygds.core.payment import FormOfPayment, CreditCard
-from pygds.core.price import PriceRequest  # , Fare
-# from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
 from pygds.env_settings import get_setting
 from pygds import log_handler
-from pygds.core.types import TravellerInfo, ReservationInfo
 
 
 def test():
diff --git a/pygds/tests/amadeus/test_flow_low_fare_search.py b/pygds/tests/amadeus/test_flow_low_fare_search.py
index 1a53a98..1ada9ef 100644
--- a/pygds/tests/amadeus/test_flow_low_fare_search.py
+++ b/pygds/tests/amadeus/test_flow_low_fare_search.py
@@ -10,7 +10,7 @@ from pygds.env_settings import get_setting
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-from pygds.core.payment import CheckPayment, CreditCard
+from pygds.core.payment import CreditCard
 from pygds.core.price import PriceRequest, Fare
 # from pygds.core.types import SellItinerary
 # from pygds.core.types import SellItinerary, TravellerInfo, TravellerNumbering
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 1c86d56..0c26ec8 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -123,9 +123,7 @@ def test():
         reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
 
         passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
-
         passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
-
         if session_info.session_ended:
 
             log.error("Session is ended after creat pnr")
@@ -134,81 +132,87 @@ def test():
 
         log.info("End of Calling of Add Passenger Information ****************************************")
 
-        log.info("Begin Call of Pricing Segment for some passenger ***********************************")
-        company_id = passenger_info_response["pnr_header"].company_id
+        log.info("begin  of Calling of update Passenger Information ****************************************")
 
-        seg_refs = []
-        pax_refs = []
-        for seg in passenger_info_response["itineraries"]:
-            seg_refs.append(seg.sequence)
-        for pax in passenger_info_response["passengers"]:
-            pax_refs.append(pax.name_id)
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 2, "Diop", 2, "MOUHAMAD", "ADT", 1, "10JUN78")
+        log.debug("update passenger")
+        log.debug(res_updat_pas.payload)
 
-        price_request = PriceRequest(pax_refs, seg_refs)
-        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
-        session_info, res_price = (res_price.session_info, res_price.payload)
+        # log.info("Begin Call of Pricing Segment for some passenger ***********************************")
+        # company_id = passenger_info_response["pnr_header"].company_id
 
-        log.info("End of Callinf of Price PNR *******************************************************")
+        # seg_refs = []
+        # pax_refs = []
+        # for seg in passenger_info_response["itineraries"]:
+        #     seg_refs.append(seg.sequence)
+        # for pax in passenger_info_response["passengers"]:
+        #     pax_refs.append(pax.name_id)
 
-        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
+        # price_request = PriceRequest(pax_refs, seg_refs)
+        # res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        # session_info, res_price = (res_price.session_info, res_price.payload)
 
-        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
-        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+        # log.info("End of Callinf of Price PNR *******************************************************")
 
-        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
+        # log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
 
-        log.info("Begin Creating TST ********************************************************************")
+        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
+        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
 
-        tst = res_price[0].fare_reference
-        message_id = session_info.message_id
-        res_store_price = client.ticket_create_tst_from_price(message_id, tst)
-        session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
+        # log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
 
-        tst_refs = [tst.tst_reference for tst in res_store_price]
-        if session_info.session_ended is True:
-            log.error("The session is ended when storing TST")
-            return
+        # log.info("Begin Creating TST ********************************************************************")
 
-        log.info("End of Create TST *****************************************************************")
+        # tst = res_price[0].fare_reference
+        # message_id = session_info.message_id
+        # res_store_price = client.ticket_create_tst_from_price(message_id, tst)
+        # session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
 
-        log.info("Begin Add Form of Payment *********************************************************")
+        # tst_refs = [tst.tst_reference for tst in res_store_price]
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when storing TST")
+        #     return
 
-        message_id = session_info.message_id
-        # fop = CheckPayment("CHEQUE", "MOO")
-        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-        res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
-        log.info(type(res_fop))
+        # log.info("End of Create TST *****************************************************************")
 
-        if session_info.session_ended is True:
-            log.error("The session is ended when adding Form")
-            return
+        # log.info("Begin Add Form of Payment *********************************************************")
 
-        log.info("End of Add Form of Payment ********************************************************")
+        # message_id = session_info.message_id
+        # # fop = CheckPayment("CHEQUE", "MOO")
+        # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        # res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
+        # log.info(type(res_fop))
 
-        log.info("Begin Save ************************************************************************")
-        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
-        session_info, res_save = (res_save.session_info, res_save.payload)
-        log.debug(session_info)
-        log.debug(res_save)
-        if session_info.session_ended is True:
-            log.error("The session is ended when saving PNR")
-            return
-        log.info("End Sqve ****************************************************************************")
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when adding Form")
+        #     return
 
-        log.info("Begin Ticket ************************************************************************")
+        # log.info("End of Add Form of Payment ********************************************************")
 
-        message_id = session_info.message_id
-        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
-        session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
-        log.info(session_info)
-        log.info(res_ticket)
-        if session_info.session_ended is True:
-            log.error("The session is ended when ticketing")
-            return
+        # log.info("Begin Save ************************************************************************")
+        # res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        # session_info, res_save = (res_save.session_info, res_save.payload)
+        # log.debug(session_info)
+        # log.debug(res_save)
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when saving PNR")
+        #     return
+        # log.info("End Sqve ****************************************************************************")
+
+        # log.info("Begin Ticket ************************************************************************")
+
+        # message_id = session_info.message_id
+        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+        # log.info(session_info)
+        # log.info(res_ticket)
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when ticketing")
+        #     return
 
-        log.info("End of ticketing **********************************************************************")
+        # log.info("End of ticketing **********************************************************************")
 
-        log.info("Begin Place PNR in the Queue ***************************************************************************")
+        # log.info("Begin Place PNR in the Queue ***************************************************************************")
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
diff --git a/pygds/tests/amadeus/test_ticket.py b/pygds/tests/amadeus/test_price_ticket.py
similarity index 94%
rename from pygds/tests/amadeus/test_ticket.py
rename to pygds/tests/amadeus/test_price_ticket.py
index ecd9bfb..c6cf648 100644
--- a/pygds/tests/amadeus/test_ticket.py
+++ b/pygds/tests/amadeus/test_price_ticket.py
@@ -5,13 +5,10 @@
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-# from pygds.core.payment import FormOfPayment, CreditCard
-from pygds.core.payment import CheckPayment, CreditCard
-from pygds.core.price import PriceRequest  # , Fare
-# from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
+from pygds.core.payment import CreditCard
+from pygds.core.price import PriceRequest
 from pygds.env_settings import get_setting
 from pygds import log_handler
-from pygds.core.types import TravellerInfo, ReservationInfo
 
 
 def test():
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
new file mode 100644
index 0000000..57aa8b2
--- /dev/null
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -0,0 +1,65 @@
+"""
+    This is for testing purposes like a suite.
+"""
+from pygds import log_handler
+from pygds.env_settings import get_setting
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+from pygds.core.types import TravellerInfo, ReservationInfo
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    pnr = "LC87DQ"
+    try:
+
+        message_id = None
+        res_reservation = client.get_reservation(pnr, None, False)
+        res_reservation, message_id = res_reservation.payload, res_reservation.session_info.message_id
+        log.debug(" result reservation ")
+        log.info(res_reservation)
+        traveller_infos = [TravellerInfo(1, "Aliou", "Dianko", "Thiam", "03121990", "ADT"),
+                           TravellerInfo(2, "Malick", "Serigne", "Ndiouck", "03121990", "ADT")]
+
+        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
+        passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+        # if session_info.session_ended:
+
+        #     log.error("Session is ended after creat pnr")
+
+        #     return
+
+        log.info("End of Calling Add Passenger Information ****************************************")
+
+        log.info("begin  of Calling update Passenger Information ****************************************")
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 2, "Diop", 2, "MOUHAMAD", "ADT", 1, "10JUN78")
+        log.debug("update passenger")
+        log.debug(res_updat_pas.payload)
+
+        res_updat_pas1 = client.pnr_add_multi_for_pax_info_element(message_id, 1, "Ndiaye", 2, "Ibrahima", "ADT", 1, "10JUN78")
+        log.debug("update passenger")
+        log.debug(res_updat_pas1.payload)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
diff --git a/pygds/tests/amadeus/tes_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
similarity index 100%
rename from pygds/tests/amadeus/tes_void_ticket.py
rename to pygds/tests/amadeus/test_void_ticket.py
-- 
2.17.1


From 15eb2462ce0b4d7455f901799d8c5cb8f946bb23 Mon Sep 17 00:00:00 2001
From: Mouhamad THIAM <mohamed@ctsfares.com>
Date: Tue, 29 Oct 2019 13:07:28 +0000
Subject: [PATCH 28/46] Amadeus testing flow of update passenger.

---
 pygds/amadeus/client.py                      |  1 -
 pygds/tests/amadeus/test_update_passenger.py | 51 ++++++++++----------
 2 files changed, 25 insertions(+), 27 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index b357ea8..7b4a780 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -141,7 +141,6 @@ class AmadeusClient(BaseClient):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
                                                                                    message_id, ref_number, surname, quantity, first_name, pax_type, inf_number, date_of_birth)
-        print(request_data)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
         # print(response_data)
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index 57aa8b2..7a772ef 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -22,37 +22,36 @@ def test():
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
-    pnr = "LC87DQ"
+    pnr = "LTGPDG"
     try:
 
         message_id = None
-        res_reservation = client.get_reservation(pnr, None, False)
-        res_reservation, message_id = res_reservation.payload, res_reservation.session_info.message_id
-        log.debug(" result reservation ")
-        log.info(res_reservation)
-        traveller_infos = [TravellerInfo(1, "Aliou", "Dianko", "Thiam", "03121990", "ADT"),
-                           TravellerInfo(2, "Malick", "Serigne", "Ndiouck", "03121990", "ADT")]
+        log.info("1. Retrieve PNR")
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        res_reservation, session_info = res_reservation.payload, res_reservation.session_info
+        # log.info(res_reservation)
+        # log.info(session_info)
+        if session_info.session_ended is True:
+            log.debug("Session is ended after retrieve PNR")
+            return
+        message_id = session_info.message_id
 
-        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+        log.info("2. Update passenger")
+        passengers = [p.name_id for p in res_reservation["passengers"]]
+        for pr in passengers:
+            log.info(f"begin  of Calling update Passenger Information for passenger {pr} **")
+            res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, pr, f"Diop {pr}", 1, f"MOUHAMAD {pr}", "ADT", 1, "10JUN78")
+            res_updat_pas, session_info = res_updat_pas.payload, res_updat_pas.session_info
+            # log.debug(res_updat_pas)
+            # log.debug(session_info)
+            if session_info.session_ended is True:
+                log.debug(f"Session closed after update passenger {pr}")
+                return
+            message_id = session_info.message_id
 
-        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
-        passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
-        # if session_info.session_ended:
-
-        #     log.error("Session is ended after creat pnr")
-
-        #     return
-
-        log.info("End of Calling Add Passenger Information ****************************************")
-
-        log.info("begin  of Calling update Passenger Information ****************************************")
-        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 2, "Diop", 2, "MOUHAMAD", "ADT", 1, "10JUN78")
-        log.debug("update passenger")
-        log.debug(res_updat_pas.payload)
-
-        res_updat_pas1 = client.pnr_add_multi_for_pax_info_element(message_id, 1, "Ndiaye", 2, "Ibrahima", "ADT", 1, "10JUN78")
-        log.debug("update passenger")
-        log.debug(res_updat_pas1.payload)
+        if session_info.session_ended is False:
+            log.info("3. Close session")
+            client.end_session(message_id)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
-- 
2.17.1


From ff71edc2ed746c066f255eaf6195e1cd197ef4f4 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Tue, 29 Oct 2019 13:16:17 +0000
Subject: [PATCH 29/46] test flow update

---
 pygds/tests/amadeus/test_update_passenger.py | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index 57aa8b2..c409475 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -37,11 +37,10 @@ def test():
 
         passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
         passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
-        # if session_info.session_ended:
+        if session_info.session_ended:
+            log.error("Session is ended after creat pnr")
 
-        #     log.error("Session is ended after creat pnr")
-
-        #     return
+            return
 
         log.info("End of Calling Add Passenger Information ****************************************")
 
-- 
2.17.1


From 03ae67bb20447cd73e03eec553f9d9cb4c44a07a Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Wed, 30 Oct 2019 13:39:47 +0000
Subject: [PATCH 30/46] change pnr update pasenger

---
 pygds/amadeus/client.py                      |  5 +++++
 pygds/tests/amadeus/test_cancel.py           |  4 ++--
 pygds/tests/amadeus/test_update_passenger.py |  4 ++--
 pygds/tests/amadeus/test_void_ticket.py      | 13 ++++++-------
 4 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 40ab193..cd8a442 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -139,6 +139,8 @@ class AmadeusClient(BaseClient):
             This method modifies the elements of a PNR (passengers, etc.)
         """
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if not security_token:
+            raise NoSessionError(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
                                                                                    message_id, ref_number, surname, quantity, first_name, pax_type, inf_number, date_of_birth)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
@@ -151,10 +153,13 @@ class AmadeusClient(BaseClient):
             PNR ticketing process.
         """
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if not security_token:
+            raise NoSessionError(message_id)
         request_data = self.xml_builder.ticket_pnr_builder(message_id, session_id, sequence_number, security_token,
                                                            passenger_reference_type, passenger_reference_value)
         response_data = self.__request_wrapper("ticketing_pnr", request_data,
                                                'http://webservices.amadeus.com/TTKTIQ_15_1_1A')
+        print(response_data)
         final_result = IssueTicketResponseExtractor(response_data).extract()
         self.add_session(final_result.session_info)
         return final_result
diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
index ce1d32f..c4ccc4c 100644
--- a/pygds/tests/amadeus/test_cancel.py
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -21,10 +21,10 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "LCD4TN"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "MMRECS"  # "L6LMQP", LCD4TN, "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index fea6b1b..0b102d0 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -22,7 +22,7 @@ def test():
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-    pnr = "LTGPDG"
+    pnr = "MHYHWH"  # "LTGPDG"
     try:
 
         message_id = None
@@ -40,7 +40,7 @@ def test():
         passengers = [p.name_id for p in res_reservation["passengers"]]
         for pr in passengers:
             log.info(f"begin  of Calling update Passenger Information for passenger {pr} **")
-            res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, pr, f"Diop {pr}", 1, f"MOUHAMAD {pr}", "ADT", 1, "10JUN78")
+            res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, pr, f"Diop {pr}", 1, f"MOUHAMAD {pr}", "ADT", 1, "03121990")
             res_updat_pas, session_info = res_updat_pas.payload, res_updat_pas.session_info
             log.debug(res_updat_pas)
             # log.debug(session_info)
diff --git a/pygds/tests/amadeus/test_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
index 2a4d3cc..0e4dbdd 100644
--- a/pygds/tests/amadeus/test_void_ticket.py
+++ b/pygds/tests/amadeus/test_void_ticket.py
@@ -25,22 +25,21 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "LC87DQ"  # "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "MMSIWM"  # MJNKN6, "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
         res_reservation = client.get_reservation(pnr, message_id, False)
         session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
         log.info(session_info)
-        # log.info(res_reservation)
+        log.info(res_reservation)
         message_id = session_info.message_id
-        res_reservation = client.get_reservation(pnr, message_id, False)
-        void_response = client.void_tickets(message_id, [1721234567890])
-        # session_info, void_response = (void_response.session_info, void_response.payload)
-        log.info(void_response.payload)
+        void_response = client.void_tickets(message_id, [7421982205])
+        session_info, void_response = (void_response.session_info, void_response.payload)
+        log.info(void_response)
         if session_info.session_ended is False:
             client.end_session(message_id)
     except ClientError as ce:
-- 
2.17.1


From 6c4e422fb1810df2dde76de78454f8acfbae6adc Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Wed, 30 Oct 2019 15:46:20 +0000
Subject: [PATCH 31/46] feat/first_certif

---
 fop.xml                                     |  88 +++++----
 pygds/amadeus/client.py                     |  60 +++++--
 pygds/amadeus/xmlbuilders/builder.py        | 186 +++++++++++---------
 pygds/core/payment.py                       |   4 +-
 pygds/tests/amadeus/test_low_fare_search.py |  36 ++--
 5 files changed, 219 insertions(+), 155 deletions(-)

diff --git a/fop.xml b/fop.xml
index 697cf86..9d70472 100644
--- a/fop.xml
+++ b/fop.xml
@@ -8,33 +8,23 @@ b'<?xml version="1.0" encoding="UTF-8"?>
             <wsa:Address>https://nodeD1.test.webservices.amadeus.com/1ASIWCTSCSO</wsa:Address>
         </wsa:From>
         <wsa:Action>http://webservices.amadeus.com/TFOPCQ_15_4_1A</wsa:Action>
-        <wsa:MessageID>urn:uuid:144ec883-36aa-ab04-3109-8ece320552b8</wsa:MessageID>
-        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">45234ddc-bee9-4cc6-b1dd-84bc341be5ae</wsa:RelatesTo>
+        <wsa:MessageID>urn:uuid:a36c06c8-901e-1034-2d85-ce0942885eec</wsa:MessageID>
+        <wsa:RelatesTo RelationshipType="http://www.w3.org/2005/08/addressing/reply">965a5593-da0f-4e5b-a2a2-38e6f239e1c3</wsa:RelatesTo>
         <awsse:Session TransactionStatusCode="InSeries">
-            <awsse:SessionId>01G48BPWL6</awsse:SessionId>
-            <awsse:SequenceNumber>3</awsse:SequenceNumber>
-            <awsse:SecurityToken>BJU04HV0E8VRIMMHAH5RA7OE</awsse:SecurityToken>
+            <awsse:SessionId>01H29LWZEP</awsse:SessionId>
+            <awsse:SequenceNumber>7</awsse:SequenceNumber>
+            <awsse:SecurityToken>3F9RTKNPGJMAV3J8CYX191LMP0</awsse:SecurityToken>
         </awsse:Session>
     </soapenv:Header>
     <soapenv:Body>
         <FOP_CreateFormOfPaymentReply xmlns="http://xml.amadeus.com/TFOPCR_15_4_1A">
-            <transmissionError>
-                <errorOrWarningCodeDetails>
-                    <errorDetails>
-                        <errorCode>25779</errorCode>
-                    </errorDetails>
-                </errorOrWarningCodeDetails>
-                <errorWarningDescription>
-                    <freeTextDetails>
-                        <textSubjectQualifier>3</textSubjectQualifier>
-                        <source>M</source>
-                        <encoding>1</encoding>
-                    </freeTextDetails>
-                    <freeText>ERROR(S) DETECTED AT CREATION TIME</freeText>
-                </errorWarningDescription>
-            </transmissionError>
             <fopDescription>
-                <fopReference></fopReference>
+                <fopReference>
+                    <reference>
+                        <qualifier>FPT</qualifier>
+                        <number>13</number>
+                    </reference>
+                </fopReference>
                 <passengerAssociation>
                     <passengerReference>
                         <type>PAX</type>
@@ -53,21 +43,12 @@ b'<?xml version="1.0" encoding="UTF-8"?>
                         <value>1</value>
                     </referenceDetails>
                 </pnrElementAssociation>
-                <fpElementError>
-                    <errorOrWarningCodeDetails>
-                        <errorDetails>
-                            <errorCode>3323</errorCode>
-                        </errorDetails>
-                    </errorOrWarningCodeDetails>
-                    <errorWarningDescription>
-                        <freeTextDetails>
-                            <textSubjectQualifier>3</textSubjectQualifier>
-                            <source>M</source>
-                            <encoding>1</encoding>
-                        </freeTextDetails>
-                        <freeText>NEED TST FOR SPECIFIED SEGMENTS</freeText>
-                    </errorWarningDescription>
-                </fpElementError>
+                <pnrElementAssociation>
+                    <referenceDetails>
+                        <type>TST</type>
+                        <value>1</value>
+                    </referenceDetails>
+                </pnrElementAssociation>
                 <mopDescription>
                     <fopSequenceNumber>
                         <sequenceDetails>
@@ -105,6 +86,35 @@ b'<?xml version="1.0" encoding="UTF-8"?>
                                 </criteriaDetails>
                             </dataAndSwitchMap>
                         </pnrSupplementaryData>
+                        <pnrSupplementaryData>
+                            <dataAndSwitchMap>
+                                <criteriaSetType>D</criteriaSetType>
+                                <criteriaDetails>
+                                    <attributeType>CCNUM</attributeType>
+                                    <attributeDescription>XXXXXXXXXXXX0004</attributeDescription>
+                                </criteriaDetails>
+                                <criteriaDetails>
+                                    <attributeType>CUR</attributeType>
+                                    <attributeDescription>USD</attributeDescription>
+                                </criteriaDetails>
+                                <criteriaDetails>
+                                    <attributeType>_cvvKey</attributeType>
+                                    <attributeDescription>*CV</attributeDescription>
+                                </criteriaDetails>
+                                <criteriaDetails>
+                                    <attributeType>CCDTE1</attributeType>
+                                    <attributeDescription>0838</attributeDescription>
+                                </criteriaDetails>
+                                <criteriaDetails>
+                                    <attributeType>FOPCODE</attributeType>
+                                    <attributeDescription>CCVI</attributeDescription>
+                                </criteriaDetails>
+                                <criteriaDetails>
+                                    <attributeType>VENDORCODE</attributeType>
+                                    <attributeDescription>VI</attributeDescription>
+                                </criteriaDetails>
+                            </dataAndSwitchMap>
+                        </pnrSupplementaryData>
                     </mopDetails>
                     <paymentModule>
                         <groupUsage>
@@ -132,6 +142,12 @@ b'<?xml version="1.0" encoding="UTF-8"?>
                                         <expiryDate>0838</expiryDate>
                                     </ccInfo>
                                 </creditCardDetails>
+                                <fortknoxIds>
+                                    <referenceDetails>
+                                        <type>NOX</type>
+                                        <value>101652382191764</value>
+                                    </referenceDetails>
+                                </fortknoxIds>
                             </creditCardData>
                         </mopInformation>
                         <dummy></dummy>
diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 4179497..d35e674 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -11,7 +11,7 @@ from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
     IssueTicketResponseExtractor, CancelPnrExtractor, QueueExtractor, InformativePricingWithoutPnrExtractor
-from pygds.core.payment import FormOfPayment
+from pygds.core.payment import FormOfPayment, CreditCard, CheckPayment
 from .errors import ClientError, ServerError
 from .xmlbuilders.builder import AmadeusXMLBuilder
 
@@ -113,10 +113,16 @@ class AmadeusClient(BaseClient):
             raise NoSessionError(message_id)
         request_data = self.xml_builder.add_form_of_payment_builder(
             message_id, session_id, sequence_number, security_token, fop, segment_refs, pax_refs, inf_refs, fop_sequence_number)
-        print(request_data)
-        response_data = self.__request_wrapper("add_form_of_payment", request_data,
-                                               'http://webservices.amadeus.com/TFOPCQ_15_4_1A')
-        return response_data
+        if isinstance(fop, (CreditCard, CheckPayment)):
+            response_data = self.__request_wrapper("add_form_of_payment", request_data,
+                                                   'http://webservices.amadeus.com/TFOPCQ_15_4_1A')
+        else:
+            response_data = self.__request_wrapper("add_form_of_payment", request_data,
+                                                   'http://webservices.amadeus.com/PNRADD_17_1_1A')
+
+        session_info = SessionExtractor(response_data).extract()
+        self.add_session(session_info.session_info)
+        return session_info
 
     def pnr_add_multi_element(self, message_id, option_code, segment_name):
         """
@@ -165,15 +171,26 @@ class AmadeusClient(BaseClient):
         request_data = self.xml_builder.fare_master_pricer_travel_board_search(self.office_id, low_fare_search, currency_conversion, c_qualifier)
         response_data = self.__request_wrapper("fare_master_pricer_travel_board_search", request_data,
                                                'http://webservices.amadeus.com/FMPTBQ_18_1_1A')
-        extractor = PriceSearchExtractor(response_data)
-        return extractor.extract()
+        response_data = PriceSearchExtractor(response_data).extract()
+        self.add_session(response_data.session_info)
+        return response_data
+
+    def fare_informative_price_without_pnr(self, message_id: str, numbering: TravellerNumbering, itineraries: List[Itinerary]):
+
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
 
-    def fare_informative_price_without_pnr(self, numbering: TravellerNumbering, itineraries: List[Itinerary]):
-        request_data = self.xml_builder.fare_informative_price_without_pnr(numbering, itineraries)
+        if security_token is None:
+            raise NoSessionError(message_id)
+
+        request_data = self.xml_builder.fare_informative_price_without_pnr(message_id, session_id, sequence_number,
+                                                                           security_token, numbering, itineraries)
         response_data = self.__request_wrapper("fare_informative_price_without_pnr", request_data,
                                                'http://webservices.amadeus.com/TIPNRQ_18_1_1A')
 
-        return InformativePricingWithoutPnrExtractor(response_data).extract()
+        response_data = InformativePricingWithoutPnrExtractor(response_data).extract()
+        self.add_session(response_data.session_info)
+
+        return response_data
 
     def fare_check_rules(self, message_id, line_number):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
@@ -184,11 +201,20 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/FARQNQ_07_1_1A')
         return response_data
 
-    def sell_from_recommandation(self, itineraries):
-        request_data = self.xml_builder.sell_from_recomendation(itineraries)
+    def sell_from_recommandation(self, message_id: str, itineraries):
+
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+
+        if security_token is None:
+            raise NoSessionError(message_id)
+
+        request_data = self.xml_builder.sell_from_recomendation(message_id, session_id, sequence_number,
+                                                                security_token, itineraries)
         response_data = self.__request_wrapper("sell_from_recommandation", request_data,
                                                'http://webservices.amadeus.com/ITAREQ_05_2_IA')
+
         final_response = SessionExtractor(response_data).extract()
+
         self.add_session(final_response.session_info)
         return final_response
 
@@ -269,7 +295,11 @@ class AmadeusClient(BaseClient):
                                                            security_token, infos)
         response_data = self.__request_wrapper("add_passenger_info", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
-        return GetPnrResponseExtractor(response_data).extract()
+
+        response_data = GetPnrResponseExtractor(response_data).extract()
+        self.add_session(response_data.session_info)
+
+        return response_data
 
     def queue_place_pnr(self, message_id: str, pnr: str, queues: List[str]):
 
@@ -280,7 +310,9 @@ class AmadeusClient(BaseClient):
                                                         queues)
         response_data = self.__request_wrapper("queue_place_pnr", request_data, 'http://webservices.amadeus.com/QUQPCQ_03_1_1A')
 
-        return QueueExtractor(response_data).extract()
+        response_data = QueueExtractor(response_data).extract()
+        self.add_session(response_data.session_info)
+        return response_data
         # return GetPnrResponseExtractor(response_data).extract()
 
     def issue_combined(self, message_id: str, passengers: List[str], segments: List[str], retrieve_pnr: bool):
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 8d14a9f..ebac322 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -5,7 +5,7 @@ from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary
 from pygds.core.request import LowFareSearchRequest
-from pygds.core.payment import FormOfPayment
+from pygds.core.payment import FormOfPayment, CreditCard, ChashPayment
 from pygds.core.security_utils import generate_random_message_id, generate_created, generate_nonce, password_digest
 
 
@@ -195,7 +195,7 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def fare_master_pricer_travel_board_search(self, office_id, low_fare_search: LowFareSearchRequest, currency_conversion=None, c_qualifier="RC", with_stops=True, result_count=250):
+    def fare_master_pricer_travel_board_search(self, office_id, low_fare_search: LowFareSearchRequest, currency_conversion=None, c_qualifier="RC", with_stops=True, result_count=50):
         """
             Search prices for origin/destination and departure/arrival dates
         """
@@ -255,19 +255,13 @@ class AmadeusXMLBuilder:
             </soapenv:Envelope>
         """
 
-    def fare_informative_price_without_pnr(self, numbering: TravellerNumbering, itineraries: List[Itinerary]):
-        message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
-        security = self.new_transaction_chunk(self.office_id, self.username, nonce, digested_password,
-                                              created_date_time)
+    def fare_informative_price_without_pnr(self, message_id, session_id, sequence_number,
+                                           security_token, numbering: TravellerNumbering, itineraries: List[Itinerary]):
+        header = self.generate_header("TIPNRQ_18_1_1A", message_id, session_id, sequence_number, security_token)
+
         return f"""
         <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
-           <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
-            <add:MessageID>{message_id}</add:MessageID>
-                <add:Action>http://webservices.amadeus.com/TIPNRQ_18_1_1A</add:Action>
-                <add:To>{self.endpoint}/{self.wsap}</add:To>
-                {security}
-            <awsse:Session TransactionStatusCode="Start" xmlns:awsse="http://xml.amadeus.com/2010/06/Session_v3"/>
-            </soapenv:Header>
+           {header}
            <soapenv:Body>
               <Fare_InformativePricingWithoutPNR>
                  {sub_parts.fare_informative_price_passengers(numbering)}
@@ -370,10 +364,10 @@ class AmadeusXMLBuilder:
                 </soapenv:Envelope>
                 """
 
-    def sell_from_recomendation(self, itineraries):
-        message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
-        security_part = self.new_transaction_chunk(self.office_id, self.username, nonce, digested_password,
-                                                   created_date_time)
+    def sell_from_recomendation(self, message_id, session_id, sequence_number,
+                                security_token, itineraries):
+
+        header = self.generate_header("ITAREQ_05_2_IA", message_id, session_id, sequence_number, security_token)
 
         itineraries_details = []
         for it in itineraries:
@@ -385,13 +379,7 @@ class AmadeusXMLBuilder:
         algo = 'M1'
         return f"""
         <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
-            <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
-                <add:MessageID>{message_id}</add:MessageID>
-                <add:Action>http://webservices.amadeus.com/ITAREQ_05_2_IA</add:Action>
-                <add:To>{self.endpoint}/{self.wsap}</add:To>
-                {security_part}
-                <awsse:Session TransactionStatusCode="Start" xmlns:awsse="http://xml.amadeus.com/2010/06/Session_v3"/>
-            </soapenv:Header>
+            {header}
             <soapenv:Body>
                 <Air_SellFromRecommendation>
                     <messageActionDetails>
@@ -495,16 +483,6 @@ class AmadeusXMLBuilder:
                                 </ticket>
                             </ticketElement>
                         </dataElementsIndiv>
-                        <dataElementsIndiv>
-                            <elementManagementData>
-                                <segmentName>FP</segmentName>
-                            </elementManagementData>
-                            <formOfPayment>
-                                <fop>
-                                    <identification>CA</identification>
-                                </fop>
-                            </formOfPayment>
-                        </dataElementsIndiv>
                         <dataElementsIndiv>
                             <elementManagementData>
                                 <reference>
@@ -586,62 +564,94 @@ class AmadeusXMLBuilder:
         pax_refs = pax_refs or []
         inf_refs = inf_refs or []
         segment_refs = segment_refs or []
-        return f"""
-    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
-        xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
-        xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
-        xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
-        xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
-       {self.generate_header("TFOPCQ_15_4_1A", message_id, session_id, sequence_number, security_token, False)}
-       <soapenv:Body>
-          <FOP_CreateFormOfPayment>
-             <transactionContext>
-                <transactionDetails>
-                    <code>{form_of_payment}</code>
-                </transactionDetails>
-             </transactionContext>
-             <fopGroup>
-                <fopReference></fopReference>
-                {"".join([sub_parts.fop_passenger("PAX", ref) for ref in pax_refs])}
-                {"".join([sub_parts.fop_passenger("INF", ref) for ref in inf_refs])}
-                {"".join([sub_parts.fop_segment(ref) for ref in segment_refs])}
-                <mopDescription>
-                   {sub_parts.fop_sequence_number(fop_sequence_number) if fop_sequence_number else ""}
-                   <mopDetails>
-                      <fopPNRDetails>
-                         <fopDetails>
-                            <fopCode>{form_of_payment_code}</fopCode>
-                         </fopDetails>
-                      </fopPNRDetails>
-                   </mopDetails>
-                   <paymentModule>
-                      <groupUsage>
-                         <attributeDetails>
-                            <attributeType>{group_usage_attribute_type}</attributeType>
-                         </attributeDetails>
-                      </groupUsage>
-                      <paymentData>
-                         <merchantInformation>
-                            <companyCode>{company_code}</companyCode>
-                         </merchantInformation>
-                      </paymentData>
-                      <mopInformation>
-                         <fopInformation>
+
+        if isinstance(fop, CreditCard):
+            return f"""
+                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+                    xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+                    xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+                    xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
+                    xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
+                {self.generate_header("TFOPCQ_15_4_1A", message_id, session_id, sequence_number, security_token, False)}
+                <soapenv:Body>
+                    <FOP_CreateFormOfPayment>
+                        <transactionContext>
+                            <transactionDetails>
+                                <code>{form_of_payment}</code>
+                            </transactionDetails>
+                        </transactionContext>
+                        <fopGroup>
+                            <fopReference></fopReference>
+                            {"".join([sub_parts.fop_passenger("PAX", ref) for ref in pax_refs])}
+                            {"".join([sub_parts.fop_passenger("INF", ref) for ref in inf_refs])}
+                            {"".join([sub_parts.fop_segment(ref) for ref in segment_refs])}
+                            <mopDescription>
+                            {sub_parts.fop_sequence_number(fop_sequence_number) if fop_sequence_number else ""}
+                            <mopDetails>
+                                <fopPNRDetails>
+                                    <fopDetails>
+                                        <fopCode>{form_of_payment_code}</fopCode>
+                                    </fopDetails>
+                                </fopPNRDetails>
+                            </mopDetails>
+                            <paymentModule>
+                                <groupUsage>
+                                    <attributeDetails>
+                                        <attributeType>{group_usage_attribute_type}</attributeType>
+                                    </attributeDetails>
+                                </groupUsage>
+                                <paymentData>
+                                    <merchantInformation>
+                                        <companyCode>{company_code}</companyCode>
+                                    </merchantInformation>
+                                </paymentData>
+                                <mopInformation>
+                                    <fopInformation>
+                                        <formOfPayment>
+                                        <type>{form_of_payment_type}</type>
+                                        </formOfPayment>
+                                    </fopInformation>
+                                    <dummy/>
+                                    {sub_parts.fop_form_of_payment(fop)}
+                                </mopInformation>
+                                <dummy/>
+                            </paymentModule>
+                            </mopDescription>
+                        </fopGroup>
+                    </FOP_CreateFormOfPayment>
+                </soapenv:Body>
+                </soapenv:Envelope>
+                """
+        else:
+
+            return f"""
+            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+                    xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+                    xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+                    xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
+                    xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
+                {self.generate_header("PNRADD_17_1_1A", message_id, session_id, sequence_number, security_token, False)}
+                <soapenv:Body>
+                <PNR_AddMultiElements>
+                    <pnrActions>
+                        <optionCode>0</optionCode>
+                    </pnrActions>
+                    <dataElementsMaster>
+                        <marker1/>
+                        <dataElementsIndiv>
+                            <elementManagementData>
+                                <segmentName>FP</segmentName>
+                            </elementManagementData>
                             <formOfPayment>
-                               <type>{form_of_payment_type}</type>
+                                <fop>
+                                    <identification>{form_of_payment_type}</identification>
+                                </fop>
                             </formOfPayment>
-                         </fopInformation>
-                         <dummy/>
-                         {sub_parts.fop_form_of_payment(fop)}
-                      </mopInformation>
-                      <dummy/>
-                   </paymentModule>
-                </mopDescription>
-             </fopGroup>
-          </FOP_CreateFormOfPayment>
-       </soapenv:Body>
-       </soapenv:Envelope>
-    """
+                        </dataElementsIndiv>
+                    </dataElementsMaster>
+                </PNR_AddMultiElements>
+                </soapenv:Body>
+                </soapenv:Envelope>"""
 
     def ticket_pnr_builder(self, message_id, session_id, sequence_number, security_token, passenger_reference_type,
                            passenger_reference_value):
diff --git a/pygds/core/payment.py b/pygds/core/payment.py
index 898fe0d..eb49a3c 100644
--- a/pygds/core/payment.py
+++ b/pygds/core/payment.py
@@ -2,6 +2,7 @@ class FormOfPayment:
     """
     A polymorphic class to hold a form of payment
     """
+
     def __init__(self, p_code, p_type, company_code):
         self.p_code = p_code
         self.p_type = p_type
@@ -15,6 +16,7 @@ class CreditCard(FormOfPayment):
     """
     A credit card as form of payment
     """
+
     def __init__(self, company_code, vendor_code, card_number, security_id, approval_code, expiry_date):
         super().__init__("CCVI", "CC", company_code)
         self.vendor_code = vendor_code
@@ -39,4 +41,4 @@ class CqCheckPayment(FormOfPayment):
 
 class ChashPayment(FormOfPayment):
     def __init__(self, p_code: str = None, company_code: str = None):
-        FormOfPayment.__init__(self, p_code, "CA", company_code)
+        super().__init__(p_code, "CA", company_code)
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index e2a1842..45fbece 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -10,7 +10,7 @@ from pygds.env_settings import get_setting
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-from pygds.core.payment import CreditCard
+from pygds.core.payment import CreditCard, ChashPayment
 from pygds.core.price import PriceRequest
 
 queue_number = "1"
@@ -33,7 +33,7 @@ def test():
     log = log_handler.get_logger("test_all")
 
     log.info("Begin calling Client API *********************************************")
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     log.info("End of call Client API ***********************************************")
 
     try:
@@ -53,7 +53,7 @@ def test():
             segments,
             "Y",
             "",
-            TravellerNumbering(1),
+            TravellerNumbering(2),
             "",
             "",
             ["DL",
@@ -74,6 +74,9 @@ def test():
         if session_info.session_ended:
             log.error("Session is ended after search")
             return
+
+        message_id = session_info.message_id
+
         log.info("End of Low Fare Search ********************************************************************************")
 
         log.info("Begin call of sell from recommandation *************************************************************")
@@ -115,14 +118,14 @@ def test():
             itinerary
         ]
 
-        result_informative_pricing = client.fare_informative_price_without_pnr(TravellerNumbering(1), itineraries)
+        result_informative_pricing = client.fare_informative_price_without_pnr(message_id, TravellerNumbering(2), itineraries)
 
         log.info(result_informative_pricing)
 
         log.info("End of informative pricing without pnr")
 
         result_sell = client.sell_from_recommandation(
-            list_segments
+            message_id, list_segments
         )
 
         result_sell, session_info = (result_sell.payload, result_sell.session_info)
@@ -138,10 +141,10 @@ def test():
 
         log.info("Begin Call of Add Passenger Info ****************************************************")
 
-        message_id = session_info.message_id  # is the message_id to use for the all others actions
+        # message_id = session_info.message_id  # is the message_id to use for the all others actions
 
-        traveller_infos = [TravellerInfo(1, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
-                           TravellerInfo(2, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
+        traveller_infos = [TravellerInfo(1, "Amadou", "Diallo", "Diallo", "03121983", "ADT"),
+                           TravellerInfo(2, "Khouna", "Khouna", "Fall", "03121976", "ADT")]
 
         reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
 
@@ -158,6 +161,13 @@ def test():
 
         log.info("End of Calling of Add Passenger Information ****************************************")
 
+        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
+
+        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
+        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
+
+        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
+
         log.info("Begin Call of Pricing Segment for some passenger ***********************************")
 
         company_id = passenger_info_response["pnr_header"].company_id
@@ -182,13 +192,6 @@ def test():
 
         log.info("End of Calling of Price PNR *******************************************************")
 
-        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
-
-        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
-        client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
-
-        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
-
         log.info("Begin Creating TST ********************************************************************")
 
         tst = res_price[0].fare_reference
@@ -208,7 +211,8 @@ def test():
 
         message_id = session_info.message_id
         # fop = CheckPayment("CHEQUE", "MOO")
-        fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        fop = ChashPayment(p_code="CCVI", company_code=company_id)
         res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
         log.info(res_fop)
 
-- 
2.17.1


From 2c2ad61816f0c2a6f2191b7cfe99883c45cbf4c3 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Wed, 30 Oct 2019 16:45:15 +0000
Subject: [PATCH 32/46] merge dev

---
 pygds/amadeus/client.py                  | 11 +++++------
 pygds/tests/amadeus/test_price_ticket.py |  1 -
 2 files changed, 5 insertions(+), 7 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 0208262..92c89be 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -1,4 +1,7 @@
 # coding: utf-8
+from .xmlbuilders.builder import AmadeusXMLBuilder
+from .errors import ClientError, ServerError
+from pygds.core.payment import FormOfPayment, CreditCard, CheckPayment
 from typing import List
 from pygds.amadeus.xml_parsers.retrive_pnr import GetPnrResponseExtractor
 from pygds.core.file_logger import FileLogger
@@ -10,12 +13,8 @@ from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
 from pygds.amadeus.xml_parsers.response_extractor import PriceSearchExtractor, ErrorExtractor, SessionExtractor, \
     CommandReplyExtractor, PricePNRExtractor, CreateTstResponseExtractor, \
-    IssueTicketResponseExtractor, CancelPnrExtractor, QueueExtractor, InformativePricingWithoutPnrExtractor
-from pygds.core.payment import FormOfPayment, CreditCard, CheckPayment
-    IssueTicketResponseExtractor, CancelPnrExtractor, VoidTicketExtractor, UpdatePassengers
-from pygds.core.payment import FormOfPayment
-from .errors import ClientError, ServerError
-from .xmlbuilders.builder import AmadeusXMLBuilder
+    IssueTicketResponseExtractor, CancelPnrExtractor, QueueExtractor, InformativePricingWithoutPnrExtractor, \
+    VoidTicketExtractor, UpdatePassengers
 
 
 class AmadeusClient(BaseClient):
diff --git a/pygds/tests/amadeus/test_price_ticket.py b/pygds/tests/amadeus/test_price_ticket.py
index 7c7e48e..f598969 100644
--- a/pygds/tests/amadeus/test_price_ticket.py
+++ b/pygds/tests/amadeus/test_price_ticket.py
@@ -58,7 +58,6 @@ def test():
         if len(res_price) == 0:
             log.error("No price found")
             return
-
     log.info("3. Creating TST")
     tst = res_price[0].fare_reference
     message_id = session_info.message_id
-- 
2.17.1


From c11b43ab255e54c73686faf3224c0ec782e60e10 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Wed, 30 Oct 2019 16:54:41 +0000
Subject: [PATCH 33/46] merge dev

---
 .../amadeus/xml_parsers/response_extractor.py |  3 -
 pygds/amadeus/xmlbuilders/builder.py          | 91 -------------------
 pygds/tests/amadeus/test_low_fare_search.py   | 69 --------------
 3 files changed, 163 deletions(-)

diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 410c214..0057bce 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -9,12 +9,9 @@ from pygds.core.sessions import SessionInfo
 import logging
 
 from pygds.core.ticket import TicketReply
-<<<<<<< HEAD
 from pygds.core.types import CancelPnrReply
 from pygds.core.form_of_payment import FormOfPayment
-=======
 from pygds.core.types import CancelPnrReply, VoidTicket, UpdatePassenger
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
 
 class BaseResponseExtractor(object):
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index cf795b3..a7469a1 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -5,11 +5,7 @@ from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary
 from pygds.core.request import LowFareSearchRequest
-<<<<<<< HEAD
-from pygds.core.payment import FormOfPayment, CreditCard, ChashPayment
-=======
 from pygds.core.payment import CreditCard
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 from pygds.core.security_utils import generate_random_message_id, generate_created, generate_nonce, password_digest
 
 
@@ -566,7 +562,6 @@ class AmadeusXMLBuilder:
         form_of_payment_code = fop.p_code
         company_code = fop.company_code
         form_of_payment_type = fop.p_type
-<<<<<<< HEAD
         group_usage_attribute_type = "FP"  # "PAY"
         form_of_payment = "FP"  # "DEF
         pax_refs = pax_refs or []
@@ -650,95 +645,16 @@ class AmadeusXMLBuilder:
                             <elementManagementData>
                                 <segmentName>FP</segmentName>
                             </elementManagementData>
-=======
-        vendor_code = fop.vendor_code
-        carte_number = fop.card_number
-        security_id = fop.security_id
-        expiry_date = fop.expiry_date
-        return f"""
-           <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3" xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
-       <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
-       <add:MessageID>{message_id}</add:MessageID>
-       <add:Action>http://webservices.amadeus.com/TFOPCQ_15_4_1A</add:Action>
-       <add:To>{self.endpoint}/{self.wsap}</add:To>
-       {security_part}
-       </soapenv:Header>
-       <soapenv:Body>
-          <FOP_CreateFormOfPayment>
-             <transactionContext>
-                <transactionDetails>
-                <code>{form_of_payment}</code>
-                </transactionDetails>
-             </transactionContext>
-             <fopGroup>
-                <fopReference></fopReference>
-                <passengerAssociation>
-                   <passengerReference>
-                      <type>{passenger_reference_type}</type>
-                      <value>{passenger_reference_value}</value>
-                   </passengerReference>
-                </passengerAssociation>
-                <mopDescription>
-                   <fopSequenceNumber>
-                      <sequenceDetails>
-                         <number>{form_of_payment_sequence_number}</number>
-                      </sequenceDetails>
-                   </fopSequenceNumber>
-                   <mopDetails>
-                      <fopPNRDetails>
-                         <fopDetails>
-                            <fopCode>{form_of_payment_code}</fopCode>
-                         </fopDetails>
-                      </fopPNRDetails>
-                   </mopDetails>
-                   <paymentModule>
-                      <groupUsage>
-                         <attributeDetails>
-                            <attributeType>{group_usage_attribute_type}</attributeType>
-                         </attributeDetails>
-                      </groupUsage>
-                      <paymentData>
-                         <merchantInformation>
-                            <companyCode>{company_code}</companyCode>
-                         </merchantInformation>
-                      </paymentData>
-                      <mopInformation>
-                         <fopInformation>
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
                             <formOfPayment>
                                 <fop>
                                     <identification>{form_of_payment_type}</identification>
                                 </fop>
                             </formOfPayment>
-<<<<<<< HEAD
                         </dataElementsIndiv>
                     </dataElementsMaster>
                 </PNR_AddMultiElements>
                 </soapenv:Body>
                 </soapenv:Envelope>"""
-=======
-                         </fopInformation>
-                         <dummy/>
-                         <creditCardData>
-                            <creditCardDetails>
-                               <ccInfo>
-                                  <vendorCode>{vendor_code}</vendorCode>
-                                  <cardNumber>{carte_number}</cardNumber>
-                                  <securityId>{security_id}</securityId>
-                                  <expiryDate>{expiry_date}</expiryDate>
-                               </ccInfo>
-                            </creditCardDetails>
-                         </creditCardData>
-                      </mopInformation>
-                      <dummy/>
-                   </paymentModule>
-                </mopDescription>
-             </fopGroup>
-          </FOP_CreateFormOfPayment>
-       </soapenv:Body>
-       </soapenv:Envelope>
-    """
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
     def ticket_pnr_builder(self, message_id, session_id, sequence_number, security_token, passenger_reference_type,
                            passenger_reference_value):
@@ -764,19 +680,12 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
     """
 
-<<<<<<< HEAD
     def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code, segment_name):
         # security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
         # <nameInformation>
         #     <qualifier>RF</qualifier>
         #     <name>KOKOU</name>
         # </nameInformation>
-=======
-    def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code,
-                                      segment_name, identification, credit_card_code, account_number, expiry_date,
-                                      currency_code):
-        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
         return f"""
                 <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
     <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 4276b4b..5ea7fa6 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -137,23 +137,15 @@ def test():
 
         # message_id = session_info.message_id  # is the message_id to use for the all others actions
 
-<<<<<<< HEAD
         traveller_infos = [TravellerInfo(1, "Amadou", "Diallo", "Diallo", "03121983", "ADT"),
                            TravellerInfo(2, "Khouna", "Khouna", "Fall", "03121976", "ADT")]
-=======
-        traveller_infos = [TravellerInfo(4, "Mouhamad", "Dianko", "Thiam", "03121990", "ADT"),
-                           TravellerInfo(5, "Saliou", "Serigne", "Ndiouck", "03121990", "ADT")]
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
         reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
 
         passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
         passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
-<<<<<<< HEAD
         log.info(passenger_info_response)
 
-=======
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
         if session_info.session_ended:
             log.error("Session is ended after creat pnr")
 
@@ -192,27 +184,14 @@ def test():
 
         if session_info.session_ended:
 
-<<<<<<< HEAD
             log.error("Session is ended after price pnr")
 
             return
 
         log.info("End of Calling of Price PNR *******************************************************")
-=======
-        log.info("Begin create pnr")
-        pnr = client.create_pnr(message_id)
-        log.info(pnr.payload)
-        # log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
-
-        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
-        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
-
-        # log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
         # log.info("Begin Creating TST ********************************************************************")
 
-<<<<<<< HEAD
         tst = res_price[0].fare_reference
         message_id = session_info.message_id
         res_store_price = client.ticket_create_tst_from_price(message_id, tst)
@@ -223,23 +202,11 @@ def test():
         if session_info.session_ended is True:
             log.error("The session is ended when storing TST")
             return
-=======
-        # tst = res_price[0].fare_reference
-        # message_id = session_info.message_id
-        # res_store_price = client.ticket_create_tst_from_price(message_id, tst)
-        # session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
-
-        # tst_refs = [tst.tst_reference for tst in res_store_price]
-        # if session_info.session_ended is True:
-        #     log.error("The session is ended when storing TST")
-        #     return
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
         # log.info("End of Create TST *****************************************************************")
 
         # log.info("Begin Add Form of Payment *********************************************************")
 
-<<<<<<< HEAD
         message_id = session_info.message_id
         # fop = CheckPayment("CHEQUE", "MOO")
         # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
@@ -248,21 +215,11 @@ def test():
         log.info(res_fop)
 
         # if res_fop.session_info.session_ended is True:
-=======
-        # message_id = session_info.message_id
-        # # fop = CheckPayment("CHEQUE", "MOO")
-        # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-        # res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
-        # log.info(type(res_fop))
-
-        # if session_info.session_ended is True:
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
         #     log.error("The session is ended when adding Form")
         #     return
 
         # log.info("End of Add Form of Payment ********************************************************")
 
-<<<<<<< HEAD
         log.info("Begin Save ************************************************************************")
         res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
         session_info, res_save = (res_save.session_info, res_save.payload)
@@ -273,21 +230,9 @@ def test():
             log.error("The session is ended when saving PNR")
             return
         log.info("End Sqve ****************************************************************************")
-=======
-        # log.info("Begin Save ************************************************************************")
-        # res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
-        # session_info, res_save = (res_save.session_info, res_save.payload)
-        # log.debug(session_info)
-        # log.debug(res_save)
-        # if session_info.session_ended is True:
-        #     log.error("The session is ended when saving PNR")
-        #     return
-        # log.info("End Sqve ****************************************************************************")
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
         # log.info("Begin Ticket ************************************************************************")
 
-<<<<<<< HEAD
         message_id = session_info.message_id
         res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
         session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
@@ -296,20 +241,9 @@ def test():
         if session_info.session_ended is True:
             log.error("The session is ended when ticketing")
             return
-=======
-        # message_id = session_info.message_id
-        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
-        # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
-        # log.info(session_info)
-        # log.info(res_ticket)
-        # if session_info.session_ended is True:
-        #     log.error("The session is ended when ticketing")
-        #     return
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
 
         # log.info("End of ticketing **********************************************************************")
 
-<<<<<<< HEAD
         log.info("Begin Placing PNR in the Queue ********************************************************")
 
         global queue_number
@@ -324,9 +258,6 @@ def test():
             return
 
         client.end_session(message_id)
-=======
-        # log.info("Begin Place PNR in the Queue ***************************************************************************")
->>>>>>> 03ae67bb20447cd73e03eec553f9d9cb4c44a07a
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
-- 
2.17.1


From 13dc6b5878e313cca1942f4e0bf7870830e5048d Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Thu, 31 Oct 2019 17:03:28 +0000
Subject: [PATCH 34/46] 17|Session|No agreement on destination

---
 informative_best.xml                          | 148 ++++++++++++++++++
 pygds/amadeus/client.py                       |  14 +-
 .../amadeus/xml_parsers/response_extractor.py |   3 +-
 pygds/amadeus/xmlbuilders/builder.py          |  40 ++++-
 pygds/amadeus/xmlbuilders/sub_parts.py        | 105 +++++++++++++
 pygds/core/types.py                           |  14 +-
 pygds/tests/amadeus/test_low_fare_search.py   |  63 ++++----
 7 files changed, 350 insertions(+), 37 deletions(-)
 create mode 100644 informative_best.xml

diff --git a/informative_best.xml b/informative_best.xml
new file mode 100644
index 0000000..97e9e34
--- /dev/null
+++ b/informative_best.xml
@@ -0,0 +1,148 @@
+<Fare_InformativeBestPricingWithoutPNR xmlns="http://xml.amadeus.com/TIPNRQ_15_1_1A">
+    <passengersGroup>
+        <segmentRepetitionControl>
+            <segmentControlDetails>
+                <quantity>1</quantity>
+                <numberOfUnits>2</numberOfUnits>
+            </segmentControlDetails>
+        </segmentRepetitionControl>
+        <travellersID>
+            <travellerDetails>
+                <measurementValue>1</measurementValue>
+            </travellerDetails>
+            <travellerDetails>
+                <measurementValue>2</measurementValue>
+            </travellerDetails>
+        </travellersID>
+        <discountPtc>
+            <valueQualifier>ADT</valueQualifier>
+        </discountPtc>
+    </passengersGroup>
+    <passengersGroup>
+        <segmentRepetitionControl>
+            <segmentControlDetails>
+                <quantity>2</quantity>
+                <numberOfUnits>1</numberOfUnits>
+            </segmentControlDetails>
+        </segmentRepetitionControl>
+        <travellersID>
+            <travellerDetails>
+                <measurementValue>1</measurementValue>
+            </travellerDetails>
+        </travellersID>
+        <discountPtc>
+            <valueQualifier>INF</valueQualifier>
+            <fareDetails>
+                <qualifier>766</qualifier>
+            </fareDetails>
+        </discountPtc>
+    </passengersGroup>
+    <passengersGroup>
+        <segmentRepetitionControl>
+            <segmentControlDetails>
+                <quantity>3</quantity>
+                <numberOfUnits>1</numberOfUnits>
+            </segmentControlDetails>
+        </segmentRepetitionControl>
+        <travellersID>
+            <travellerDetails>
+                <measurementValue>3</measurementValue>
+            </travellerDetails>
+        </travellersID>
+        <discountPtc>
+            <valueQualifier>CH</valueQualifier>
+        </discountPtc>
+    </passengersGroup>
+    <segmentGroup>
+        <segmentInformation>
+            <flightDate>
+                <departureDate>031117</departureDate>
+            </flightDate>
+            <boardPointDetails>
+                <trueLocationId>LHR</trueLocationId>
+            </boardPointDetails>
+            <offpointDetails>
+                <trueLocationId>NRT</trueLocationId>
+            </offpointDetails>
+            <companyDetails>
+                <marketingCompany>SU</marketingCompany>
+            </companyDetails>
+            <flightIdentification>
+                <flightNumber>262</flightNumber>
+                <bookingClass>N</bookingClass>
+            </flightIdentification>
+            <flightTypeDetails>
+                <flightIndicator>1</flightIndicator>
+            </flightTypeDetails>
+            <itemNumber>1</itemNumber>
+        </segmentInformation>
+    </segmentGroup>
+    <segmentGroup>
+        <segmentInformation>
+            <flightDate>
+                <departureDate>151117</departureDate>
+            </flightDate>
+            <boardPointDetails>
+                <trueLocationId>NRT</trueLocationId>
+            </boardPointDetails>
+            <offpointDetails>
+                <trueLocationId>SVO</trueLocationId>
+            </offpointDetails>
+            <companyDetails>
+                <marketingCompany>SU</marketingCompany>
+            </companyDetails>
+            <flightIdentification>
+                <flightNumber>261</flightNumber>
+                <bookingClass>N</bookingClass>
+            </flightIdentification>
+            <flightTypeDetails>
+                <flightIndicator>1</flightIndicator>
+            </flightTypeDetails>
+            <itemNumber>2</itemNumber>
+        </segmentInformation>
+    </segmentGroup>
+    <segmentGroup>
+        <segmentInformation>
+            <flightDate>
+                <departureDate>151117</departureDate>
+            </flightDate>
+            <boardPointDetails>
+                <trueLocationId>SVO</trueLocationId>
+            </boardPointDetails>
+            <offpointDetails>
+                <trueLocationId>LHR</trueLocationId>
+            </offpointDetails>
+            <companyDetails>
+                <marketingCompany>SU</marketingCompany>
+            </companyDetails>
+            <flightIdentification>
+                <flightNumber>2584</flightNumber>
+                <bookingClass>N</bookingClass>
+            </flightIdentification>
+            <flightTypeDetails>
+                <flightIndicator>2</flightIndicator>
+            </flightTypeDetails>
+            <itemNumber>3</itemNumber>
+        </segmentInformation>
+    </segmentGroup>
+    <pricingOptionGroup>
+        <pricingOptionKey>
+            <pricingOptionKey>RP</pricingOptionKey>
+        </pricingOptionKey>
+    </pricingOptionGroup>
+    <pricingOptionGroup>
+        <pricingOptionKey>
+            <pricingOptionKey>RU</pricingOptionKey>
+        </pricingOptionKey>
+    </pricingOptionGroup>
+    <pricingOptionGroup>
+        <pricingOptionKey>
+            <pricingOptionKey>VC</pricingOptionKey>
+        </pricingOptionKey>
+        <carrierInformation>
+            <companyIdentification>
+                <otherCompany>SU</otherCompany>
+            </companyIdentification>
+        </carrierInformation>
+    </pricingOptionGroup>
+</Fare_InformativeBestPricingWithoutPNR>
\ No newline at end of file
diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 92c89be..91f617f 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -7,7 +7,7 @@ from pygds.amadeus.xml_parsers.retrive_pnr import GetPnrResponseExtractor
 from pygds.core.file_logger import FileLogger
 from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
-from pygds.core.types import TravellerNumbering, Itinerary
+from pygds.core.types import TravellerNumbering, Itinerary, Recommandation
 from pygds.core.request import LowFareSearchRequest
 from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
@@ -191,7 +191,7 @@ class AmadeusClient(BaseClient):
         response_data = self.__request_wrapper("fare_master_pricer_travel_board_search", request_data,
                                                'http://webservices.amadeus.com/FMPTBQ_18_1_1A')
         response_data = PriceSearchExtractor(response_data).extract()
-        self.add_session(response_data.session_info)
+        # self.add_session(response_data.session_info)
         return response_data
 
     def fare_informative_price_without_pnr(self, message_id: str, numbering: TravellerNumbering, itineraries: List[Itinerary]):
@@ -211,6 +211,16 @@ class AmadeusClient(BaseClient):
 
         return response_data
 
+    def fare_informative_best_pricing_without_pnr(self, recommandation: Recommandation):
+
+        request_data = self.xml_builder.fare_informative_best_price_without_pnr(recommandation)
+        response_data = self.__request_wrapper("fare_informative_best_price_without_pnr", request_data,
+                                               'http://webservices.amadeus.com/TIBNRQ_19_1_1A')
+
+        response_data = InformativePricingWithoutPnrExtractor(response_data).extract()
+
+        return response_data
+
     def fare_check_rules(self, message_id, line_number):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         if security_token is None:
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 0057bce..0419bba 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -183,11 +183,12 @@ class PriceSearchExtractor(BaseResponseExtractor):
                         product_detail = ensure_list(fare_details[idx]["groupOfFares"])[leg]["productInformation"]
                         book_class = product_detail["cabinProduct"]["rbd"]
                         fare_basis = product_detail["fareProductDetail"]["fareBasis"]
+                        pax_ref = ensure_list(ensure_list(rec["paxFareProduct"])[0]["paxReference"])
                         segment = {"fare_basis": fare_basis, "board_airport": board_airport, "off_airport": off_airport,
                                    "flight_number": flight_number, "departure_date": departure_date,
                                    "departure_time": departure_time, "arrival_date": arrival_date,
                                    "arrival_time": arrival_time, "marketing_company": market_company,
-                                   "operator_company": oper_company, "book_class": book_class
+                                   "operator_company": oper_company, "book_class": book_class, "pax_ref": pax_ref
                                    }
                         segments.append(segment)
                     itineraries.append(segments)
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index a7469a1..22a3d02 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -3,7 +3,7 @@ from typing import List
 from pygds.amadeus.xmlbuilders import sub_parts
 from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
-from pygds.core.types import TravellerNumbering, Itinerary
+from pygds.core.types import TravellerNumbering, Itinerary, Recommandation
 from pygds.core.request import LowFareSearchRequest
 from pygds.core.payment import CreditCard
 from pygds.core.security_utils import generate_random_message_id, generate_created, generate_nonce, password_digest
@@ -201,7 +201,7 @@ class AmadeusXMLBuilder:
         """
         message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
         security_part = self.new_transaction_chunk(self.office_id, self.username, nonce, digested_password,
-                                                   created_date_time)
+                                                   created_date_time, True)
         # currency_conversion: str = None
         stop_option = ""
         if not with_stops:
@@ -271,6 +271,42 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
+    def fare_informative_best_price_without_pnr(self, recommandation: Recommandation):
+        message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
+        security_part = self.new_transaction_chunk(self.office_id, self.username, nonce, digested_password,
+                                                   created_date_time, True)
+        header = f"""<soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
+                        <add:MessageID>{message_id}</add:MessageID>
+                        <add:Action>http://webservices.amadeus.com/TIBNRQ_19_1_1A</add:Action>
+                        <add:To>{self.endpoint}/{self.wsap}</add:To>
+                        {security_part}
+                    </soapenv:Header>"""
+
+        passengers_info = sub_parts.fare_informative_best_price_passengers(recommandation.traveller_numbering)
+        segments = sub_parts.fare_informative_best_price_segment(recommandation.segments)
+
+        return f"""
+                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+                    {header}
+                    <soapenv:Body>
+                        <Fare_InformativeBestPricingWithoutPNR>
+                            {passengers_info}
+                            {segments}
+                            <pricingOptionGroup>
+                                <pricingOptionKey>
+                                    <pricingOptionKey>RP</pricingOptionKey>
+                                </pricingOptionKey>
+                            </pricingOptionGroup>
+                            <pricingOptionGroup>
+                                <pricingOptionKey>
+                                    <pricingOptionKey>RU</pricingOptionKey>
+                                </pricingOptionKey>
+                            </pricingOptionGroup>
+                        </Fare_InformativeBestPricingWithoutPNR>
+                    </soapenv:Body>
+                </soapenv:Envelope>   
+        """
+
     def fare_check_rules(self, message_id, session_id, sequence_number,
                          security_token, line_number):
         header = self.generate_header("FARQNQ_07_1_1A", message_id, session_id, sequence_number, security_token)
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index c5ea582..4a893e3 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -7,6 +7,111 @@ from pygds.core.types import TravellerNumbering, Itinerary, FlightSegment
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
 
 
+def fare_informative_best_price_passengers(traveller_numbering):
+
+    ptc_adt = ""
+    quantity = 1
+    if traveller_numbering.adults:
+        id_ptc = ""
+        for i in range(traveller_numbering.adults):
+            id_ptc = id_ptc + "<travellerDetails><measurementValue>" + str(i + 1) + "</measurementValue></travellerDetails>"
+        ptc_adt = f"""
+            <passengersGroup>
+                <segmentRepetitionControl>
+                    <segmentControlDetails>
+                        <quantity>{quantity}</quantity>
+                        <numberOfUnits>{traveller_numbering.adults}</numberOfUnits>
+                    </segmentControlDetails>
+                </segmentRepetitionControl>
+                <travellersID>
+                    {id_ptc}
+                </travellersID>
+                <discountPtc>
+                    <valueQualifier>ADT</valueQualifier>
+                </discountPtc>
+            </passengersGroup>"""
+        quantity += 1
+
+    ptc_children = ""
+    id_children = ""
+    if traveller_numbering.children:
+        for i in range(traveller_numbering.children):
+            id_children = id_children + "<travellerDetails><measurementValue>" + str(i + 1) + "</measurementValue></travellerDetails>"
+        ptc_children = f"""
+            <passengersGroup>
+                <segmentRepetitionControl>
+                    <segmentControlDetails>
+                        <quantity>{quantity}</quantity>
+                        <numberOfUnits>{traveller_numbering.children}</numberOfUnits>
+                    </segmentControlDetails>
+                </segmentRepetitionControl>
+                <travellersID>
+                    {id_children}
+                </travellersID>
+                <discountPtc>
+                    <valueQualifier>ADT</valueQualifier>
+                </discountPtc>
+            </passengersGroup>"""
+        quantity += 1
+
+    ptc_infant = ""
+    id_infants = ""
+    if traveller_numbering.infants:
+        for i in range(traveller_numbering.infants):
+            id_infants = id_infants + "<travellerDetails><measurementValue>" + str(i + 1) + "1</measurementValue></travellerDetails>"
+        ptc_infant = f"""
+            <passengersGroup>
+                <segmentRepetitionControl>
+                    <segmentControlDetails>
+                        <quantity>{quantity}</quantity>
+                        <numberOfUnits>{traveller_numbering.infants}</numberOfUnits>
+                    </segmentControlDetails>
+                </segmentRepetitionControl>
+                <travellersID>
+                    {id_infants}
+                </travellersID>
+                <discountPtc>
+                    <valueQualifier>ADT</valueQualifier>
+                    <fareDetails>
+                        <qualifier>766</qualifier>
+                    </fareDetails>
+                </discountPtc>
+            </passengersGroup>"""
+
+    return ptc_adt + ptc_children + ptc_infant
+
+
+def fare_informative_best_price_segment(segments):
+    content = ""
+    for index, segment in enumerate(segments):
+        content = content + f"""<segmentGroup>
+                            <segmentInformation>
+                                <flightDate>
+                                    <departureDate>{segment.departure_date}</departureDate>
+                                </flightDate>
+                                <boardPointDetails>
+                                    <trueLocationId>{segment.origin}</trueLocationId>
+                                </boardPointDetails>
+                                <offpointDetails>
+                                    <trueLocationId>{segment.destination}</trueLocationId>
+                                </offpointDetails>
+                                <companyDetails>
+                                    <marketingCompany>{segment.company}</marketingCompany>
+                                </companyDetails>
+                                <flightIdentification>
+                                    <flightNumber>{segment.flight_number}</flightNumber>
+                                    <bookingClass>{segment.booking_class}</bookingClass>
+                                </flightIdentification>
+                                <flightTypeDetails>
+                                    <flightIndicator>{segment.flight_indicator+1}</flightIndicator>
+                                </flightTypeDetails>
+                                <itemNumber>{index+1}</itemNumber>
+                            </segmentInformation>
+                        </segmentGroup>"""
+
+    return content
+
+
 def mptbs_itinerary(segment: RequestedSegment):
     # origin = segment.departure.airport if segment.departure.airport is not None else segment.departure.city
     # destination = segment.arrival.airport if segment.arrival.airport is not None else segment.arrival.city
diff --git a/pygds/core/types.py b/pygds/core/types.py
index a085224..5af59cf 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -664,14 +664,20 @@ class Reservation(BasicDataObject):
 
 class SellItinerary(BasicDataObject):
 
-    def __init__(self, origin, destination, departure_date, company, flight_number, booking_class, quantity):
+    def __init__(self, origin, destination, departure_date, company, flight_number, booking_class, quantity, airline=None, arrival_date=None, departure_time=None, arrival_time=None, flight_indicator=None):
+
         self.origin = origin
         self.destination = destination
         self.departure_date = departure_date
+        self.arrival_date = arrival_date
+        self.departure_time = departure_time
+        self.arrival_time = arrival_time
         self.company = company
         self.flight_number = flight_number
         self.booking_class = booking_class
         self.quantity = quantity
+        self.airline = airline
+        self.flight_indicator = flight_indicator
 
 
 class TravellerInfo(BasicDataObject):
@@ -718,6 +724,12 @@ class TravellerNumbering(BasicDataObject):
         return self.adults + self.children
 
 
+class Recommandation:
+    def __init__(self, segments: List[SellItinerary], traveller_numbering: TravellerNumbering):
+        self.segments = segments if segments else []
+        self.traveller_numbering = traveller_numbering
+
+
 class SendCommand(BasicDataObject):
     """
         This is to represent a send command object
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 5ea7fa6..7422f6e 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -3,7 +3,7 @@
 """
 
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
-from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary, Itinerary, FlightSegment
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary, Itinerary, FlightSegment, Recommandation
 from pygds import log_handler
 from pygds.env_settings import get_setting
 
@@ -70,10 +70,6 @@ def test():
         results, session_info = (search_results.payload, search_results.session_info)
         log.info(results)
 
-        if session_info.session_ended:
-            log.error("Session is ended after search")
-            return
-
         message_id = session_info.message_id
 
         log.info("End of Low Fare Search ********************************************************************************")
@@ -84,41 +80,49 @@ def test():
 
         list_segments = []
 
-        itinerary = Itinerary()
+        # itinerary = Itinerary()
 
-        for flight_segment in itineraries:
+        for index, flight_segment in enumerate(itineraries):
             segment = flight_segment[0]
 
+            quantities = 0
+            for ptc in segment["pax_ref"]:
+                quantities += len(ptc["traveller"])
+
             _segment = SellItinerary(
-                segment["board_airport"],
-                segment["off_airport"],
-                segment["departure_date"],
-                segment["marketing_company"],
-                segment["flight_number"],
-                segment["book_class"],
-                2
+                origin=segment["board_airport"],
+                destination=segment["off_airport"],
+                departure_date=segment["departure_date"],
+                company=segment["marketing_company"],
+                flight_number=segment["flight_number"],
+                booking_class=segment["book_class"],
+                quantity=quantities,
+                arrival_date=segment["arrival_date"],
+                flight_indicator=index
             )
             list_segments.append(_segment)
 
-            itinerary.addSegment(FlightSegment(departure_date_time=segment["departure_date"],
-                                               arrival_date_time=segment["arrival_date"],
-                                               airline=None,
-                                               arrival_airpot=segment["board_airport"],
-                                               departure_airport=segment["off_airport"],
-                                               flight_number=segment["flight_number"],
-                                               marketing=segment["marketing_company"],
-                                               class_of_service=segment["book_class"]
-                                               ))
+            # itinerary.addSegment(FlightSegment(departure_date_time=segment["departure_date"],
+            #                                    arrival_date_time=segment["arrival_date"],
+            #                                    airline=None,
+            #                                    arrival_airpot=segment["board_airport"],
+            #                                    departure_airport=segment["off_airport"],
+            #                                    flight_number=segment["flight_number"],
+            #                                    marketing=segment["marketing_company"],
+            #                                    class_of_service=segment["book_class"]
+            #                                    ))
 
         log.info("Begin fare informative pricing without pnr")
 
-        itineraries = [
-            itinerary
-        ]
+        recommandation = Recommandation(list_segments, TravellerNumbering(2))
+
+        # itineraries = [
+        #     itinerary
+        # ]
 
-        result_informative_pricing = client.fare_informative_price_without_pnr(message_id, TravellerNumbering(2), itineraries)
+        result_informative_best_pricing = client.fare_informative_best_pricing_without_pnr(recommandation=recommandation)
 
-        log.info(result_informative_pricing)
+        log.info(result_informative_best_pricing)
 
         log.info("End of informative pricing without pnr")
 
@@ -129,9 +133,6 @@ def test():
         result_sell, session_info = (result_sell.payload, result_sell.session_info)
         log.info(result_sell)
 
-        if session_info.session_ended:
-            log.error("Session is ended after sell from recommendation")
-            return
         log.info("End of Sell From Recommandation ******************************************************")
         log.info("Begin Call of Add Passenger Info ****************************************************")
 
-- 
2.17.1


From e029ebea5a1f1fc3558d1cfa2be76e77f506d714 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Sun, 3 Nov 2019 04:12:43 +0000
Subject: [PATCH 35/46] fixed again

---
 pygds/amadeus/client.py                      |  5 +++--
 pygds/amadeus/xml_parsers/retrive_pnr.py     |  1 +
 pygds/amadeus/xmlbuilders/builder.py         |  4 ++--
 pygds/tests/amadeus/test_cancel.py           |  1 -
 pygds/tests/amadeus/test_update_passenger.py |  2 +-
 pygds/tests/amadeus/test_void_ticket.py      | 21 ++++++++++++++++----
 6 files changed, 24 insertions(+), 10 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index cd8a442..ac8f7d8 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -322,7 +322,7 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         return response_data
 
-    def void_tickets(self, message_id: str, ticket_numbers: List[str]):
+    def void_tickets(self, message_id: str, ticket_numbers: List[str], airline_code: str):
         """
         Cancel documents by ticket numbers
         :param message_id: str -> the message id
@@ -333,9 +333,10 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
-        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers)
+        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code)
         response_data = self.__request_wrapper("void_tickets", request_data,
                                                'http://webservices.amadeus.com/TRCANQ_11_1_1A')
+        print(response_data)
         return VoidTicketExtractor(response_data).extract()
 
     def cancel_pnr(self, message_id: str, close_session: bool = False):
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 9c1ecf5..62143f8 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -203,6 +203,7 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
                     qualifier, number = self._extract_qualifier_number(list_reference)
                 if segment_name == "FA":
                     long_free_text = from_json_safe(ticket["otherDataFreetext"], "longFreetext")
+                    print(long_free_text)
                     ticketing = TicketingInfo("", "", "", "", "", "", long_free_text, qualifier, number)
                     list_ticket.append(ticketing)
         return list_ticket
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index a756f99..5c5f896 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -864,7 +864,7 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str]):
+    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str], airline_code: str):
         message_id = session_info.message_id
         session_id = session_info.session_id
         sequence_number = session_info.sequence_number
@@ -883,7 +883,7 @@ class AmadeusXMLBuilder:
                     {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
                     <stockProviderDetails>
                         <officeSettingsDetails>
-                            <stockProviderCode>6X</stockProviderCode>
+                            <stockProviderCode>{airline_code}</stockProviderCode>
                         </officeSettingsDetails>
                     </stockProviderDetails>
                 </Ticket_CancelDocument>
diff --git a/pygds/tests/amadeus/test_cancel.py b/pygds/tests/amadeus/test_cancel.py
index c4ccc4c..f816480 100644
--- a/pygds/tests/amadeus/test_cancel.py
+++ b/pygds/tests/amadeus/test_cancel.py
@@ -33,7 +33,6 @@ def test():
         log.info(session_info)
         log.info(res_reservation)
         message_id = session_info.message_id
-        # res_reservation = client.get_reservation(pnr, message_id, False)
         cancel_response = client.cancel_pnr(message_id, False)
         session_info, cancel_response = (cancel_response.session_info, cancel_response.payload)
         log.info(cancel_response)
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index 0b102d0..d997e54 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -22,7 +22,7 @@ def test():
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-    pnr = "MHYHWH"  # "LTGPDG"
+    pnr = "LTGPDG"  # "LTGPDG"
     try:
 
         message_id = None
diff --git a/pygds/tests/amadeus/test_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
index 0e4dbdd..28f4188 100644
--- a/pygds/tests/amadeus/test_void_ticket.py
+++ b/pygds/tests/amadeus/test_void_ticket.py
@@ -3,6 +3,7 @@
 """
 
 import os
+import re
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
 # from pygds.core.payment import FormOfPayment, CreditCard
@@ -25,19 +26,31 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "MMSIWM"  # MJNKN6, "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "N9EO29"  # MMRECS, MSDH6E, MJNKN6, "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
-        res_reservation = client.get_reservation(pnr, message_id, False)
+        res_reservation = client.get_reservation(pnr, message_id, True)
         session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
         log.info(session_info)
         log.info(res_reservation)
         message_id = session_info.message_id
-        void_response = client.void_tickets(message_id, [7421982205])
+        print(" ************* Message id ***************** ")
+        print(message_id)
+        ticket_number = [t.time for t in res_reservation["ticketing_info"]]
+        airline_code = res_reservation["itineraries"][0].marketing.airline_code
+        list_ticket_number = []
+        for ticket in ticket_number:
+            if len(ticket):
+                ticket_number = re.split("[, -/,////?//:; ]+", ticket)
+                t_number1 = ticket_number[1]
+                t_number2 = ticket_number[2]
+                list_ticket_number.append(t_number1 + t_number2)
+        void_response = client.void_tickets(message_id, [list_ticket_number], airline_code if len(airline_code) else None)
+        print(void_response)
         session_info, void_response = (void_response.session_info, void_response.payload)
         log.info(void_response)
         if session_info.session_ended is False:
-- 
2.17.1


From 9b74d87935505969505dbb17cbd856bbafa5baba Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Mon, 4 Nov 2019 12:51:05 +0000
Subject: [PATCH 36/46] testing void ticket

---
 pygds/amadeus/client.py                 |  1 +
 pygds/amadeus/xmlbuilders/builder.py    |  7 +++++++
 pygds/core/types.py                     | 17 +++++++++++++++++
 pygds/tests/amadeus/test_void_ticket.py | 14 +++++++++-----
 pygds/tests/sabre/test_all.py           |  7 ++++++-
 5 files changed, 40 insertions(+), 6 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index ac8f7d8..ea94e8f 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -334,6 +334,7 @@ class AmadeusClient(BaseClient):
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
         request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code)
+        print(request_data)
         response_data = self.__request_wrapper("void_tickets", request_data,
                                                'http://webservices.amadeus.com/TRCANQ_11_1_1A')
         print(response_data)
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 5c5f896..24bf24c 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -881,11 +881,18 @@ class AmadeusXMLBuilder:
             <soapenv:Body>
                 <Ticket_CancelDocument xmlns="http://xml.amadeus.com/TRCANQ_11_1_1A" >
                     {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
+                    <voidOption>
+                        <statusInformation>
+                            <indicator>SRP</indicator>
+                        </statusInformation>
+                    </voidOption>
                     <stockProviderDetails>
                         <officeSettingsDetails>
+                            <marketIataCode>FR</marketIataCode>
                             <stockProviderCode>{airline_code}</stockProviderCode>
                         </officeSettingsDetails>
                     </stockProviderDetails>
+
                 </Ticket_CancelDocument>
             </soapenv:Body>
         </soapenv:Envelope>
diff --git a/pygds/core/types.py b/pygds/core/types.py
index 3ed3473..9ef6638 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -598,6 +598,23 @@ class Remarks(BasicDataObject):
         }
 
 
+class InfoPayment(BasicDataObject):
+    def __init__(self, card_type: str, card_number: int, expire_month: int, expire_year: int):
+        self.card_type = card_type
+        self.card_number = card_number
+        self.expire_month = expire_month
+        self.expire_year = expire_year
+        # self.fop_type = fop_type
+
+    def to_data(self):
+        return {
+            "card_type": self.card_type,
+            "card_number": self.card_number,
+            "expire_month": self.expire_month,
+            "expire_year": self.expire_year
+        }
+
+
 class FareElement(BasicDataObject):
 
     def __init__(self, primary_code, connection, not_valid_before, not_valid_after, baggage_allowance, fare_basis):
diff --git a/pygds/tests/amadeus/test_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
index 28f4188..38d689b 100644
--- a/pygds/tests/amadeus/test_void_ticket.py
+++ b/pygds/tests/amadeus/test_void_ticket.py
@@ -33,23 +33,27 @@ def test():
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
-        res_reservation = client.get_reservation(pnr, message_id, True)
+        res_reservation = client.get_reservation(pnr, message_id, False)
         session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
         log.info(session_info)
         log.info(res_reservation)
+        if session_info.session_ended is True:
+            log.error(" Session is ended after retrieve PNR")
         message_id = session_info.message_id
-        print(" ************* Message id ***************** ")
-        print(message_id)
         ticket_number = [t.time for t in res_reservation["ticketing_info"]]
         airline_code = res_reservation["itineraries"][0].marketing.airline_code
         list_ticket_number = []
         for ticket in ticket_number:
             if len(ticket):
-                ticket_number = re.split("[, -/,////?//:; ]+", ticket)
+                ticket_number = re.split("[, -/. ]+", ticket)
                 t_number1 = ticket_number[1]
                 t_number2 = ticket_number[2]
                 list_ticket_number.append(t_number1 + t_number2)
-        void_response = client.void_tickets(message_id, [list_ticket_number], airline_code if len(airline_code) else None)
+        print("1. Testing ticket Number ******")
+        print(list_ticket_number)
+        print("2. Testing airline_code****** ")
+        print(airline_code)
+        void_response = client.void_tickets(message_id, [list_ticket_number[0]], airline_code if len(airline_code) else None)
         print(void_response)
         session_info, void_response = (void_response.session_info, void_response.payload)
         log.info(void_response)
diff --git a/pygds/tests/sabre/test_all.py b/pygds/tests/sabre/test_all.py
index f12fc6c..f8182a6 100644
--- a/pygds/tests/sabre/test_all.py
+++ b/pygds/tests/sabre/test_all.py
@@ -13,10 +13,15 @@ def test():
     pcc = get_setting("SABRE_PCC")
     password = decode_base64(get_setting("SABRE_PASSWORD"))
     url = "https://webservices3.sabre.com"
-
+    # pnr = "TGZKPI"
     client = SabreClient(url, "", username, password, pcc, False)
+<<<<<<< Updated upstream
     message_id = None
     client.get_or_create_session_details(message_id)
+=======
+    retrieve_pnr = client.get_reservation("GOQOBU", None, True)
+    print(retrieve_pnr.payload)
+>>>>>>> Stashed changes
 
 
 if __name__ == "__main__":
-- 
2.17.1


From 1d84334cb5715e59fdd6a31cfd89f27df0b13bd7 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Mon, 4 Nov 2019 13:13:57 +0000
Subject: [PATCH 37/46] flow final

---
 pygds/amadeus/client.py                     |  36 ++++--
 pygds/amadeus/xmlbuilders/builder.py        | 124 ++++++++++++++------
 pygds/core/types.py                         |   8 +-
 pygds/tests/amadeus/test_low_fare_search.py |  45 +++----
 4 files changed, 134 insertions(+), 79 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 91f617f..059ad0f 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -7,7 +7,7 @@ from pygds.amadeus.xml_parsers.retrive_pnr import GetPnrResponseExtractor
 from pygds.core.file_logger import FileLogger
 from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
-from pygds.core.types import TravellerNumbering, Itinerary, Recommandation
+from pygds.core.types import TravellerNumbering, Itinerary, Recommandation, SsrByPassenger
 from pygds.core.request import LowFareSearchRequest
 from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
@@ -176,7 +176,7 @@ class AmadeusClient(BaseClient):
         if not session_id:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.issue_ticket_retrieve(message_id, security_token, sequence_number, session_id,
-                                                              tst_refs, pax_refs)
+                                                              tst_refs)
         response_data = self.__request_wrapper("issue_ticket_with_retrieve", request_data,
                                                'http://webservices.amadeus.com/TTKTIQ_15_1_1A')
         final_result = IssueTicketResponseExtractor(response_data).extract()
@@ -215,9 +215,9 @@ class AmadeusClient(BaseClient):
 
         request_data = self.xml_builder.fare_informative_best_price_without_pnr(recommandation)
         response_data = self.__request_wrapper("fare_informative_best_price_without_pnr", request_data,
-                                               'http://webservices.amadeus.com/TIBNRQ_19_1_1A')
+                                               'http://webservices.amadeus.com/TIBNRQ_18_1_1A')
 
-        response_data = InformativePricingWithoutPnrExtractor(response_data).extract()
+        response_data = SessionExtractor(response_data).extract()
 
         return response_data
 
@@ -230,15 +230,8 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/FARQNQ_07_1_1A')
         return response_data
 
-    def sell_from_recommandation(self, message_id: str, itineraries):
-
-        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
-
-        if security_token is None:
-            raise NoSessionError(message_id)
-
-        request_data = self.xml_builder.sell_from_recomendation(message_id, session_id, sequence_number,
-                                                                security_token, itineraries)
+    def sell_from_recommandation(self, itineraries):
+        request_data = self.xml_builder.sell_from_recomendation(itineraries)
         response_data = self.__request_wrapper("sell_from_recommandation", request_data,
                                                'http://webservices.amadeus.com/ITAREQ_05_2_IA')
 
@@ -330,6 +323,23 @@ class AmadeusClient(BaseClient):
 
         return response_data
 
+    def pnr_add_ssr(self, message_id, ssr_passengers: List[SsrByPassenger]):
+        """
+            add passenger info and create the PNR
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if security_token is None:
+            raise NoSessionError(message_id)
+        request_data = self.xml_builder.pnr_add_ssr(session_id, sequence_number,
+                                                    security_token, message_id, ssr_passengers)
+        response_data = self.__request_wrapper("add_ssr_in_pnr", request_data,
+                                               'http://webservices.amadeus.com/PNRADD_17_1_1A')
+
+        response_data = GetPnrResponseExtractor(response_data).extract()
+        self.add_session(response_data.session_info)
+
+        return response_data
+
     def queue_place_pnr(self, message_id: str, pnr: str, queues: List[str]):
 
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 22a3d02..e1c8563 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -277,7 +277,7 @@ class AmadeusXMLBuilder:
                                                    created_date_time, True)
         header = f"""<soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
                         <add:MessageID>{message_id}</add:MessageID>
-                        <add:Action>http://webservices.amadeus.com/TIBNRQ_19_1_1A</add:Action>
+                        <add:Action>http://webservices.amadeus.com/TIBNRQ_18_1_1A</add:Action>
                         <add:To>{self.endpoint}/{self.wsap}</add:To>
                         {security_part}
                     </soapenv:Header>"""
@@ -400,11 +400,11 @@ class AmadeusXMLBuilder:
                 </soapenv:Envelope>
                 """
 
-    def sell_from_recomendation(self, message_id, session_id, sequence_number,
-                                security_token, itineraries):
-
-        header = self.generate_header("ITAREQ_05_2_IA", message_id, session_id, sequence_number, security_token)
+    def sell_from_recomendation(self, itineraries):
 
+        message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
+        security_part = self.new_transaction_chunk(self.office_id, self.username, nonce, digested_password,
+                                                   created_date_time)
         itineraries_details = []
         for it in itineraries:
             # itineraries_details.append(sub_parts.sell_from_recommendation_itinerary_details(it.origin, it.destination, it.segments))
@@ -413,6 +413,14 @@ class AmadeusXMLBuilder:
                                        it.booking_class, it.quantity))
         # The optimization algorithm. M1: cancel all if unsuccessful, M2: keep all confirmed if unsuccessful
         algo = 'M1'
+
+        header = f"""<soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
+                        <add:MessageID>{message_id}</add:MessageID>
+                        <add:Action>http://webservices.amadeus.com/ITAREQ_05_2_IA</add:Action>
+                        <add:To>{self.endpoint}/{self.wsap}</add:To>
+                        {security_part}
+                    </soapenv:Header>"""
+
         return f"""
         <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
             {header}
@@ -589,20 +597,19 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def add_form_of_payment_builder(self, message_id, session_id, sequence_number, security_token, form_of_payment,
+    def add_form_of_payment_builder(self, message_id, session_id, sequence_number, security_token,
                                     passenger_reference_type, passenger_reference_value,
                                     form_of_payment_sequence_number,
                                     group_usage_attribute_type, fop: CreditCard):
-        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
 
-        form_of_payment_code = fop.p_code
-        company_code = fop.company_code
-        form_of_payment_type = fop.p_type
+        form_of_payment_code = ""
+        company_code = ""
+        form_of_payment_type = passenger_reference_type.p_type
         group_usage_attribute_type = "FP"  # "PAY"
         form_of_payment = "FP"  # "DEF
-        pax_refs = pax_refs or []
-        inf_refs = inf_refs or []
-        segment_refs = segment_refs or []
+        pax_refs = []
+        inf_refs = []
+        segment_refs = []
 
         if isinstance(fop, CreditCard):
             return f"""
@@ -625,7 +632,7 @@ class AmadeusXMLBuilder:
                             {"".join([sub_parts.fop_passenger("INF", ref) for ref in inf_refs])}
                             {"".join([sub_parts.fop_segment(ref) for ref in segment_refs])}
                             <mopDescription>
-                            {sub_parts.fop_sequence_number(fop_sequence_number) if fop_sequence_number else ""}
+                            {sub_parts.fop_sequence_number(form_of_payment_sequence_number) if form_of_payment_sequence_number else ""}
                             <mopDetails>
                                 <fopPNRDetails>
                                     <fopDetails>
@@ -717,7 +724,7 @@ class AmadeusXMLBuilder:
     """
 
     def pnr_add_multi_element_builder(self, session_id, sequence_number, security_token, message_id, option_code, segment_name):
-        # security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
+        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
         # <nameInformation>
         #     <qualifier>RF</qualifier>
         #     <name>KOKOU</name>
@@ -726,7 +733,7 @@ class AmadeusXMLBuilder:
                 <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
     <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
     <add:MessageID>{message_id}</add:MessageID>
-    <add:Action>http://webservices.amadeus.com/TTKTIQ_15_1_1A</add:Action>
+    <add:Action>http://webservices.amadeus.com/PNRADD_17_1_1A</add:Action>
     <add:To>{self.endpoint}/{self.wsap}</add:To>{security_part}
     </soapenv:Header>
     <soapenv:Body>
@@ -735,26 +742,25 @@ class AmadeusXMLBuilder:
         <optionCode>{option_code}</optionCode>
       </pnrActions>
       <dataElementsMaster>
-        <marker1 />
-        <dataElementsIndiv>
-          <elementManagementData>
-            <segmentName>{segment_name}</segmentName>
-          </elementManagementData>
-          <formOfPayment>
-            <fop>
-              <identification>{identification}</identification>
-              <creditCardCode>{credit_card_code}</creditCardCode>
-              <accountNumber>{account_number}</accountNumber>
-              <expiryDate>{expiry_date}</expiryDate>
-              <currencyCode>{currency_code}</currencyCode>
-            </fop>
-            # <fop>
-            #   <identification>CA</identification>
-            #   <amount>96.46</amount>
-            # </fop>
-          </formOfPayment>
-        </dataElementsIndiv>
-      </dataElementsMaster>
+                        <marker1 />
+                        <dataElementsIndiv>
+                            <elementManagementData>
+                                <segmentName>AIR</segmentName>
+                            </elementManagementData>
+                        </dataElementsIndiv>
+                        <dataElementsIndiv>
+                            <elementManagementData>
+                                <segmentName>RF</segmentName>
+                            </elementManagementData>
+                                <freetextData>
+                                    <freetextDetail>
+                                        <subjectQualifier>3</subjectQualifier>
+                                        <type>P22</type>
+                                    </freetextDetail>
+                                    <longFreetext>DTW1S210B</longFreetext>
+                                </freetextData>
+                            </dataElementsIndiv>
+                    </dataElementsMaster>
     </PNR_AddMultiElements>
        </soapenv:Body>
     </soapenv:Envelope> """
@@ -807,6 +813,52 @@ class AmadeusXMLBuilder:
                 </soapenv:Body>
             </soapenv:Envelope> """
 
+    def pnr_add_ssr(self, session_id, sequence_number, security_token, message_id, ssr_passengers):
+
+        ssr_request = ""
+        for ssr_passenger in ssr_passengers:
+            ssr_request += f"""<dataElementsIndiv>
+                               <elementManagementData>
+                                    <segmentName>SSR</segmentName>
+                                </elementManagementData>
+                                <serviceRequest>
+                                   <ssr>
+                                        <type>DOCS</type>
+                                        <status>HK</status>
+                                        <quantity>1</quantity>
+                                        <companyId>{ssr_passenger.company_id}</companyId>
+                                        <freetext>{ssr_passenger.ssr_format}</freetext>
+                                    </ssr>
+                                </serviceRequest>
+                                <referenceForDataElement>
+                                   <reference>
+                                        <qualifier>PT</qualifier>
+                                        <number>{ssr_passenger.passenger_id}</number>
+                                    </reference>
+                                </referenceForDataElement>
+					    </dataElementsIndiv>"""
+        return f"""
+            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+                xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+                xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+                xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+                xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+                xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+                xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+                {self.generate_header("PNRADD_17_1_1A", message_id, session_id, sequence_number, security_token)}
+                <soapenv:Body>
+                    <PNR_AddMultiElements>
+                        <pnrActions>
+                            <optionCode>11</optionCode>
+                        </pnrActions>
+                        <dataElementsMaster>
+							<marker1/>
+							{ssr_request}
+                        </dataElementsMaster>
+                    </PNR_AddMultiElements>
+                </soapenv:Body>
+            </soapenv:Envelope> """
+
     def issue_ticket_retrieve(self, message_id, security_token, sequence_number, session_id, tst_refs: List[str]):
         return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
diff --git a/pygds/core/types.py b/pygds/core/types.py
index 5af59cf..71f5a2f 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -2,7 +2,6 @@ import datetime
 import json
 from typing import List
 
-
 class BasicDataObject(object):
     """
         A basic class that contains data.
@@ -27,6 +26,13 @@ class BasicDataObject(object):
         return self.to_json()
 
 
+class SsrByPassenger(BasicDataObject):
+    def __init(self, passenger_id: str, ssr_format: str, company_id: str):
+        self.passenger_id = passenger_id
+        self.ssr_format = ssr_format
+        self.company_id = company_id
+
+
 class FlightPointDetails(BasicDataObject):
     """
         Information about flight point details (on departure or arrival)
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 7422f6e..0a98392 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -39,7 +39,7 @@ def test():
     try:
 
         log.info("Begin call of Low Fare Search *************************************")
-        origine, destination, date_dep, date_arr = ("DSS", "CDG", "051119", "071119")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "071119")
 
         segments = [
             RequestedSegment(
@@ -57,7 +57,7 @@ def test():
             "",
             "",
             ["DL",
-             "AF"],
+             "AF", ],
             "",
             "",
             1)
@@ -70,8 +70,6 @@ def test():
         results, session_info = (search_results.payload, search_results.session_info)
         log.info(results)
 
-        message_id = session_info.message_id
-
         log.info("End of Low Fare Search ********************************************************************************")
 
         log.info("Begin call of sell from recommandation *************************************************************")
@@ -80,8 +78,6 @@ def test():
 
         list_segments = []
 
-        # itinerary = Itinerary()
-
         for index, flight_segment in enumerate(itineraries):
             segment = flight_segment[0]
 
@@ -102,16 +98,6 @@ def test():
             )
             list_segments.append(_segment)
 
-            # itinerary.addSegment(FlightSegment(departure_date_time=segment["departure_date"],
-            #                                    arrival_date_time=segment["arrival_date"],
-            #                                    airline=None,
-            #                                    arrival_airpot=segment["board_airport"],
-            #                                    departure_airport=segment["off_airport"],
-            #                                    flight_number=segment["flight_number"],
-            #                                    marketing=segment["marketing_company"],
-            #                                    class_of_service=segment["book_class"]
-            #                                    ))
-
         log.info("Begin fare informative pricing without pnr")
 
         recommandation = Recommandation(list_segments, TravellerNumbering(2))
@@ -126,13 +112,13 @@ def test():
 
         log.info("End of informative pricing without pnr")
 
-        result_sell = client.sell_from_recommandation(
-            message_id, list_segments
-        )
+        result_sell = client.sell_from_recommandation(list_segments)
 
         result_sell, session_info = (result_sell.payload, result_sell.session_info)
         log.info(result_sell)
 
+        message_id = session_info.message_id
+
         log.info("End of Sell From Recommandation ******************************************************")
         log.info("Begin Call of Add Passenger Info ****************************************************")
 
@@ -160,16 +146,7 @@ def test():
         # log.debug("update passenger")
         # log.debug(res_updat_pas.payload)
 
-        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
-
-        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P1", message_id)
-        # client.send_command("SR*DOCSYYHK1-----23JUN88-M--DIA-BALLA/P2", message_id)
-
-        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
-
-        log.info("Begin Call of Pricing Segment for some passenger ***********************************")
-
-        company_id = passenger_info_response["pnr_header"].company_id
+        company_id = _segment.company
 
         seg_refs = []
         pax_refs = []
@@ -178,6 +155,16 @@ def test():
         for pax in passenger_info_response["passengers"]:
             pax_refs.append(pax.name_id)
 
+        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
+
+        response_ssr = client.pnr_add_ssr(message_id, pax_refs, "P////17MAY12/M/19FEB26/ABRAHAM/SELAH", company_id)
+        # response_ssr = client.pnr_add_ssr(message_id, pax_refs[1], "////23JUN88/M//DIA/BALLA", company_id)
+        log.info(response_ssr)
+
+        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
+
+        log.info("Begin Call of Pricing Segment for some passenger ***********************************")
+
         price_request = PriceRequest(pax_refs, seg_refs)
         res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
         session_info, res_price = (res_price.session_info, res_price.payload)
-- 
2.17.1


From 4860f86c0927be21e1c578ebc8667e03efb2b910 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Tue, 5 Nov 2019 12:59:21 +0000
Subject: [PATCH 38/46] update passenger

---
 pygds/amadeus/client.py                      | 11 +++--
 pygds/amadeus/xml_parsers/retrive_pnr.py     |  7 ++-
 pygds/amadeus/xmlbuilders/builder.py         | 45 ++++----------------
 pygds/amadeus/xmlbuilders/sub_parts.py       | 40 +++++++++++++++++
 pygds/core/types.py                          |  8 +---
 pygds/tests/amadeus/test_low_fare_search.py  |  2 +-
 pygds/tests/amadeus/test_update_passenger.py | 32 ++++++++------
 7 files changed, 82 insertions(+), 63 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 059ad0f..648c1a2 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -7,7 +7,7 @@ from pygds.amadeus.xml_parsers.retrive_pnr import GetPnrResponseExtractor
 from pygds.core.file_logger import FileLogger
 from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
-from pygds.core.types import TravellerNumbering, Itinerary, Recommandation, SsrByPassenger
+from pygds.core.types import TravellerNumbering, Itinerary, Recommandation
 from pygds.core.request import LowFareSearchRequest
 from pygds.errors.gdserrors import NoSessionError
 from pygds.core.client import BaseClient
@@ -140,8 +140,7 @@ class AmadeusClient(BaseClient):
         self.add_session(response.session_info)
         return response
 
-    def pnr_add_multi_for_pax_info_element(self, message_id, ref_number, surname, quantity,
-                                           first_name, pax_type, inf_number, date_of_birth):
+    def pnr_add_multi_for_pax_info_element(self, message_id, email_tato, email_content, number_tato, number_content):
         """
             This method modifies the elements of a PNR (passengers, etc.)
         """
@@ -149,7 +148,7 @@ class AmadeusClient(BaseClient):
         if not security_token:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
-                                                                                   message_id, ref_number, surname, quantity, first_name, pax_type, inf_number, date_of_birth)
+                                                                                   message_id, email_tato, email_content, number_tato, number_content)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
         # print(response_data)
@@ -323,7 +322,7 @@ class AmadeusClient(BaseClient):
 
         return response_data
 
-    def pnr_add_ssr(self, message_id, ssr_passengers: List[SsrByPassenger]):
+    def pnr_add_ssr(self, message_id, passenger_ids, content, company_id):
         """
             add passenger info and create the PNR
         """
@@ -331,7 +330,7 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.pnr_add_ssr(session_id, sequence_number,
-                                                    security_token, message_id, ssr_passengers)
+                                                    security_token, message_id, passenger_ids, content, company_id)
         response_data = self.__request_wrapper("add_ssr_in_pnr", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
 
diff --git a/pygds/amadeus/xml_parsers/retrive_pnr.py b/pygds/amadeus/xml_parsers/retrive_pnr.py
index 9c1ecf5..d3a72e9 100644
--- a/pygds/amadeus/xml_parsers/retrive_pnr.py
+++ b/pygds/amadeus/xml_parsers/retrive_pnr.py
@@ -29,9 +29,14 @@ class GetPnrResponseExtractor(BaseResponseExtractor):
             'pnr_info': self._pnr_info(),
             'dk_number': self._dk_number(),
             'tst_data': self._tst_data(),
-            'pnr_header': self.pnr_header()
+            'pnr_header': self.pnr_header(),
+            'other_information': self.ot_info()
         }
 
+    def ot_info(self):
+        ot_informations = from_json_safe(self.payload, "dataElementsMaster", "dataElementsIndiv")
+        return ot_informations
+
     def pnr_header(self):
         pnr_header = from_json_safe(self.payload, "pnrHeader", "reservationInfo", "reservation")
         if isinstance(pnr_header, dict):
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index e1c8563..e26537c 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -765,9 +765,8 @@ class AmadeusXMLBuilder:
        </soapenv:Body>
     </soapenv:Envelope> """
 
-    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, ref_number,
-                                                   surname, quantity, first_name, pax_type, inf_number, date_of_birth):
-
+    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, email_tato, email_content, number_tato, number_content):
+        passenger_informations = sub_parts.build_update_principal_passenger(email_tato, email_content, number_tato, number_content)
         return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                 xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
@@ -780,43 +779,17 @@ class AmadeusXMLBuilder:
                 <soapenv:Body>
                     <PNR_AddMultiElements>
                         <pnrActions>
-                            <optionCode>0</optionCode>
+                            <optionCode>11</optionCode>
                         </pnrActions>
-                        <travellerInfo>
-                            <elementManagementPassenger>
-                                <reference>
-                                    <qualifier>PT</qualifier>
-                                    <number>{ref_number}</number>
-                                </reference>
-                                <segmentName>NM</segmentName>
-                            </elementManagementPassenger>
-                            <passengerData>
-                                <travellerInformation>
-                                    <traveller>
-                                        <surname>{surname}</surname>
-                                        <quantity>{quantity}</quantity>
-                                    </traveller>
-                                    <passenger>
-                                        <firstName>{first_name}</firstName>
-                                        <type>{pax_type}</type>
-                                        <infantIndicator>{inf_number}</infantIndicator>
-                                    </passenger>
-                                </travellerInformation>
-                                <dateOfBirth>
-                                    <dateAndTimeDetails>
-                                        <date>{date_of_birth}</date>
-                                    </dateAndTimeDetails>
-                                </dateOfBirth>
-                            </passengerData>
-                        </travellerInfo>
+                        {passenger_informations}
                     </PNR_AddMultiElements>
                 </soapenv:Body>
             </soapenv:Envelope> """
 
-    def pnr_add_ssr(self, session_id, sequence_number, security_token, message_id, ssr_passengers):
+    def pnr_add_ssr(self, session_id, sequence_number, security_token, message_id, passenger_ids, content, company_id):
 
         ssr_request = ""
-        for ssr_passenger in ssr_passengers:
+        for id in passenger_ids:
             ssr_request += f"""<dataElementsIndiv>
                                <elementManagementData>
                                     <segmentName>SSR</segmentName>
@@ -826,14 +799,14 @@ class AmadeusXMLBuilder:
                                         <type>DOCS</type>
                                         <status>HK</status>
                                         <quantity>1</quantity>
-                                        <companyId>{ssr_passenger.company_id}</companyId>
-                                        <freetext>{ssr_passenger.ssr_format}</freetext>
+                                        <companyId>{company_id}</companyId>
+                                        <freetext>{content}</freetext>
                                     </ssr>
                                 </serviceRequest>
                                 <referenceForDataElement>
                                    <reference>
                                         <qualifier>PT</qualifier>
-                                        <number>{ssr_passenger.passenger_id}</number>
+                                        <number>{id}</number>
                                     </reference>
                                 </referenceForDataElement>
 					    </dataElementsIndiv>"""
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index 4a893e3..6056594 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -7,6 +7,46 @@ from pygds.core.types import TravellerNumbering, Itinerary, FlightSegment
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
 
 
+def build_update_principal_passenger(email_tato=None, email_content=None, number_tato=None, number_content=None):
+    response = "<dataElementsMaster><marker1/>"
+    if email_content:
+        response += f"""<dataElementsIndiv>
+                    <elementManagementData>
+                        <reference>
+                            <qualifier>OT</qualifier>
+                            <number>{email_tato}</number>
+                        </reference>
+                        <segmentName>AP</segmentName>
+                    </elementManagementData>
+                    <freetextData>
+                        <freetextDetail>
+                            <subjectQualifier>3</subjectQualifier>
+                            <type>P02</type>
+                        </freetextDetail>
+                        <longFreetext>{email_content}</longFreetext>
+                    </freetextData>
+                </dataElementsIndiv>"""
+    if number_content:
+        response += f"""<dataElementsIndiv>
+                    <elementManagementData>
+                        <reference>
+                            <qualifier>OT</qualifier>
+                            <number>{number_tato}</number>
+                        </reference>
+                        <segmentName>AP</segmentName>
+                    </elementManagementData>
+                    <freetextData>
+                        <freetextDetail>
+                            <subjectQualifier>3</subjectQualifier>
+                            <type>6</type>
+                        </freetextDetail>
+                        <longFreetext>{number_content}</longFreetext>
+                    </freetextData>
+                </dataElementsIndiv>"""
+
+    return response + "</dataElementsMaster>"
+
+
 def fare_informative_best_price_passengers(traveller_numbering):
 
     ptc_adt = ""
diff --git a/pygds/core/types.py b/pygds/core/types.py
index 71f5a2f..5af59cf 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -2,6 +2,7 @@ import datetime
 import json
 from typing import List
 
+
 class BasicDataObject(object):
     """
         A basic class that contains data.
@@ -26,13 +27,6 @@ class BasicDataObject(object):
         return self.to_json()
 
 
-class SsrByPassenger(BasicDataObject):
-    def __init(self, passenger_id: str, ssr_format: str, company_id: str):
-        self.passenger_id = passenger_id
-        self.ssr_format = ssr_format
-        self.company_id = company_id
-
-
 class FlightPointDetails(BasicDataObject):
     """
         Information about flight point details (on departure or arrival)
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 0a98392..7e3994d 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -217,7 +217,7 @@ def test():
         if session_info.session_ended is True:
             log.error("The session is ended when saving PNR")
             return
-        log.info("End Sqve ****************************************************************************")
+        log.info("End Save ****************************************************************************")
 
         # log.info("Begin Ticket ************************************************************************")
 
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index 0b102d0..63546d2 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -4,6 +4,7 @@
 from pygds import log_handler
 from pygds.env_settings import get_setting
 import os
+import fnc
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
 # from pygds.core.types import TravellerInfo, ReservationInfo
@@ -22,7 +23,7 @@ def test():
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-    pnr = "MHYHWH"  # "LTGPDG"
+    pnr = 'NI8MVA'  # "LTGPDG"
     try:
 
         message_id = None
@@ -36,18 +37,25 @@ def test():
             return
         message_id = session_info.message_id
 
+        email_tato = ""
+        number_tato = ""
+        for ot in res_reservation["other_information"]:
+            if fnc.get("otherDataFreetext.freetextDetail.type", ot) == "6":
+                number_tato = ot["elementManagementData"]["reference"]["number"]
+            if fnc.get("otherDataFreetext.freetextDetail.type", ot) == "P02":
+                email_tato = ot["elementManagementData"]["reference"]["number"]
         log.info("2. Update passenger")
-        passengers = [p.name_id for p in res_reservation["passengers"]]
-        for pr in passengers:
-            log.info(f"begin  of Calling update Passenger Information for passenger {pr} **")
-            res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, pr, f"Diop {pr}", 1, f"MOUHAMAD {pr}", "ADT", 1, "03121990")
-            res_updat_pas, session_info = res_updat_pas.payload, res_updat_pas.session_info
-            log.debug(res_updat_pas)
-            # log.debug(session_info)
-            if session_info.session_ended is True:
-                log.debug(f"Session closed after update passenger {pr}")
-                return
-            message_id = session_info.message_id
+        # passengers = [p.name_id for p in res_reservation["passengers"]]
+        # for pr in passengers:
+        # log.info(f"begin  of Calling update Passenger Information for passenger {pr} **")
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, email_tato, "Amadou1994@gmail.com", number_tato, "773630684")
+        res_updat_pas, session_info = res_updat_pas.payload, res_updat_pas.session_info
+        # log.debug(res_updat_pas)
+        # # log.debug(session_info)
+        # if session_info.session_ended is True:
+        #     log.debug(f"Session closed after update passenger {pr}")
+        #     return
+        # message_id = session_info.message_id
 
         if session_info.session_ended is False:
             log.info("3. Close session")
-- 
2.17.1


From 1135fb0581906d715a8e9d5e4c9f4ec2f8582e08 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Tue, 5 Nov 2019 13:04:25 +0000
Subject: [PATCH 39/46] add office identification in the request

---
 pygds/amadeus/client.py                       |  4 ++--
 pygds/amadeus/xmlbuilders/builder.py          | 14 ++++++-------
 .../amadeus/test_flow_low_fare_search.py      |  2 +-
 pygds/tests/amadeus/test_void_ticket.py       | 20 ++++++++++++-------
 4 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index ea94e8f..95ddf70 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -322,7 +322,7 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         return response_data
 
-    def void_tickets(self, message_id: str, ticket_numbers: List[str], airline_code: str):
+    def void_tickets(self, message_id: str, ticket_numbers: List[str], airline_code: str, office: str):
         """
         Cancel documents by ticket numbers
         :param message_id: str -> the message id
@@ -333,7 +333,7 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
-        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code)
+        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code, office)
         print(request_data)
         response_data = self.__request_wrapper("void_tickets", request_data,
                                                'http://webservices.amadeus.com/TRCANQ_11_1_1A')
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 24bf24c..f5371cd 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -864,7 +864,7 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str], airline_code: str):
+    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str], airline_code: str, office: str):
         message_id = session_info.message_id
         session_id = session_info.session_id
         sequence_number = session_info.sequence_number
@@ -880,18 +880,18 @@ class AmadeusXMLBuilder:
             {self.generate_header("TRCANQ_11_1_1A", message_id, session_id, sequence_number, security_token)}
             <soapenv:Body>
                 <Ticket_CancelDocument xmlns="http://xml.amadeus.com/TRCANQ_11_1_1A" >
+
                     {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
-                    <voidOption>
-                        <statusInformation>
-                            <indicator>SRP</indicator>
-                        </statusInformation>
-                    </voidOption>
                     <stockProviderDetails>
                         <officeSettingsDetails>
-                            <marketIataCode>FR</marketIataCode>
                             <stockProviderCode>{airline_code}</stockProviderCode>
                         </officeSettingsDetails>
                     </stockProviderDetails>
+                    <targetOfficeDetails>
+                        <originatorDetails>
+                            <inHouseIdentification2>{office}</inHouseIdentification2>
+                        </originatorDetails>
+                    </targetOfficeDetails>
 
                 </Ticket_CancelDocument>
             </soapenv:Body>
diff --git a/pygds/tests/amadeus/test_flow_low_fare_search.py b/pygds/tests/amadeus/test_flow_low_fare_search.py
index 1ada9ef..cf5104d 100644
--- a/pygds/tests/amadeus/test_flow_low_fare_search.py
+++ b/pygds/tests/amadeus/test_flow_low_fare_search.py
@@ -32,7 +32,7 @@ def test():
     try:
         origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "081119")
         segments = [RequestedSegment(origin=origine, destination=destination, departure_date=date_dep, arrival_date=date_arr)]
-        low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["DL", "AF"], "", "", 1)
+        low_fare_search = LowFareSearchRequest(segments, "Y", "", TravellerNumbering(1), "", "", ["6X"], "", "", 1)
         log.debug(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
         currency_code, c_qualifier = ("EUR", "RC")
         search_results = client.fare_master_pricer_travel_board_search(low_fare_search, currency_code, c_qualifier)
diff --git a/pygds/tests/amadeus/test_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
index 38d689b..cea65c7 100644
--- a/pygds/tests/amadeus/test_void_ticket.py
+++ b/pygds/tests/amadeus/test_void_ticket.py
@@ -10,6 +10,7 @@ from pygds.amadeus.errors import ClientError, ServerError
 # from pygds.core.price import PriceRequest  # , Fare
 # from pygds.core.types import SellItinerary, TravellerNumbering, TravellerInfo
 from pygds.env_settings import get_setting
+import logging
 from pygds import log_handler
 # from pygds.core.types import TravellerInfo, ReservationInfo
 
@@ -26,7 +27,7 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "N9EO29"  # MMRECS, MSDH6E, MJNKN6, "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "NN3GFI"  # NMZPBS, N9EO29, MMRECS, MSDH6E, MJNKN6,  "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
@@ -41,20 +42,25 @@ def test():
             log.error(" Session is ended after retrieve PNR")
         message_id = session_info.message_id
         ticket_number = [t.time for t in res_reservation["ticketing_info"]]
+
         airline_code = res_reservation["itineraries"][0].marketing.airline_code
         list_ticket_number = []
+        office = None
         for ticket in ticket_number:
             if len(ticket):
                 ticket_number = re.split("[, -/. ]+", ticket)
                 t_number1 = ticket_number[1]
                 t_number2 = ticket_number[2]
                 list_ticket_number.append(t_number1 + t_number2)
-        print("1. Testing ticket Number ******")
-        print(list_ticket_number)
-        print("2. Testing airline_code****** ")
-        print(airline_code)
-        void_response = client.void_tickets(message_id, [list_ticket_number[0]], airline_code if len(airline_code) else None)
-        print(void_response)
+                office = ticket_number[7]
+        print(" ***** Test Office******")
+        print(office)
+        logging.error("1. Testing ticket Number ******")
+        logging.error(list_ticket_number)
+        logging.error("2. Testing airline_code****** ")
+        logging.error(airline_code)
+        void_response = client.void_tickets(message_id, [list_ticket_number[0]], airline_code, office)
+        logging.error(void_response)
         session_info, void_response = (void_response.session_info, void_response.payload)
         log.info(void_response)
         if session_info.session_ended is False:
-- 
2.17.1


From ad97256baf500af7f252422bfdff1823413da3a5 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Wed, 6 Nov 2019 16:18:09 +0000
Subject: [PATCH 40/46] accept changes

---
 pygds/amadeus/client.py                 |  4 ++--
 pygds/amadeus/xmlbuilders/builder.py    |  4 ++--
 pygds/tests/amadeus/test_void_ticket.py | 18 ++++++++++++------
 3 files changed, 16 insertions(+), 10 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 95ddf70..ea94e8f 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -322,7 +322,7 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         return response_data
 
-    def void_tickets(self, message_id: str, ticket_numbers: List[str], airline_code: str, office: str):
+    def void_tickets(self, message_id: str, ticket_numbers: List[str], airline_code: str):
         """
         Cancel documents by ticket numbers
         :param message_id: str -> the message id
@@ -333,7 +333,7 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
-        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code, office)
+        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code)
         print(request_data)
         response_data = self.__request_wrapper("void_tickets", request_data,
                                                'http://webservices.amadeus.com/TRCANQ_11_1_1A')
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index f5371cd..efaa4b3 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -864,7 +864,7 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str], airline_code: str, office: str):
+    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str], airline_code: str):
         message_id = session_info.message_id
         session_id = session_info.session_id
         sequence_number = session_info.sequence_number
@@ -889,7 +889,7 @@ class AmadeusXMLBuilder:
                     </stockProviderDetails>
                     <targetOfficeDetails>
                         <originatorDetails>
-                            <inHouseIdentification2>{office}</inHouseIdentification2>
+                            <inHouseIdentification2>{self.office_id}</inHouseIdentification2>
                         </originatorDetails>
                     </targetOfficeDetails>
 
diff --git a/pygds/tests/amadeus/test_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
index cea65c7..24cea92 100644
--- a/pygds/tests/amadeus/test_void_ticket.py
+++ b/pygds/tests/amadeus/test_void_ticket.py
@@ -27,10 +27,10 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "NN3GFI"  # NMZPBS, N9EO29, MMRECS, MSDH6E, MJNKN6,  "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "NOU265"  # NOMF82, NN3GFI, NMZPBS, N9EO29, MMRECS, MSDH6E, MJNKN6,  "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
-    client = AmadeusClient(endpoint, username, password, office_id, wsap, False)
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     # import web_pdb; web_pdb.set_trace()
     try:
         message_id = None
@@ -45,21 +45,27 @@ def test():
 
         airline_code = res_reservation["itineraries"][0].marketing.airline_code
         list_ticket_number = []
+        list_ticket = []
         office = None
         for ticket in ticket_number:
             if len(ticket):
+                list_ticket.append(ticket)
                 ticket_number = re.split("[, -/. ]+", ticket)
                 t_number1 = ticket_number[1]
                 t_number2 = ticket_number[2]
                 list_ticket_number.append(t_number1 + t_number2)
                 office = ticket_number[7]
-        print(" ***** Test Office******")
-        print(office)
+        print(" ***** Response ticket with Retrieve PNR ******")
+        print(res_reservation["ticketing_info"])
+
+        print("******* Retrieve the list of ticket number *****")
+        print(list_ticket)
         logging.error("1. Testing ticket Number ******")
+        print(ticket_number)
         logging.error(list_ticket_number)
         logging.error("2. Testing airline_code****** ")
-        logging.error(airline_code)
-        void_response = client.void_tickets(message_id, [list_ticket_number[0]], airline_code, office)
+        logging.error(t_number1)
+        void_response = client.void_tickets(message_id, [list_ticket_number[0]], airline_code)
         logging.error(void_response)
         session_info, void_response = (void_response.session_info, void_response.payload)
         log.info(void_response)
-- 
2.17.1


From 3b3a96fbfccc1cd9be19356c1b9b26e18eb596d4 Mon Sep 17 00:00:00 2001
From: salioucts <saliou@ctsfares.com>
Date: Wed, 6 Nov 2019 18:07:08 +0000
Subject: [PATCH 41/46] remove the airline code in the request and replace with
 country code

---
 pygds/amadeus/client.py                 |  7 +++----
 pygds/amadeus/xmlbuilders/builder.py    |  4 ++--
 pygds/core/types.py                     |  1 +
 pygds/tests/amadeus/test_void_ticket.py | 18 ++----------------
 4 files changed, 8 insertions(+), 22 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index ea94e8f..9af404e 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -322,7 +322,7 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         return response_data
 
-    def void_tickets(self, message_id: str, ticket_numbers: List[str], airline_code: str):
+    def void_tickets(self, message_id: str, ticket_numbers: List[str]):
         """
         Cancel documents by ticket numbers
         :param message_id: str -> the message id
@@ -333,11 +333,10 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
-        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers, airline_code)
-        print(request_data)
+        request_data = self.xml_builder.void_tickets(session_info, ticket_numbers)
         response_data = self.__request_wrapper("void_tickets", request_data,
                                                'http://webservices.amadeus.com/TRCANQ_11_1_1A')
-        print(response_data)
+
         return VoidTicketExtractor(response_data).extract()
 
     def cancel_pnr(self, message_id: str, close_session: bool = False):
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index efaa4b3..7ee46cb 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -864,7 +864,7 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str], airline_code: str):
+    def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str]):
         message_id = session_info.message_id
         session_id = session_info.session_id
         sequence_number = session_info.sequence_number
@@ -884,7 +884,7 @@ class AmadeusXMLBuilder:
                     {"".join([sub_parts.tcd_ticket_number(t) for t in ticket_numbers])}
                     <stockProviderDetails>
                         <officeSettingsDetails>
-                            <stockProviderCode>{airline_code}</stockProviderCode>
+                            <marketIataCode>US</marketIataCode>
                         </officeSettingsDetails>
                     </stockProviderDetails>
                     <targetOfficeDetails>
diff --git a/pygds/core/types.py b/pygds/core/types.py
index 9ef6638..170178e 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -1128,6 +1128,7 @@ class VoidTicket(BasicDataObject):
         return {
             "response_type": self.response_type,
             "status_code": self.status_code,
+            "voited": self.status_code == "O",
             "ticket_number": self.ticket_number
         }
 
diff --git a/pygds/tests/amadeus/test_void_ticket.py b/pygds/tests/amadeus/test_void_ticket.py
index 24cea92..f045331 100644
--- a/pygds/tests/amadeus/test_void_ticket.py
+++ b/pygds/tests/amadeus/test_void_ticket.py
@@ -27,7 +27,7 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
-    pnr = "NOU265"  # NOMF82, NN3GFI, NMZPBS, N9EO29, MMRECS, MSDH6E, MJNKN6,  "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = "NTYQQ8"  # NOU265, NOMF82, NN3GFI, NMZPBS, N9EO29, MMRECS, MSDH6E, MJNKN6,  "LNB4CC", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
@@ -42,11 +42,8 @@ def test():
             log.error(" Session is ended after retrieve PNR")
         message_id = session_info.message_id
         ticket_number = [t.time for t in res_reservation["ticketing_info"]]
-
-        airline_code = res_reservation["itineraries"][0].marketing.airline_code
         list_ticket_number = []
         list_ticket = []
-        office = None
         for ticket in ticket_number:
             if len(ticket):
                 list_ticket.append(ticket)
@@ -54,18 +51,7 @@ def test():
                 t_number1 = ticket_number[1]
                 t_number2 = ticket_number[2]
                 list_ticket_number.append(t_number1 + t_number2)
-                office = ticket_number[7]
-        print(" ***** Response ticket with Retrieve PNR ******")
-        print(res_reservation["ticketing_info"])
-
-        print("******* Retrieve the list of ticket number *****")
-        print(list_ticket)
-        logging.error("1. Testing ticket Number ******")
-        print(ticket_number)
-        logging.error(list_ticket_number)
-        logging.error("2. Testing airline_code****** ")
-        logging.error(t_number1)
-        void_response = client.void_tickets(message_id, [list_ticket_number[0]], airline_code)
+        void_response = client.void_tickets(message_id, [list_ticket_number[0]])
         logging.error(void_response)
         session_info, void_response = (void_response.session_info, void_response.payload)
         log.info(void_response)
-- 
2.17.1


From afa85b79c3c277cc42660041f26d04aa7f355395 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Thu, 7 Nov 2019 18:39:21 +0000
Subject: [PATCH 42/46] update passenger

---
 pygds/amadeus/client.py                      | 22 +++++--
 pygds/amadeus/xmlbuilders/builder.py         | 31 ++++++++-
 pygds/amadeus/xmlbuilders/sub_parts.py       | 69 +++++++++++++-------
 pygds/core/types.py                          |  6 +-
 pygds/tests/amadeus/test_low_fare_search.py  | 16 ++---
 pygds/tests/amadeus/test_update_passenger.py | 21 +++---
 6 files changed, 115 insertions(+), 50 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 648c1a2..3754f85 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -140,7 +140,7 @@ class AmadeusClient(BaseClient):
         self.add_session(response.session_info)
         return response
 
-    def pnr_add_multi_for_pax_info_element(self, message_id, email_tato, email_content, number_tato, number_content):
+    def pnr_add_multi_for_pax_info_element(self, message_id, email_content, passenger_id, office_id):
         """
             This method modifies the elements of a PNR (passengers, etc.)
         """
@@ -148,12 +148,26 @@ class AmadeusClient(BaseClient):
         if not security_token:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.pnr_add_multi_element_for_pax_info_builder(session_id, sequence_number, security_token,
-                                                                                   message_id, email_tato, email_content, number_tato, number_content)
+                                                                                   message_id, email_content, passenger_id, office_id)
         response_data = self.__request_wrapper("pnr_add_multi_for_pax_info_element", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
         # print(response_data)
         return UpdatePassengers(response_data).extract()
 
+    def cancel_information_passenger(self, reference, message_id):
+        """
+            This method modifies the elements of a PNR (passengers, etc.)
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if not security_token:
+            raise NoSessionError(message_id)
+        request_data = self.xml_builder.cancel_information_passenger(session_id, sequence_number, security_token,
+                                                                     message_id, reference)
+        response_data = self.__request_wrapper("cancel information passenger", request_data,
+                                               'http://webservices.amadeus.com/PNRXCL_14_2_1A')
+        # print(response_data)
+        return SessionExtractor(response_data).extract()
+
     def ticketing_pnr(self, message_id, passenger_reference_type, passenger_reference_value):
         """
             PNR ticketing process.
@@ -305,7 +319,7 @@ class AmadeusClient(BaseClient):
         self.add_session(res.session_info)
         return res
 
-    def add_passenger_info(self, office_id, message_id, infos):
+    def add_passenger_info(self, office_id, message_id, infos, company_id):
         """
             add passenger info and create the PNR
         """
@@ -313,7 +327,7 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         request_data = self.xml_builder.add_passenger_info(office_id, message_id, session_id, sequence_number,
-                                                           security_token, infos)
+                                                           security_token, infos, company_id)
         response_data = self.__request_wrapper("add_passenger_info", request_data,
                                                'http://webservices.amadeus.com/PNRADD_17_1_1A')
 
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index e26537c..28af89a 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -169,6 +169,28 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
+    def cancel_information_passenger(self, session_id, sequence_number, security_token,
+                                     message_id, reference):
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+             {self.generate_header("PNRXCL_14_2_1A", message_id, session_id, sequence_number, security_token)}
+            <soapenv:Body>
+                <PNR_Cancel>
+                    <pnrActions>
+                        <optionCode>11</optionCode>
+                    </pnrActions>
+                    <cancelElements>
+                        <entryType>E</entryType>
+                        <element>
+                        <identifier>OT</identifier>
+                        <number>{reference}</number>
+                        </element>
+                    </cancelElements>
+                </PNR_Cancel>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
+
     def get_reservation_builder(self, pnr_number: str, message_id: str = None, session_id: str = None,
                                 sequence_number: str = None, security_token: str = None, close_trx: bool = False):
         """
@@ -477,13 +499,15 @@ class AmadeusXMLBuilder:
         </itineraryDetails>
         """
 
-    def add_passenger_info(self, office_id, message_id, session_id, sequence_number, security_token, infos):
+    def add_passenger_info(self, office_id, message_id, session_id, sequence_number, security_token, infos, company_id):
         security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
         passenger_infos = []
+        ssr_content = ""
         for i in infos.traveller_info:
             passenger_infos.append(
                 sub_parts.add_multi_elements_traveller_info(i.ref_number, i.first_name, i.surname, i.last_name,
                                                             i.date_of_birth, i.pax_type))
+            ssr_content += sub_parts.add_multi_element_ssr(i, company_id)
         # type = 6 Travel agent telephone number
         # type = PO2 E-mail address
         # type = 7 Mobile Phone Number
@@ -517,6 +541,7 @@ class AmadeusXMLBuilder:
                         {sub_parts.add_multi_element_contact_element("7", infos.number_tel) if infos.number_tel else ""}
                         {sub_parts.add_multi_element_contact_element("6", infos.number_tel_agent) if infos.number_tel else ""}
                         {sub_parts.add_multi_element_contact_element("P02", infos.email) if infos.number_tel else ""}
+                        {ssr_content}
                         <dataElementsIndiv>
                             <elementManagementData>
                                 <segmentName>TK</segmentName>
@@ -765,8 +790,8 @@ class AmadeusXMLBuilder:
        </soapenv:Body>
     </soapenv:Envelope> """
 
-    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, email_tato, email_content, number_tato, number_content):
-        passenger_informations = sub_parts.build_update_principal_passenger(email_tato, email_content, number_tato, number_content)
+    def pnr_add_multi_element_for_pax_info_builder(self, session_id, sequence_number, security_token, message_id, email_content, passenger_id, office_id):
+        passenger_informations = sub_parts.build_update_principal_passenger(email_content, passenger_id, office_id)
         return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                 xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
diff --git a/pygds/amadeus/xmlbuilders/sub_parts.py b/pygds/amadeus/xmlbuilders/sub_parts.py
index 6056594..76820bc 100644
--- a/pygds/amadeus/xmlbuilders/sub_parts.py
+++ b/pygds/amadeus/xmlbuilders/sub_parts.py
@@ -7,15 +7,24 @@ from pygds.core.types import TravellerNumbering, Itinerary, FlightSegment
 from pygds.core.request import RequestedSegment, LowFareSearchRequest
 
 
-def build_update_principal_passenger(email_tato=None, email_content=None, number_tato=None, number_content=None):
+def build_update_principal_passenger(email_content, passenger_id, office_id):
     response = "<dataElementsMaster><marker1/>"
     if email_content:
-        response += f"""<dataElementsIndiv>
+        response += f"""
+                    <dataElementsIndiv>
+                        <elementManagementData>
+                            <segmentName>RF</segmentName>
+                        </elementManagementData>
+                        <freetextData>
+                            <freetextDetail>
+                                <subjectQualifier>3</subjectQualifier>
+                                <type>P22</type>
+                            </freetextDetail>
+                            <longFreetext>{office_id}</longFreetext>
+                        </freetextData>
+                    </dataElementsIndiv>
+                    <dataElementsIndiv>
                     <elementManagementData>
-                        <reference>
-                            <qualifier>OT</qualifier>
-                            <number>{email_tato}</number>
-                        </reference>
                         <segmentName>AP</segmentName>
                     </elementManagementData>
                     <freetextData>
@@ -25,25 +34,13 @@ def build_update_principal_passenger(email_tato=None, email_content=None, number
                         </freetextDetail>
                         <longFreetext>{email_content}</longFreetext>
                     </freetextData>
+                    <referenceForDataElement>
+                    <reference>
+                        <qualifier>PT</qualifier>
+                        <number>{passenger_id}</number>
+                    </reference>
+                </referenceForDataElement>
                 </dataElementsIndiv>"""
-    if number_content:
-        response += f"""<dataElementsIndiv>
-                    <elementManagementData>
-                        <reference>
-                            <qualifier>OT</qualifier>
-                            <number>{number_tato}</number>
-                        </reference>
-                        <segmentName>AP</segmentName>
-                    </elementManagementData>
-                    <freetextData>
-                        <freetextDetail>
-                            <subjectQualifier>3</subjectQualifier>
-                            <type>6</type>
-                        </freetextDetail>
-                        <longFreetext>{number_content}</longFreetext>
-                    </freetextData>
-                </dataElementsIndiv>"""
-
     return response + "</dataElementsMaster>"
 
 
@@ -309,6 +306,30 @@ def sell_from_recommendation_segment(origin, destination, departure_date, compan
     """
 
 
+def add_multi_element_ssr(travel_info, company_id):
+
+    return f"""<dataElementsIndiv>
+                <elementManagementData>
+                    <segmentName>SSR</segmentName>
+                </elementManagementData>
+                <serviceRequest>
+                    <ssr>
+                        <type>DOCS</type>
+                        <status>HK</status>
+                        <quantity>1</quantity>
+                        <companyId>{company_id}</companyId>
+                        <freetext>{travel_info.ssr_content}</freetext>
+                    </ssr>
+                </serviceRequest>
+                <referenceForDataElement>
+                    <reference>
+                        <qualifier>PT</qualifier>
+                        <number>{travel_info.ref_number}</number>
+                    </reference>
+                </referenceForDataElement>
+        </dataElementsIndiv>"""
+
+
 def add_multi_elements_traveller_info(ref_number, first_name, surname, last_name, date_of_birth, pax_type,
                                       infant_name=None):
     quantity = 1
diff --git a/pygds/core/types.py b/pygds/core/types.py
index 5af59cf..d9b5756 100644
--- a/pygds/core/types.py
+++ b/pygds/core/types.py
@@ -681,13 +681,14 @@ class SellItinerary(BasicDataObject):
 
 
 class TravellerInfo(BasicDataObject):
-    def __init__(self, ref_number, first_name, surname, last_name, date_of_birth, pax_type):
+    def __init__(self, ref_number, first_name, surname, last_name, date_of_birth, pax_type, ssr_content):
         self.ref_number = ref_number
         self.first_name = first_name
         self.surname = surname
         self.last_name = last_name
         self.date_of_birth = date_of_birth
         self.pax_type = pax_type
+        self.ssr_content = ssr_content
 
         def to_data(self):
             return {
@@ -696,7 +697,8 @@ class TravellerInfo(BasicDataObject):
                 "surname": self.surname,
                 "last_name": self.last_name,
                 "date_of_birth": self.date_of_birth,
-                "pax_type": self.pax_type
+                "pax_type": self.pax_type,
+                "ssr_content": self.ssr_content
             }
 
 
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 7e3994d..e57be46 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -39,7 +39,7 @@ def test():
     try:
 
         log.info("Begin call of Low Fare Search *************************************")
-        origine, destination, date_dep, date_arr = ("CDG", "DTW", "051119", "071119")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "121119", "171119")
 
         segments = [
             RequestedSegment(
@@ -124,12 +124,12 @@ def test():
 
         # message_id = session_info.message_id  # is the message_id to use for the all others actions
 
-        traveller_infos = [TravellerInfo(1, "Amadou", "Diallo", "Diallo", "03121983", "ADT"),
-                           TravellerInfo(2, "Khouna", "Khouna", "Fall", "03121976", "ADT")]
+        traveller_infos = [TravellerInfo(2, "Amadou", "Diallo", "Diallo", "03121983", "ADT", "P////17MAY12/M/19FEB26/ABRAHAM/SELAH"),
+                           TravellerInfo(3, "Khouna", "Khouna", "Fall", "03121976", "ADT", "P////17MAY12/M/19FEB26/ABRAHAM/SELAH")]
 
         reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
 
-        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info)
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info, _segment.company)
         passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
         log.info(passenger_info_response)
 
@@ -155,13 +155,13 @@ def test():
         for pax in passenger_info_response["passengers"]:
             pax_refs.append(pax.name_id)
 
-        log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
+        #log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
 
-        response_ssr = client.pnr_add_ssr(message_id, pax_refs, "P////17MAY12/M/19FEB26/ABRAHAM/SELAH", company_id)
+        # response_ssr = client.pnr_add_ssr(message_id, pax_refs, "P////17MAY12/M/19FEB26/ABRAHAM/SELAH", company_id)
         # response_ssr = client.pnr_add_ssr(message_id, pax_refs[1], "////23JUN88/M//DIA/BALLA", company_id)
-        log.info(response_ssr)
+        # log.info(response_ssr)
 
-        log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
+        #log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
 
         log.info("Begin Call of Pricing Segment for some passenger ***********************************")
 
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index 63546d2..cb34970 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -23,7 +23,7 @@ def test():
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-    pnr = 'NI8MVA'  # "LTGPDG"
+    pnr = 'NZSAZ8'  # "LTGPDG"
     try:
 
         message_id = None
@@ -45,17 +45,20 @@ def test():
             if fnc.get("otherDataFreetext.freetextDetail.type", ot) == "P02":
                 email_tato = ot["elementManagementData"]["reference"]["number"]
         log.info("2. Update passenger")
-        # passengers = [p.name_id for p in res_reservation["passengers"]]
+        if email_tato != "":
+            response = client.cancel_information_passenger(email_tato, message_id)
+            log.info(response)
+        passengers = [p.name_id for p in res_reservation["passengers"]]
         # for pr in passengers:
         # log.info(f"begin  of Calling update Passenger Information for passenger {pr} **")
-        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, email_tato, "Amadou1994@gmail.com", number_tato, "773630684")
+        res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, "Amadou1994@gmail.com", passengers[0], office_id)
         res_updat_pas, session_info = res_updat_pas.payload, res_updat_pas.session_info
-        # log.debug(res_updat_pas)
-        # # log.debug(session_info)
-        # if session_info.session_ended is True:
-        #     log.debug(f"Session closed after update passenger {pr}")
-        #     return
-        # message_id = session_info.message_id
+        log.debug(res_updat_pas)
+        # log.debug(session_info)
+        if session_info.session_ended is True:
+            log.debug(f"Session closed after update passenger {pr}")
+            return
+        message_id = session_info.message_id
 
         if session_info.session_ended is False:
             log.info("3. Close session")
-- 
2.17.1


From a6cb7189e6cd3fddc75fd44fcbe31683dd499c92 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Fri, 8 Nov 2019 11:55:04 +0000
Subject: [PATCH 43/46] low fare search final

---
 pygds/amadeus/client.py                     | 22 +++++++++++++++++++++
 pygds/tests/amadeus/test_low_fare_search.py |  7 ++++---
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 9ae0c33..b3eee67 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -389,6 +389,28 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         return response_data
 
+    def create_tsm(self, message_id: str, passengers: List[str], segments: List[str], retrieve_pnr: bool):
+        """
+        This service is used to issue miscellaneous documents (MCO, TASF, XSB and/or EMD) and tickets SIMULTANEOUSLY.
+        The ISSUANCE TRANSACTION is the process whereby the reservation and the pricing information are converted into
+        contracts.
+        CONTRACTS are issued for customers buying travel products; those contracts tie the customer to the travel
+        provider (e.g. validating carrier of an airline product).
+        :param message_id: str -> the message id
+        :param passengers: List[str] -> List of passenger tattoos
+        :param segments: List[str] -> List of segment tattoos
+        :param retrieve_pnr: to tell if we will retrieve PNR again
+        :return:
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if security_token is None:
+            raise NoSessionError(message_id)
+        session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
+        request_data = self.xml_builder.issue_combined(session_info, passengers, segments, retrieve_pnr)
+        response_data = self.__request_wrapper("issue_combined", request_data,
+                                               'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
+        return response_data
+
     def void_tickets(self, message_id: str, ticket_numbers: List[str]):
         """
         Cancel documents by ticket numbers
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index e57be46..e2c1e06 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -222,8 +222,9 @@ def test():
         # log.info("Begin Ticket ************************************************************************")
 
         message_id = session_info.message_id
-        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
-        session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        res_ticket = client.issue_combined(message_id, passengers=pax_refs, segments=[], retrieve_pnr=False)
+        # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
         log.info(res_ticket)
 
         if session_info.session_ended is True:
@@ -245,7 +246,7 @@ def test():
             log.error("The session is ended when place pnr in the queue")
             return
 
-        client.end_session(message_id)
+        # client.end_session(message_id)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
-- 
2.17.1


From 19ca984e2a4857c042b8eef76274e57f7573ef41 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Sat, 9 Nov 2019 01:12:00 +0000
Subject: [PATCH 44/46] old pgds

---
 pygds/amadeus/client.py                       |  25 +-
 pygds/amadeus/xmlbuilders/builder.py          |  86 ++++++
 pygds/tests/amadeus/test_issue_combine.py     | 261 ++++++++++++++++++
 pygds/tests/amadeus/test_low_fare_search.py   |   2 +-
 .../tests/amadeus/test_price_issue_combine.py | 124 +++++++++
 pygds/tests/amadeus/test_update_passenger.py  |   4 +-
 6 files changed, 495 insertions(+), 7 deletions(-)
 create mode 100644 pygds/tests/amadeus/test_issue_combine.py
 create mode 100644 pygds/tests/amadeus/test_price_issue_combine.py

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index b3eee67..f7b0862 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -336,6 +336,23 @@ class AmadeusClient(BaseClient):
 
         return response_data
 
+    def add_office_id(self, office_id, message_id):
+        """
+            add passenger info and create the PNR
+        """
+        session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
+        if security_token is None:
+            raise NoSessionError(message_id)
+        request_data = self.xml_builder.add_office_id(office_id, message_id, session_id, sequence_number,
+                                                      security_token)
+        response_data = self.__request_wrapper("add_office_id", request_data,
+                                               'http://webservices.amadeus.com/PNRADD_17_1_1A')
+
+        response_data = GetPnrResponseExtractor(response_data).extract()
+        self.add_session(response_data.session_info)
+
+        return response_data
+
     def pnr_add_ssr(self, message_id, passenger_ids, content, company_id):
         """
             add passenger info and create the PNR
@@ -389,7 +406,7 @@ class AmadeusClient(BaseClient):
                                                'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
         return response_data
 
-    def create_tsm(self, message_id: str, passengers: List[str], segments: List[str], retrieve_pnr: bool):
+    def create_tsm(self, message_id: str, passenger_id: str, tsm_type: str):
         """
         This service is used to issue miscellaneous documents (MCO, TASF, XSB and/or EMD) and tickets SIMULTANEOUSLY.
         The ISSUANCE TRANSACTION is the process whereby the reservation and the pricing information are converted into
@@ -406,9 +423,9 @@ class AmadeusClient(BaseClient):
         if security_token is None:
             raise NoSessionError(message_id)
         session_info = SessionInfo(security_token, sequence_number, session_id, message_id, False)
-        request_data = self.xml_builder.issue_combined(session_info, passengers, segments, retrieve_pnr)
-        response_data = self.__request_wrapper("issue_combined", request_data,
-                                               'http://webservices.amadeus.com/TCTMIQ_15_1_1A')
+        request_data = self.xml_builder.create_tsm(session_info, passenger_id, tsm_type)
+        response_data = self.__request_wrapper("create tsm", request_data,
+                                               'http://webservices.amadeus.com/TMCOCQ_07_3_1A')
         return response_data
 
     def void_tickets(self, message_id: str, ticket_numbers: List[str]):
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index 6f237b4..eb25d72 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -572,6 +572,30 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
+    def add_office_id(self, office_id, message_id, session_id, sequence_number, security_token):
+        security_part = self.continue_transaction_chunk(session_id, sequence_number, security_token)
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
+                <add:MessageID>{message_id}</add:MessageID>
+                <add:Action>http://webservices.amadeus.com/PNRADD_17_1_1A</add:Action>
+                <add:To>{self.endpoint}/{self.wsap}</add:To>
+                {security_part}
+            </soapenv:Header>
+            <soapenv:Body>
+                <PNR_AddMultiElements>
+                    <pnrActions>
+                        <optionCode>0</optionCode>
+                    </pnrActions>
+                    <dataElementsMaster>
+                        <marker1/>
+                        {sub_parts.add_multi_element_data_element("RF", 3, "P22", office_id)}
+                    </dataElementsMaster>
+                </PNR_AddMultiElements>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
+
     def traveller_info(self, ref_number, first_name, surname, last_name, date_of_birth, pax_type):
         return f"""
         <travellerInfo>
@@ -946,6 +970,68 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
+    def create_tsm(self, session_info, passenger_id, tsm_type):
+        message_id = session_info.message_id
+        session_id = session_info.session_id
+        sequence_number = session_info.sequence_number
+        security_token = session_info.security_token
+
+        return f"""
+        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+            xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+            xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1"
+            xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1"
+            xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3"
+            xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+            xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+            {self.generate_header("TMCOCQ_07_3_1A", message_id, session_id, sequence_number, security_token)}
+            <soapenv:Body>
+                <PNR_CreateTSM>
+                        <msg>
+                            <messageFunctionDetails>
+                                <businessFunction>47</businessFunction>
+                            </messageFunctionDetails>
+                        </msg>
+                        <mcoData>
+                            <paxTattoo>
+                                <otherPaxDetails>
+                                    <type>A</type>
+                                    <uniqueCustomerIdentifier>{passenger_id}</uniqueCustomerIdentifier>
+                                </otherPaxDetails>
+                            </paxTattoo>
+                            <totalFare>
+                            <monetaryDetails>
+                                <typeQualifier>B</typeQualifier>
+                                <amount>10.00</amount>
+                                <currency>USD</currency>
+                            </monetaryDetails>
+                            </totalFare>
+                            <genInfo>
+                                <productDateTimeDetails>
+                                    <departureDate>09AUG</departureDate>
+                                </productDateTimeDetails>
+                            </genInfo>
+                            <freeTextInfo>
+                                <freeTextQualification>
+                                    <textSubjectQualifier>4</textSubjectQualifier>
+                                    <informationType>47</informationType>
+                                </freeTextQualification>
+                                <freeText>NOCODE</freeText>
+                                <freeText>RFI DESCRIPTION</freeText>
+                            </freeTextInfo>
+                            <mcoDocData>
+                                <tktNumber>
+                                    <documentDetails>
+                                        <type>{tsm_type}</type>
+                                    </documentDetails>
+                                </tktNumber>
+                            </mcoDocData>
+                        </mcoData>
+                    </PNR_CreateTSM>
+            </soapenv:Body>
+        </soapenv:Envelope>
+        """
+
     def void_tickets(self, session_info: SessionInfo, ticket_numbers: List[str]):
         message_id = session_info.message_id
         session_id = session_info.session_id
diff --git a/pygds/tests/amadeus/test_issue_combine.py b/pygds/tests/amadeus/test_issue_combine.py
new file mode 100644
index 0000000..af0f447
--- /dev/null
+++ b/pygds/tests/amadeus/test_issue_combine.py
@@ -0,0 +1,261 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+from pygds.core.request import RequestedSegment, LowFareSearchRequest
+from pygds.core.types import TravellerNumbering, TravellerInfo, ReservationInfo, SellItinerary, Itinerary, FlightSegment, Recommandation
+from pygds import log_handler
+from pygds.env_settings import get_setting
+
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+from pygds.core.payment import ChashPayment
+from pygds.core.price import PriceRequest
+
+queue_number = "1"
+
+
+def test():
+    """ A suite of tests """
+
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_all")
+
+    log.info("Begin calling Client API *********************************************")
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
+    log.info("End of call Client API ***********************************************")
+
+    try:
+
+        log.info("Begin call of Low Fare Search *************************************")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "121119", "171119")
+
+        segments = [
+            RequestedSegment(
+                origin=origine,
+                destination=destination,
+                departure_date=date_dep,
+                arrival_date=date_arr)
+        ]
+
+        low_fare_search = LowFareSearchRequest(
+            segments,
+            "Y",
+            "",
+            TravellerNumbering(2),
+            "",
+            "",
+            ["DL",
+             "AF", ],
+            "",
+            "",
+            1)
+
+        log.info(f"making search from '{origine}' to '{destination}', starting at '{date_dep}' and arriving at '{date_arr}'")
+        currency_code, c_qualifier = ("EUR", "RC")
+        search_results = client.fare_master_pricer_travel_board_search(
+            low_fare_search, currency_code, c_qualifier
+        )
+        results, session_info = (search_results.payload, search_results.session_info)
+        log.info(results)
+
+        log.info("End of Low Fare Search ********************************************************************************")
+
+        log.info("Begin call of sell from recommandation *************************************************************")
+
+        itineraries = results[0]['itineraries']
+
+        list_segments = []
+
+        for index, flight_segment in enumerate(itineraries):
+            segment = flight_segment[0]
+
+            quantities = 0
+            for ptc in segment["pax_ref"]:
+                quantities += len(ptc["traveller"])
+
+            _segment = SellItinerary(
+                origin=segment["board_airport"],
+                destination=segment["off_airport"],
+                departure_date=segment["departure_date"],
+                company=segment["marketing_company"],
+                flight_number=segment["flight_number"],
+                booking_class=segment["book_class"],
+                quantity=quantities,
+                arrival_date=segment["arrival_date"],
+                flight_indicator=index
+            )
+            list_segments.append(_segment)
+
+        log.info("Begin fare informative pricing without pnr")
+
+        recommandation = Recommandation(list_segments, TravellerNumbering(2))
+
+        # itineraries = [
+        #     itinerary
+        # ]
+
+        result_informative_best_pricing = client.fare_informative_best_pricing_without_pnr(recommandation=recommandation)
+
+        log.info(result_informative_best_pricing)
+
+        log.info("End of informative pricing without pnr")
+
+        result_sell = client.sell_from_recommandation(list_segments)
+
+        result_sell, session_info = (result_sell.payload, result_sell.session_info)
+        log.info(result_sell)
+
+        message_id = session_info.message_id
+
+        log.info("End of Sell From Recommandation ******************************************************")
+        log.info("Begin Call of Add Passenger Info ****************************************************")
+
+        # message_id = session_info.message_id  # is the message_id to use for the all others actions
+
+        traveller_infos = [TravellerInfo(2, "Amadou", "Diallo", "Diallo", "03121983", "ADT", "P////17MAY12/M/19FEB26/ABRAHAM/SELAH"),
+                           TravellerInfo(3, "Khouna", "Khouna", "Fall", "03121976", "ADT", "P////17MAY12/M/19FEB26/ABRAHAM/SELAH")]
+
+        reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
+
+        passenger_info_response = client.add_passenger_info(office_id, message_id, reservation_info, _segment.company)
+        passenger_info_response, session_info = (passenger_info_response.payload, passenger_info_response.session_info)
+        log.info(passenger_info_response)
+
+        if session_info.session_ended:
+            log.error("Session is ended after creat pnr")
+
+            return
+
+        # log.info("End of Calling of Add Passenger Information ****************************************")
+
+        # log.info("begin  of Calling of update Passenger Information ****************************************")
+
+        # res_updat_pas = client.pnr_add_multi_for_pax_info_element(message_id, 2, "Diop", 2, "MOUHAMAD", "ADT", 1, "10JUN78")
+        # log.debug("update passenger")
+        # log.debug(res_updat_pas.payload)
+
+        company_id = _segment.company
+
+        seg_refs = []
+        pax_refs = []
+        for seg in passenger_info_response["itineraries"]:
+            seg_refs.append(seg.sequence)
+        for pax in passenger_info_response["passengers"]:
+            pax_refs.append(pax.name_id)
+
+        # log.info("Begin SSR DOCS element to the flight segment for ADT Passenger**********************")
+
+        # response_ssr = client.pnr_add_ssr(message_id, pax_refs, "P////17MAY12/M/19FEB26/ABRAHAM/SELAH", company_id)
+        # response_ssr = client.pnr_add_ssr(message_id, pax_refs[1], "////23JUN88/M//DIA/BALLA", company_id)
+        # log.info(response_ssr)
+
+        # log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
+
+        log.info("Begin Call of Pricing Segment for some passenger ***********************************")
+
+        price_request = PriceRequest(pax_refs, seg_refs)
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        session_info, res_price = (res_price.session_info, res_price.payload)
+        log.info(res_price)
+
+        if session_info.session_ended:
+
+            log.error("Session is ended after price pnr")
+
+            return
+
+        log.info("End of Calling of Price PNR *******************************************************")
+
+        # log.info("Begin Creating TST ********************************************************************")
+
+        tst = res_price[0].fare_reference
+        message_id = session_info.message_id
+        res_store_price = client.ticket_create_tst_from_price(message_id, tst)
+        session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
+        tst_refs = [tst.tst_reference for tst in res_store_price]
+        log.info(res_store_price)
+
+        if session_info.session_ended is True:
+            log.error("The session is ended when storing TST")
+            return
+
+        # log.info("End of Create TST *****************************************************************")
+
+        # log.info("Begin Add Form of Payment *********************************************************")
+
+        message_id = session_info.message_id
+        # fop = CheckPayment("CHEQUE", "MOO")
+        # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        fop = ChashPayment(p_code="CCVI", company_code=company_id)
+        res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
+        log.info(res_fop)
+
+        log.info(client.create_tsm(message_id, pax_refs[0], "f"))
+        log.info(client.create_tsm(message_id, pax_refs[1], "f"))
+        # if res_fop.session_info.session_ended is True:
+        #     log.error("The session is ended when adding Form")
+        #     return
+
+        # log.info("End of Add Form of Payment ********************************************************")
+
+        log.info("Begin Save ************************************************************************")
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        session_info, res_save = (res_save.session_info, res_save.payload)
+        log.info(res_save)
+        pnr = res_save["pnr_header"].controle_number
+
+        if session_info.session_ended is True:
+            log.error("The session is ended when saving PNR")
+            return
+        log.info("End Save ****************************************************************************")
+
+        # log.info("Begin Ticket ************************************************************************")
+
+        message_id = session_info.message_id
+        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        res_ticket = client.issue_combined(message_id, passengers=pax_refs, segments=[], retrieve_pnr=False)
+        # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+        log.info(res_ticket)
+
+        if session_info.session_ended is True:
+            log.error("The session is ended when ticketing")
+            return
+
+        # log.info("End of ticketing **********************************************************************")
+
+        log.info("Begin Placing PNR in the Queue ********************************************************")
+
+        global queue_number
+        queues = list()
+        queues.append(queue_number)
+        result_queue = client.queue_place_pnr(message_id, pnr, queues)
+        session_info, res_queue = (result_queue.session_info, result_queue.payload)
+        log.info(session_info)
+        log.info(res_queue)
+        if session_info.session_ended is True:
+            log.error("The session is ended when place pnr in the queue")
+            return
+
+        client.close_session(message_id)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index e2c1e06..2c8e24e 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -246,7 +246,7 @@ def test():
             log.error("The session is ended when place pnr in the queue")
             return
 
-        # client.end_session(message_id)
+        client.close_session(message_id)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
diff --git a/pygds/tests/amadeus/test_price_issue_combine.py b/pygds/tests/amadeus/test_price_issue_combine.py
new file mode 100644
index 0000000..cb40c42
--- /dev/null
+++ b/pygds/tests/amadeus/test_price_issue_combine.py
@@ -0,0 +1,124 @@
+"""
+    This is for testing purposes like a suite.
+"""
+
+import os
+from pygds.amadeus.client import AmadeusClient
+from pygds.amadeus.errors import ClientError, ServerError
+from pygds.core.payment import CreditCard
+from pygds.core.price import PriceRequest
+from pygds.env_settings import get_setting
+from pygds import log_handler
+
+
+def test():
+    """ A suite of tests """
+    endpoint = get_setting("AMADEUS_ENDPOINT_URL")
+    username = get_setting("AMADEUS_USERNAME")
+    password = get_setting("AMADEUS_PASSWORD")
+    office_id = get_setting("AMADEUS_OFFICE_ID")
+    wsap = get_setting("AMADEUS_WSAP")
+    dir_path = os.path.dirname(os.path.realpath(__file__))
+    dir_path = os.path.join(dir_path, "..", "..", "..")
+    os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
+    log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
+    log = log_handler.get_logger("test_ticket")
+    pnr = 'O937WX'  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    # m_id = None
+
+    client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
+    # import web_pdb; web_pdb.set_trace()
+    try:
+        message_id = None
+        log.info("1. Getting Reservation****************************")
+        res_reservation = client.get_reservation(pnr, message_id, False)
+        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+        log.info(session_info)
+        log.info(res_reservation)
+        if session_info.session_ended is True:
+            log.error("The session is ended when retrieving PNR*********************")
+            return
+
+        # company_id = res_reservation["pnr_header"].company_id
+        log.info("2. Pricing PNR ***********************************")
+        message_id = session_info.message_id
+        passengers = [p.name_id for p in res_reservation["passengers"]]
+        print(passengers)
+        segments = [s.segment_reference for s in res_reservation["itineraries"]]
+        print("****** Values passengers and segments")
+        print(passengers, segments)
+        price_request = PriceRequest(passengers, segments, "PUB")
+        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+        session_info, res_price = (res_price.session_info, res_price.payload)
+        log.info(session_info)
+        log.info(res_price)
+
+        log.info(client.add_office_id(office_id, message_id))
+        if session_info.session_ended is True:
+            log.error("The session is ended when pricing PNR")
+            return
+        if len(res_price) == 0:
+            log.error("No price found")
+            return
+        log.info("3. Creating TST")
+        tst = res_price[0].fare_reference
+        # message_id = session_info.message_id
+        res_store_price = client.ticket_create_tst_from_price(message_id, tst)
+        session_info, res_store_price = (res_store_price.session_info, res_store_price.payload)
+        log.info(session_info)
+        log.info(res_store_price)
+        # tst_refs = [tst.tst_reference for tst in res_store_price]
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when storing TST")
+        #     return
+
+        # log.info("4. Add form of payment")
+        # message_id = session_info.message_id
+        # # fop = CheckPayment("CHEQUE", "MOO")
+        # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+        # res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+        # # session_info, res_fop = (res_fop.session_info, res_fop.payload)
+        # # log.info(session_info)
+        # log.info(res_fop)
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when adding Form")
+        #     return
+
+        # log.info("5. Save")
+        # res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
+        # session_info, res_save = (res_save.session_info, res_save.payload)
+        # log.debug(session_info)
+        # log.debug(res_save)
+        # if session_info.session_ended is True:
+        #     log.error("The session is ended when saving PNR")
+        #     return
+
+        log.info("6. Ticket")
+        # message_id = session_info.message_id
+        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        log.info(client.issue_combined(message_id, passengers=passengers, segments=[], retrieve_pnr=False))
+        # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
+        log.info(session_info)
+        # log.info(res_ticket)
+        if session_info.session_ended is True:
+            log.error("The session is ended when ticketing")
+            return
+
+        # res_reservation = client.get_reservation(pnr, message_id, False)
+        # cancel_response = client.cancel_pnr(message_id, False)
+        # session_info, cancel_response = (cancel_response.session_info, cancel_response.payload)
+        # log.info(cancel_response)
+        # if session_info.session_ended is False:
+        #     client.end_session(message_id)
+        # elif sesion_info.session_ended is False:
+        client.close_session(message_id)
+    except ClientError as ce:
+        log.error(f"client_error: {ce}")
+        log.error(f"session: {ce.session_info}")
+    except ServerError as se:
+        log.error(f"server_error: {se}")
+        log.error(f"session: {se.session_info}")
+
+
+if __name__ == "__main__":
+    test()
diff --git a/pygds/tests/amadeus/test_update_passenger.py b/pygds/tests/amadeus/test_update_passenger.py
index cb34970..9d89347 100644
--- a/pygds/tests/amadeus/test_update_passenger.py
+++ b/pygds/tests/amadeus/test_update_passenger.py
@@ -23,7 +23,7 @@ def test():
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_all")
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
-    pnr = 'NZSAZ8'  # "LTGPDG"
+    pnr = 'O95J97'  # "LTGPDG"
     try:
 
         message_id = None
@@ -62,7 +62,7 @@ def test():
 
         if session_info.session_ended is False:
             log.info("3. Close session")
-            client.end_session(message_id)
+        client.close_session(message_id)
     except ClientError as ce:
         log.error(f"client_error: {ce}")
         log.error(f"session: {ce.session_info}")
-- 
2.17.1


From 0ca7f527f2ce080c4e3a957570fd15537a6e8290 Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Thu, 14 Nov 2019 16:09:27 +0000
Subject: [PATCH 45/46] add form of payment

---
 low_fare_search_fop_v1.zip                    | Bin 0 -> 92706 bytes
 low_fare_search_fop_without_combine.zip       | Bin 0 -> 58399 bytes
 price_ticket_fop.zip                          | Bin 0 -> 27579 bytes
 pygds/amadeus/client.py                       |   9 +-
 pygds/amadeus/xmlbuilders/builder.py          | 170 ++++++++----------
 pygds/core/payment.py                         |   2 +-
 pygds/tests/amadeus/test_issue_combine.py     |  14 +-
 pygds/tests/amadeus/test_low_fare_search.py   |  12 +-
 .../tests/amadeus/test_price_issue_combine.py |  10 +-
 pygds/tests/amadeus/test_price_ticket.py      |  81 ++++-----
 ticket_price_issue_combine.zip                | Bin 0 -> 36056 bytes
 11 files changed, 139 insertions(+), 159 deletions(-)
 create mode 100644 low_fare_search_fop_v1.zip
 create mode 100644 low_fare_search_fop_without_combine.zip
 create mode 100644 price_ticket_fop.zip
 create mode 100644 ticket_price_issue_combine.zip

diff --git a/low_fare_search_fop_v1.zip b/low_fare_search_fop_v1.zip
new file mode 100644
index 0000000000000000000000000000000000000000..dd122658850f60fcced6928530582936de6d8d15
GIT binary patch
literal 92706
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
NzIQ>W0R#T`{{e9yl+FME

literal 0
HcmV?d00001

diff --git a/low_fare_search_fop_without_combine.zip b/low_fare_search_fop_without_combine.zip
new file mode 100644
index 0000000000000000000000000000000000000000..a328862d5d6e788d74a45adcb015d1ee4c848e93
GIT binary patch
literal 58399
zcmeFXWmF{1vM!7>xWmBU?l8dM?lQP*<L>V6Ft`lv?(XjH?(Xh`-JW;v^WAgzI={ZP
z?!Vh>WmHB~Rb+H_##7l(g`5;P1Uksy&sT42*?&6!77!qWAT~~p49ZFfAkca)6WagP
zoLu2RKp~F7K|uZya{qYv0`djK<G*<@=>`Qs__qfuH%l86dSLs<6^`q_T>U-%hpP+i
zGl$jTq)%R-pizP(kD}_lMa{~JibR20>^s<P_Q?u#vViIp-4PVx6ea4<*GHi^$l@R3
zEMN5x7UzF#xTo_TEfr0bX@Vi$D}u=Q^@F}>%}$baP=6tI8HJqW{<>PHet$In%A3C2
z$(+vB$mgEVlEw4s%k!&o!SB;$hx@0tH3R{Z6G8K;<!LjhiQ~8REVqw$qWsz7nw%NO
zp>(z$Va&o9$-K$b=+ODXr;NJoM6E1tT{tk2OawpKM=a8v>)@~}9=k-1_u5`aeAN;p
zYZ_&1{AF)n`daWx;!qHfj^34+m&PmEt^qvQOSK}Eq_WiV>YPVDKANcy$9<*AmT+3I
zm!Eq?eu*=^Pk1i(;6KvXc;;Dx(78G<WHUG{-;vr;`0h3{W#xqq5bIx3H+!45JR14%
zR~0{3?!f26zJjcEjF7IZo-D|p8M1o0!UtdOo^0O8bH#v~6L3w%$ih9x)!^yELi(!L
z&SU+|vL!(FjdW*3x=<hGk(c!hA>HN5wET<+*#C~}COg#_A!haU_qGZ9e)rvy$0g6z
zm@P})k>Pdm$;yYvF&A1t-tdBMAVVdRoa*-4R{9D&5|VRV8Flt;+2}x5;Aqv<wNJ58
zN?mg4%=5gppVDM7x7H4A&kCmr8Q~X5wX$1JnZ;B8;n0TUbG6qL+o#_k4Co;3a$w$Q
z-6l0jP_CR7Qr*coAIKm`WVA;n72R;|yo<2@<KYc9->wUSx3IUF)ubS~6C233u|aic
zL0oGf-pGBYbm=gzl@{?~wvF)5F|Ietj7!z#iO=Y_3)(XiDRCjU(@O0gN;YJmJ%{@c
zK#{C08bB-#+Q|{*!m7G`8z$Hgo@wKQp<G)f6v4cO7H2_ZO{`#CS$(IN%uIcY(pbp0
z*$n9rt{oTgA-6GfcBbZYeXleYD;CB;UGf%WF~Tux*|uuOEIcO(5vn4%l_?*{r781G
z)G0T#cX<M8h~U^n+SG;>&>b|xL2&T_NEqj+Vb6yUZLs#RK}$?;3#jK^Jj==tKQSL6
zol}3ZsMEzkCOEv7t`eC)?x9H*&Sb4+Q3v%3Q>Fx)S*LZOkG9HPTF<^SO3&AWok}I#
z86)K!xw#6CG^m8ot|MQB6Jn^B{~)3;fYixt(|h^q@tQP~*+4%%Ed#)ktheb`!&yBE
z>mw0pBhM^R5U6*d9cxG7YI3{wexky=(ukc!j@i<SVam1qk*Xv<Rjb6=7U)54B7|@K
z#Z_4;yx4`TX{Bluhh$Nw-K^WBga~Jw`IZtmKL)`0!FEePz5WT3b)Yx{k`*iF7U9bf
zBZgvMR19HD>bn#{foNm5TRoMFDXFqR>>g_Ou!W~g>%!H*vV@W~vYP&|(N244LU(rB
zrB!b9J3(8loj!d;QlKAjsCuI^C5{2N9g%Q;otnTV+;`_#)Ziw926wVz@&drL5F)n@
zcP$Y=&z!=0i-S-}-_U#5`VPV?gd`6tt9k<ruAF%c?~@vI>dQ5DAvwmiBTXm7Td<Qc
zdbdf!WU}uR<TJ6yVt9hkceJq^@J<#pMAYjPas<fh`Jg5UPqSHE&TVFC9N6s=I2)K}
zHk(<?8Zl-UJy1I85{XtNeoB3vW^fJzzCJs2%>4)nYJUaas_^o|{W3%)QO^xC?H-*T
z@0px=7aDGab4w|mg}kaOMD=E(Wk_wRUNvp>yYDI><D>DLEUPPvsL7^Vp*1Y^b92&U
zt0`ZZQXab9NSF(V>eM^F4#ec#{TL${9a`ErRC$7V>?%J~N&)E{hVh=3n6MbW4rwMK
z!de!>v~HFE#b8JTYrm;TZus$a)DILX9II=qcGZWZRK(f6dZXA_jU^=}Q-S<-t4L+k
zP%-7)CT$gT#4wF{`s?C5s5))jvcAXo0px>PL_~rCT~xuP>`Wl>n(#8dVS02!TfKBN
z$jxh+qnAVI)|SK|*{%bjw-2=TM`5Tczn?JdUI0B3%+1=lu`Y%sxPI(D=34$vnR+Uf
ztqF!jyi>z4im7E?aEM{=720_{cQ|FI_v|%$cP7KHTq@64H0>2~1gUBp*vIz+_^q$Y
zPsz-lWx7)~gXauJuDH4;#=wrr@93JY=n0uIY<&K~Yxe3)1_R1sh1hfSwa6V!<@1)B
z%nlQxDilS1uexq}$TRGs7(B>D3@^CyE%l_*&BK)%-Oa~Y)ito1uR2Azx}r$fzL5b+
z*2On9X<h{4TTJi^)#J|82Eb`dl}&V8twBxEt6Vpk4>T!f*0r*5u~o&8r}wr;4s2U6
zu(yq=3>DEgw3J0WZ8B3hX?lWxrky<GVi#9^2Gh)f#lsbrrSHHoS-P&g6}(|Sxl+rJ
zV7T@~dDqe9(+K|VAYCEewrTZlM7_R}E>VTPdMw71z$+AOh%5PN9;q$X);z$`<N{WP
zL*602?Tclf^(xVu9-?jOdCfGkUi33oVsIv*;OEz2QbiYe!?>KbC?WDu%!A}}L*n2N
zlde)FMDp{J(o;RpKozj;VT!e7%p(?hQ+*<y*ZS;QwY0nK0YN~YfmZsRd3jLi=UYfO
z_&d6<BB32WZ*skZdZl@IcZR(mGg9!QCFVQFT_;iv>0#7GG(OdY$rPWiY@U_V_GilF
z?>lm>xz|bcYt%~F%eVNOt_{T9Ubo+^>tA>vqKptz#-u&3!tU@WODWcZcC*|soda?s
z`Sm%#=EtNr!jAX^!n-(d6`YVG)}PF-kLkcJR~{6P<w{#~YjgHYj4sEIV$_9%p@er~
z%>7oKaNfQ`ZDI`#jLBWt6RKso=4@STg(v%TbiLo_RIY1n?T8p$dTR4)pSO?e`)c+b
zMa`hO>YPRRZ<?mK&i3%W_Q1R<Ne3f#Rc1u>9DgXy8s6M{b1TUFV8nrGr}eYN61*24
z!s9v~^y{+KWlj%{fy;{xFfmwjkS8Jc`ugT78vot}eY^zn!EWKQddM;KIaP(mZQ?V|
z?eR7!YQ@JlRY<}u6dZNs;qCfa<(OaMTe3S6?OXx7VeV`SNMzE2-W&@^a(Y#5dei{}
zzq{3VK2wOVy#4axe!T>UYo*^uK}L5wXD@nthe($sflfDXr_VIM9magP`2zdGD?OaV
zlU5~#U14te&KdFXjJ2zh2p&U8*z>thO<|@iBl>wmjr`F8Lq4lsS&iXAaAFE~a*Pj$
zmmyPESgkbKVC(jM(4Z17*?q{%*0U1yMl<vnJ??>eT3BV+J4(EN@oI{X{rRfDAqyE@
zHai$irZnG*>0zf&4#}KVL$t#I?Ln_yMEfCl#?m>LKCmT+4SQ4eeH(=@2D+DuAq(tB
z>pp1Dl9*RTaoG5`=4SZVkw@?czhZ{MuX$)_iUj=`(~R~pVOQgNQ&RvRLJKo1IsHG`
zl~tT<RwPbxW7<``#ZzZdQtYGR59x#%LaCl6y#0ko%PF$4J)DCK%@JZ~D+9+n%`j{s
zDlVQp_fEZBNmsop%&ajp$|F)>Lq4gkkMNCc5i9U6Z?FIyoW+%@KwgkBRhf5eL+sin
zAzUqOG49ZdmmmJubVLHjv0=${ZbWM7Oya0$8$3S30pZyR?O<HsUnCrcK3VZN%nZ?d
zb_pfE$sXmUu!*5!6Z!3`cF6fRbBdI$23*l)CbwlX!5)UW^ah7e3?T&HnV7Hy;U`D?
zasyh7?~fy~n4cTP)<nt*xJ1drj*57`2y9{-6qB~?42Q_hVW*>^6=QE0E*b8$PFjk)
zCZB%+K&Ra3GT<lSHw_*?XF7chcukIbX9}&VAbWy^aC;5*i)rvL)HgH#jv^F|Un(+9
zcz!6WX0H)jc8)k)gqa~8E*Df1%){*XT826wl}FK61;=2!%PI(B?=Dovr@(2*DzJrn
z57`Y6X5qhK_hE=$>&YWonv>{wvU0g+_r(7dw<Hn=fqFZcx2TLSI8U3-;>Ldm+WD<4
z@yrN{zU%F*H&dFzLM_wHb{%cY&wc2HE7TbLFz1T!;RZ?LtAwL?r7+9AM#)c!c1F($
zi8f|aH5aX=<EM$of|b424$-0^1kUwr`8HN)t*1iOHl{!1PXMip(Q@r9*41frmNVli
zQ+w&X#wqoTO_97wgvy_l#`o?Bd$aqTm@Y=1OzyVWR}ORry1j?S1gj9q$+mV~Cw-I1
z#M7NokWt>zU8G<P><XY*l9aeygNW@rGc`lc;aMoJ8{JRFFe9YFIHHn*TE4CscrS={
z?1D2CHes!TFKA}j*HYKV$nG^=+byJ?sP-*JZE{38U8jM%hHD01GmR2~MJCF-L)jLz
zl=h^so)@HV@-AQ=oFq*Qm!DJEkXI!0x>(2#LCcegm4w?A#2{q&Dq%%qW^Kw`9VcCF
z7fXLKR<i*wK|<V);RX&MpMO$49iT&^Q0>0IohB0DJbyvY|6HTNs{Pgw$7y`rL0wu|
z0z3A7G%ZTrm`<HnyVfgj<#_$=%4p1#Wy(AQbF3#k4N*mpTkVH-c4_W#c;$Bt%I!HQ
zj%FPKQljv3DRQ?T-rQzAK7*{l{j;|y`XL#d#8;!>F>Ql(7KWXe<zEs~-xRvGGzk<P
z$r^Fo`(cTRQ(p~jbA(SbaOjzTLpxV@6CKcSbBl+3`x!t$sufv_FWeEggS}s`N7*Mp
z*>}nHj8sgwhxp}6<I2}M1<U_-viTTWRrE}I%MwRbt({@7fg8S*bd1?`MtdiyJE88+
zVETfO$7J|Vj<Q0##`s)|UYIfa35XSoLoUJwE&?@bJR+;=4wX?|7&F=FCp%;2HK+E0
zb}UU_KD5Pcxa?sE^03(UOl2_;=#g%DAwiB<$!!MF;SL#A{L3$}GASRY`hAY0lxCE*
zvvQ=2nM{OUgKsN;&{BE2c&i319vldjMN;Gm?KmD+5J>L5dZ7_lch}cF?3>xg8zg8Q
zGxYtcV40?ZcPVGG(COt*Gx>r7dd!E9WBYG#-8*8L<x8}G$epoKhSf;hcauKf)P7lC
zyTm#UdXCMpgK`x?t`{C;i#+Pt{8X~-303R4WG5c+zQxR;=>%g-7bV|NGl3~}9V}8|
z)fH#hu&7+80jE0HO!MYB(82gZ<5HGuE6PjqGUcKv^%N{o)NjT9D-aw$hHcmZE+opE
zK3+bI9!E%RV1gj;(3F1tAs3VKNAa}WT1Z4OU7=ynxZjPPTMU29Wd8m4T>;F(tGpT+
zKt+5S@6AuZs|+OE>7_#P*+HR9L5>C2>81JEJhrj*={~dc7N`^3JNoILm)N2Vsy5xt
z*J!GJr#o<@{CUOigjF|Y8QjdD?TM53+QW;IGt}>I!*f&J8bRAp#ot(9kK38OtSk_S
zkj##+8m~k_x8<bv^g(b{M3Y&eAEp)E-9{?Hj>@mbvv^#1JF<GnE{WV(yIUDO>CM>>
z{uGX2KOohBN+cy5JY8#c4lucsn_yRn*6BS?$&23rjKATer9W)i$LftPO!&>1K9;3F
z+#s^8JLdE)zCBr&v~V?<Z{wyn!J8JbxI9)OiK5|bnkpF^R=TWCv}w09czXIwmuNfi
z)bSnvFb@zd>WFaB*0OJi?r=cV(BpFDbhI@$&S<lOulxf3OCZlnLJKPtx6jwuXsTb;
z4k4n9jdtu@K*^54yp0gLt(*U-^?D;Y7!vUQQ8>e_dHrj;K~N!>UW4)^?J;`>p3JIu
z<n3iZN@DV$*ldF`YR<u;fKHyY-w7{HFPsIH)l_9p*A=EpIEkJf5|8&)@z~}g6x#uM
zl}5FnHeyr+&5LwVEN;yj{TR-IvgTLRsq^l4@4>~FK5$7XLFnFB>o)eO2GnKsE>axj
zG)5#e-(J3H=U-M2X4~8qOi)b&lC7d|VT{q*Za3e1JzWn5x?KHb5s@`}*T+f^$)_ZL
z@5f~tBRASGK2!6`q^x~7GD*y5lT+K?geG<Tl3}>~y(~Mof|O1rs-5GmapIMp>mN8n
z;$2f2UjaG-*M4O^D~;m@2jSSueGBg2^Nm4NV4P{Us>(5ri3(YztB^fhFcHhKut0pc
zNrczxc#~7BX@f?CI#sY*1p`vlNxV32nQTWu*$jXprI*QC!t6Q2QW<WK5qir@BkrKG
zLbU*1RU6PHQZstOAIz{?JZ>G}KNly_a;iual}H_fz4IHQ^Uot&i28R=*dBLf6XgQ6
zq_;#eAEOa~`mJixn;o#Db^F9DpO4v?$JIJ0cD(smwVRWt3HXCn^#>{uaJ*KDVJ?6K
z?`M>*@p|y~&W%v?q#(ax4obW-9i}g9+J@=*wNVyzq($JE5k7RN+O`N;y2B{#39GSC
zzrzCB538lq&cTLi4a+3|*L0RvjF+!oGyRsf{#OyWc934Yis|Rm;W?6%&gAhMg<6|x
zH!yNf3H6GX#j+oLHv^DqQj#~IWjeUbM8VxK_sa)s9~w7gR8cqzx^)_PZnyd!h@lUo
zcSL3>L3v><39$qnO-GYs{ZyG-S{eQTIGKiL3BUIyW`Kv%@3Y7(G7tpbu-oj0?QhsT
z-QYz>ffX3$Pl;%gJq3(SXL7f#Gpzj!q++>VZR3|oZX3Aw7-Q$wiAxhg+BxHwDsCIx
zwR8z98`M>40j>He8yB~&9K$q8D;xAcLp#t=0W=i<HBeWzkvV;)uS_H_4b0?DH@baq
znyY1E2+PDW*Jk*-t2B1K=|}G$zi1%qzYns6O8a}*+KQt^G0cINauTrNXfXl<<4F-Y
z@~bhqe7Uqt^JlgY-3i42Yf6G9Yw1DKFZ;1Uw-%#4b~a3)VU+IMzf3mGM&S84T1hEj
zB!?cX&+}9PxtCbUNBN;v289)aK?=={n0*rRcb~4mLM?BWmcNr+It{^dc@{)7N>kJ|
z9t*Te5Ewaag0=IPmg#wk@9;VRz)h7N3GUZr)@aFLloL&q{Qap<f2)k=t4@fUE5|p0
z)2q&vh5*9IMv76TupB#dTQn@A_k8F1l==5ySe`I>VZQ7bfiO*c6Z<i>jO}<x;`0ah
zVu%@j5?2dpvSqN_vZL%9I5-xsW=5KGhEUL(e8fx5j2On+G4`CB78xe~uP>T9;bkO+
zJ)&1q_gpp^*!x+e%sel3Ty-~tl1d)1K7z^v9b(w?z077Ars|bozvNG712}RCdT?V0
zsEe-SMr~9oevdk6>*Z@n96KD~G5OHv&S7JZJRA^eLkzB3hO@rlY>4uHEu1T6N@dhr
zVdcGOq6|{P!N$vL^CYy(=}Vl0ng5E{_hRTHfQo3-9YVIpJk`=2F}WKIyD6qjo{rZK
zZQ{Uc$V>ke!G*qFBSWW^FXD&N@F{`&hdyGP5zz~JKDy1&J2BS&kn3HDSly)a+q|p`
z_Ui}rYJoWmZ-XXbVjahnC$vZ>DeU|@0CfTKk8191&0`#%g=&|*ErjpX8w&~K^?g-+
zg6~#L155Xux+YlX{B;P3E2ZA5Di4#I)O#s(VnYhxff5v8{tOP{31v~@TU6T!!A;VA
zb=4+qgLwV=YCX3DqH{P$&FBLCe5uT=OnYBtX5{@Icl*8(Sp|R<1AQ(u*YYxNngb=c
zwH4|XT5BB+5&4I?3yNe|I?}hglLqI#o67}KIi4Ez5O2oi1)!OetEktOAXzU#)9nB?
z2GA}l3p3xMx<^Wos%u!l+unn=3PIJ9;NzjDa|uCJ5q(<<LDke##_lEkO=i!sCqWgo
zK9N-H?ZqE>sqcGh4^@LpLXd6!bG)DFkj@zU=&)5r&t+uGJ|5L&nx4MAY|Ca$GlmV~
zm~xXBW#%EpE77u)DWX2sKBefeXgP*Bg)LSe3Y2GpEo~A{eJt{Gu*D4WlW9DGnMXS?
zWJ?-&wYEa_H2zA4HH(4ikr=LFm%#@H=NFoy9*eE~LR?<jlrx<u24<#36o}Cf7pbm=
zm3S`IM5|m$Mw_7-Yuv6~uL)5u72;-JhOZdKvE>_aq^W_-BXx#$FHd|O5fU3jJ2kb)
zd|TYwxvJ4G6bpt;mhHNE<bQK@X+XmDIg(ov#uZ4R-j<m9P7UX^i*#cR=Y45WR03m1
z?LHeo3u$7vTQ-r0BP%mU;puPwa}`CM)Rv)<dKNlmXf^rAS_kv4F3ITuK)=ZJbF`8~
z2WxV_Apn_8_|3>0!{#AUsRpD|d<3yd!cB;UTh>J*O_il4CethF)2N2kaJMitIlTY!
zWxa<%LU&*VPvsL2e4F_m8OYIL0KmNaIP2DLs!*>ZL9+DB6+mU1cBQ&))J#M{Jw;DE
zVV<>o8EQ=`#5vHJYjF9trQ#0>L9@(e<v?V$U4a}j`9uyl?_7QkNM`GGlCRGl`2?m1
zivt$sbZ%U#uuRhw75aCEb-(nQtQ~e(xZ43z3<0WcRS^}3TV-f!lFrNeO5G~mu4B2=
zHjGRt=SH%s)0rigzXa>Ke<iwJIeqxcR~iuG0|^_P3rmYIsecozCxxgNKjBlx-M8Cg
zQ)XjU%5@_3ho@gs50DP_&a55EULjrqi%z9KK>+&@e8>5RKMbFR)?;Jf&VeNHM)4q4
zEixp>6%`tj5Bx#5FZ4jfmW}#F7s>)L7tgY_5;JY;PjOkQ`1dPC8l&2hpN~z_7rutI
z6WFHkXCJ<_m=cyXJcqab?&Sj_qcxaA3Qt9*g0WV_mPkyKL#x`Wg<`(X@5-&69Q{{U
zq<g409LQZ=0rWnK{WRJ9#6dR#$svKyR?f`Tu#KQK;`R|%v)2o>6X?x#;SD3L8v9>Z
z8rA!Rn0B6EoHg)8&;fjAKu&HdS#$=yb2zNhGCr7WnGN#w!#>ys{`_?eyHmOPh|S<J
znTZ>*nwc5cVICh^-WoD4I)FzaG;qaLn@awUu2drK9BwsuT|xc0t~Rw<7qb*fRnw`i
zo9zD(sW==3b{5_Vxp+k@rEGI|uEuENaZ+aGrv_i8h{%{10?$7vK+QJ)ygbo~ly8F_
zY_4X^mH3xypC}sTzEBGrXH>mpHt%I##I9~^;A$=lr^Mpp_|m&^`kezv(e)F5XKJK?
zepq8ExnJ{u^29W`!^6#|@${>Z4MIfBrAXHKRcGO<>X!4Ia_>?;nUCe#8S2eYO+eT8
zyQNSiU;C=@g9+o(axz~P*6KbFUotC4j0v&8=f_}Wp7#1~`Wly?GD5r#scko0%hWrm
z-eey=E3a#c;iY2XFzKG@r~)~>VO&WYCDX{X_7D-8QN*p3GZRW*UmZZ18XE0UN%?`1
zSC9r&Za?12GQt4|>z|a-kW(+8aJ$yesoMEYKk4>kQLx|VLulL28@8J&hMh2L?5!nV
zMMQpErlmUtTF8Sn;v?N{D?|;|VdzmTI^nSHh@iS?rjhgd^QX(W8(QUw*AcBN%o2sm
z$H+5*5i(PnfEGKFV)D0~knWmsB8Qg0@3cC>MIH>><lYpgHmv0mP$+4|eBE10xNhDk
z#BbO_gh~<hV_$g@@H<4hdD^^T@idfC$XFfU%EvQaaG5MZhkeDl1?c43WC95Kx?gvj
za}LcHI7dAil+P@Bx6P+Zmk|6u<@!GE)?ZqETbJEZ20)sEr||M9uCrZMypaN*mhU|M
zy&eP59!E-t%W7d|uEgTJsbThRN{qo@l+cEr(Buiqh+(FLWgXXR0<3YL;h<Uj%)YcR
z;&8aKHu7No(4P(Ii8f(b`SkGhM%a$7b1t&Vba?xG<Lq&G92&11vay_hyt}jH>}57Q
ze(pR9dHR$TOC@De=6;!}R8{sPT2(E0lmDZOcsfy5xY+vs+*#t;-ZEdwa8=2g^t}op
z@T>=*t*1TcUtw-Alq72e8Lm1@v0K7g+n}hP@I3Rb=7cLI8DC>Gb$BKy8iAwHIho7%
z5%gR60E84){F<+2bi^|;0C!JGU>@UPD@~U;;~;V=jdykib9ROYlQUJ2S@A#%E*Z;!
z`>@rv#AO|N=m-b7D=1Wl0(%tp4|aLXJ8o=f#a5P&?e$ie1s@S@CO-m2x{}12;b~t;
z4*tAleWd#l`DveTMC&O+-paYK_7_JX8>aTGKRqPggh+vkI=qnPjw9f`RndPm<k3>t
zZSAm$<1e63!Q}xzzl&0k7xIR3<>>7bqHU%0WoC7K@Gs7;X7}F<Xak(AS4B^=liGB=
z<g%9Vl5G=WFF6DxLs(uWJwv6ZYM8T#1DqlOwph{RwGlIYc4*d!6_?NM$7g{qv|B+H
z#+HP6WpT+6QJ*YM7uc3ASasN!&lsI7Eai0o7%z~ds`Nk1!%T)YA?(eqQLe~qcNP#k
znu7k*Bxnqpw}RE|Mlq!1tsWntP(Z|XgLH;MjysI{wBod%9VY+i7l>ocoD^fWi6UhZ
z1RJPw&w;RW3QuZ)-qPe|a1k&<A4j_iL_m^_`UZbAHE9aVLr(ze)@eU+JcG?(d~Fro
z7?C9968RH#O4b9}znytdPQtk_7AdQcnVo`Mj=6QDa-`QOV<qOAeg&lyk!i0-hntqi
z`q#`2&)HkVYkJB%cSwB&;WGrH+n>m==z8B$GdmMTJb_5^D%lyzn=@5CJN@YD3(ScM
zv|N!G^`PQFQ9AeUDrCiYVzR*iES>Fst3Z(b`(PEHe8*u+|4xo$INz>NQ{P>?4;}ob
z05P%3qImbKwaa6>XKoy_st8gT()|pviZbrNVs&=2Ti-))Pc{{rr7?Id@0X<@o-~=o
zYVN!3W{OVmhp0Oj<O!&8p)G;aJ%W11xZ@bDFw^4(g_Jl~z30?;XOrpb%jU|NtF#NL
zx*;czUoz3(9GeC5oUIU>FQu!Tjqar{yP8)M)!TTj>T~E!7bh}j_EQI~vg$ZHB1AL3
zX{BgQ96#U;7K}L2UXDH+-fuH)9%&4A2Tn}z*2B;<?Cg5ag=7#3XM5qn;lAVhNI>Y=
z=7Z5E$gw*|;<@(a8ARV;@R2;W`CUz*#!0~ch)f7<2D#zny2abI4a}9@M0E<frI_X4
zN#33zy4UyVagcZ>-M1fe&Jh&!S%B#oZXEiPYZd=RcB-^LT3|^{ZeJYzc~#;$?-JtC
zQPdi+{+Y!L+!q)3+^CLY=yR#I`uk>uf+V=Ak!8{sU8r2#7k*wg0?u5_1H2Eg5O1cb
zq9#D!&Ma;x@NhXL`v<PeRD(^oN#tTaY^t<|t>-0Ae=AF?C}}HVBpD>I;pL5M)OxlW
zzKYh(w7hJMCC!*-E^yK%1z@n@mG`<<o44{Si^O7R8&J!27a`c&cJPV|qN^wWyfuGw
zo%R2Wv;w}tev70Wm%@x=9EDGA8+0|(=_RW97N5kL@7>kJTX-yK`QttmLs*#QX=Gb4
zY@X|fmN6sJxvrnksH&@L3?kcaC_eG#uSPtf?qq$;!)ASQ!2xo?8!p!ba+-s9$eRtD
zpc_mK5C<7{Gt8Bdi*21NES1%+fI$nluSyb0CfB)by>Nb1CJ(<j%03^{F;eVRr1vZ-
zM3w^4k`7W~YL~`c_|08-tCctfS9Luq5_(W)GqbPu#*G`#TqE2V8bN%>%X_f+V~>8K
zlDP4dMS&p3`Sk?{+7l;s10rKQGAy~*QP9(w-WLXfPZH#3<qQjQ#C5ri`2R${)ICtJ
zczAp1L@fC`=#-9@gN2RNOj&=;xkBT$oyI&m+>GxV(5sZz&pAT}uPHT+Bp#Q~<)hNd
zo#*j^g$`JVnIQ?=<G6PxG09bEGtXYMkwY~|+xL~Y-ZMgJZrWg&hPxpV+JnCiCo~O<
zwD~#}(D7NajqdyZsJs8$)ZO$nhYj|$jM?S6HbEpgOZ!am_^{SheVR*~E8zM0BU`cU
z(B0T)+F~B+my8G2RcrIUIf2I!Zhf!wwd3*j{5Yq}+E*<UD4YP%*SKbSWR76aiP6lk
zs$CpRRU5UWm4M=1-g##ML}x$0NvEAQ1_ZdyKkw3cCXL(Qax8-K;kE1KX4x(T@~|aW
z1LI%rB9i0M$K>Z)<#CIS7R@zt#Y4|HN&C>vNG+$!3wy3nb;4-1wO~0tAB(29-cXni
z5$jbeL)9@8Bgp@Vmq(K}ZBR~QEz0SC!&|uMH+YMzxC?<!ND4#@eA;lf%d{Y?uJe{)
zDP`5eCkF}g$-cl@JDuxx(=dX!j!1O;^^B&6-*&re5cqOE8sT#Tk%ddx7}%1mJRzN#
z$T&jAGeKy%rF*UHna<SoeqtC`EFi74y^BKU@hwAV{d-MTVI2XxVq~k}L;dV4y9gvq
zp4gkdHiag59G2_WMt&O0E#{ZwK(~EphyXU7NdMnP{Q$rTsgnX>xwo_(`ax-~`A@0X
z7@G*s)#(nWX6rW9dL_pUU4e4Ra>+wEvKp!0fKuuOTL~P=nF`rccmT_<GJl;!bvvgz
z*jZ0yXUT`|vh(dNf2hwnW#uHc(%QA`&H8=$A7W0_>{u_Q#LR-<VLTo#Y!K@dp3(ga
zN(TdKx2tHMY2ZE{wXR+Czm6nd<d<IVKN@s+FL6-G-9MS{CkFX+8SQLM372RrM_nG{
z5ah(Kb%lpSS$mzxwx51e^3MrrQ>lb}XM{+yGl%?r_jJdSekfJoRAv-vs7VpdpChe#
zt+y;Ak$()8v&Km1-PfBT$nuaxw*^=(4u7b^gV5Or8Jg%QNC%`RvkF$(3pj%Z3$%H<
zgz3@JU4wmbsaM!5Bk_qQeb>1ilA`MBIW+ryO=dK4s9CiFKZKQRMNc&VUG8qTANUo5
zV%jFz=GB7icfPQ>xZi|%!Qn^*2G^Im2~Tki;}=tXdLu)LtBaO9CcAJG4%MRVC4WUa
zZw1}Yi}59V3}fy+6Bzyg*<5Z@ItVdQr0edJ6g`WeRWGAp2V1J~YtDpo>w0Xv9}BUj
zTl8IRM$T-|UIVvnnno^na;lVFZOYDU(Ux!rE={AChuM{C-Y#wD)`+*^K*QMOAz>BJ
zPzE%d{xytVT1#y39l6{Yx!BE9)?4X}U(~OUOSK*aX)M77v+ppqyJSaf=RYjR6LNGn
zu)vYmYHG^dDD93Tg+HpYZRpwy_HMx#*yl-;(=?u*ilQAW301W&tHj&yi8ib^%UiFr
zGq73X9zFU44J~$g|CpW;*sOh(0>+pWb^AS!pt3lP<mTUZZ_^WMt;XvYn&n`Z7WLVw
z%s&XKP-5vma9)l3J1*1oLaOdj3Qr6dF?qz<PV&kpHGQ$foqm)fQLUR?T7di-{Rqfh
zGt(Rt?kKG(%@A;M`blFlTV_JqQVR2D2eZO#p^srWuAjPyCbifUGGbBR0T;R_c`TbN
zHmH-y?{Kr10+gs7p1;y<ulN?5D`3)dUp6aG+bzRl68-`!s_kUSNFtWQ9{$!5e<@JJ
z(^r}yaXt)K03v%_-rufl6sMu=nrNh~?qa+rolrc9{t*Zp<`I3HA9OUvIa8~K;TY^-
z(3X--(DRcYn(UM~9VUC4C@khcL0QR_m6qaWg71SsP73-9#l|!5FeM1c-$Ka$T_X9P
zMV4s)E|GL_)HAT4bF|kpF#7)rCI745^6&9K3MIjTE}_5tEz|`2ceUofhWM-S{I@F1
zzdGE%hcGa*cQiBpS2<@P(B*%%|8V`kW4-xrj`mSOK=}SoN8jm;_3VuRR(cMOM)m+(
zdo$nw0N^)pHnIfh+vwRF0vwF=><vr-_C|J2Mh=eju2z=+6o5Vg3qQ?(?eFnF2JcYQ
zwAp1x_s#<NEf2}t{*+>%`~{ISUQMkCt2BNIXOAY77sqbFRWM$)wWkFVVtZE3s<80<
zoPOnbw2Ri1q)VE+<8jC9Sp<hUGb&d7MT8k`OBqlQnfe9hDG^F|URTv>;cFJjgTJY9
zNNFMihAWf9X{EG)0tx7iDXlp@oZLn~IaAeiXzTZ<1M@#oKQvpyqgJC-Q7}Y=vW6RW
z>|4rvQb~n9D(v8XPFNVGjtKV5I~t(kJ*|f4b~dGR(tc6<E#EvXhw1&?xI@@(pI*R^
zl&!YUP|QwbCiqON<bBaUKMMDp;m<micf(DGF&06J5)%N$WP@z!0Es@yoB#onKfxP1
zlK#lq=n?@q9v=|x@Lpr2XQ;v%{AD&7DY{`bUU}@acj&Jn-ZWFAQ3+A%EECZAWpv9c
z8J4cr+K17aPx@v8UDl39WSrKi`MXp$gl^Dy9-dab((o#;);i7u`K0T9B)+0t^=GYs
zp)kuG;&>cXuG1{{VK~kgPd$Ez5Q)bm!D4tFVzfL*sfwSL-NAoGrr}+42xhx~)IAcl
zm-oNaIR|~B0c!5CPF*g?7t_h)d4=2sQK!Fq<mrjHSwCiTvDEm%C2=i23LBx`nh{BB
zSw92>(O0a8(BEZ`%*(%c)|dADBE0x+fX5E;CYJWa-D%}fs8?0_TNSc<mruJ+?MI#i
znfHYCaP^0yOERj=*9$!^LP1*WC+aRSmPvd4VbTH=6J{R)w8EB<D87))iq*c6td1-j
z?qiul0D=2Qzuju(7mom&KDR-(Cd#77G{hodg{j~kTMJ#w?XmCHEZ>apb_*XD0*|gB
zO!A7^pjJ;JE9Qb5k%p4m7i^>*Zd}Mgl!@}`ycU}oV&o}1WD0&1<(&81A9UYzmPKWj
zB@(?;1P6Z4RDmJ|7chwC@UC3Imc1^Hnqal$i7G6?ugtx$9d$FA>lXY2K^M8ede^8p
zO_nb63c>j7+c&;rAhQj=Y#iu8BH8?^5lR;sfHg{BGL^$1WsV*2ES5W)6ZagUors67
zw?vl@H~MQ^NRoLdAPaL<<MNh&D9kg;qK`Z6eENl_wpEC-uJc=LG*O1U%owyFsdn1}
zwx)Q8=gLO1L=To*-ubx$XI)Lud=;uiz0n89`Jb0%<OocMTT@tO)3YIQFGs0U1Ci+y
z^T^jrO@{Ou)Gd)8)H?;-p$*i^CJUXaDLPd$HD3`Y8(n#q^w;etf7oS4r{%-CM@gQ#
za&IM#ZEsF2DBFIS^NMEEKAFyuUNES{F*MrZL!ztKxd_{5xz62`F)`05x+=I>*M7cJ
zO*zy{W^%jf(-{%7uX{z058}Jqkt=RdK*p=C`y8#83K)G)QYH@-Z$5Rq{yxW>1&Ngo
z?uQUx2}U=JnCkyD*|&Pkk9hm8@|4|Js^sUEqty058HGZik!s)kE3y0TUQuR;nFFc2
zPY$6*Vbp&z<OF$QQ?fZT(AbTISZgqymk}%OPsFj03cAzljo_cj&0I2bIDQ4n7{Q{u
z2|>-XchUYMlsyFjn^L$9HR>&gO~gB?N7=9i1-xq+ObSENIc{beTcTHjI{WlJjU#cL
zd;&v7%PkC}LkA)*#{NNz1@IX+^VJ0g#=$1J^mieg40sDW)X5!{`4zavnN`wCq!5v0
z+}-xmAlrr@%My>lM|-4~fCOE`bE(pxM&p4+<@fp5hr`88ooTkSHv;u<KA&KJA)Z9J
zUI_sb1mrLN{?EwlMg#@I|Nk4A9c*o^9gO}DXtw&Fq4^?1-DQ`3Zs;mYw&&y(QHQbd
z$nX|7q=0J<#?aT1d};z0XWeX5g3v&mVe8{z(0Wh0M(WYWx)7YK#89eqSC#DKt&1-!
z%X~}Pf<trM$A=;l=F0rgv-bDoVRTnl+c&2zi>nWho2<J7{Wtx|uFu63AGRz^2IC2O
zR=~%h&)aL8P1(Yj&BGu2+X+v6hN*L#jH*e@MT3nOv5ot&g{_4T#k$YC@Ms^}<io=1
z_m!1rH|`&RWRv&-2W?d09D0^BA%_#wrzaP;s_W<jSH=6GXaW;H!zK<1<b>Ajg`v5U
z1N3yh&Nf>qt3TH>^=sAbNE;02sovk{=y&Ip38t{_08<f52W}e-jR4st4Q?C0RZmOT
zAI(;@7ovv|B`cUyDu?z?k9}{oEEQLEVJ+)tU8e9=mzsHc7RygKnyR%{HQwv_OY4S4
zd^OV1f;h*U>rwQdZ<_NTn4g#kT?keC-cD@JWqV?GrCvAY6FweZ8PYy;L$x0T-!nT^
z_k-Uy(^<b=rR}OdbP%(2{VXaqlq}p{Xr^lioOFBQti2P^nO}CDt0Zq3GvomnjN6wq
zn#Plh09W*dt<M8*oG4pTah2^hEUBX&(#V~is`+8J4Q8d`<Y}4YX_zi7b|Kp~AIN3D
z%5OY5oC$htf9Q13Yd(7XdDk}K^>VpZcpBA~W`MA}7I6D2o@%ed_eS5m-&OS}%<NG$
z1vu}aw3fQ?!q;-VHJ?!F5{>W~e+gP=i=-*oIB6g~xs2|*<f5~qd?VYCT*Gl0a2cG;
zO#Q$uftHS&7;n+~>2onZji-6I#kO}aT5nC~;i&$&S6B3Mpl>N1a=4u8`Hj75IISvY
zZXGWu;DM6cbMjK^adY5<EmNNe;3{kJ$E#6Gtt*|#>Bnbl^YO<^^2S-8Y_vrMw6cc|
zlJWs?g}q80cjN1V{<wszpIC5xM9*z_uch?>d22mhN0>ZI>jJBfth|>y6u&r1zIj_(
za5VhTf~>Eu<-`9Cc+Xi*m^ypSf_Rv#n5n3mdtLV_##RkT{a%jEmeHd;cD%qj7;+Ys
zx1@3{ejry7XHH8t=lXoI)5(m>!3h97aQ5}0V_|$xIVAYw<LG>E4Zvw|K5{pl*Lc^d
zn#0k4@Zcz^JQ-ne84P)M{naRc_U6QO3?I_)bea7!eS*ZRh3$4i2LluGWL%9K6|2$2
zx9n}W|HCkqy6&W9DPa9xmfbd&qHO6``=IRXf!%aVM_YTR`Nh;~+vY;?oQ`Zzx?^%;
zpuy3;Z&O>m##NOpkm)WfdzpX3&h|fe7Hw?O<HCxbI$W1$>kp-$5Id6cz<Bt?(B(B)
zaQ-l*(*gVev{mZsWe!F(xZaTRsue}P$`IIG5Jwz52WD>>HDRf!$#zusS1^gJ)n<#Z
zT#a^4nw0SYhGgrim_6<tTl4Pze24{^+I$^x>N0yDP<y&_U%%OTnnr`cw&b#pdNt>X
ze)6e?99@I`37{xzya10fo&v=`l@BYSTm4*R1q?2pE-*2W&U{Si<RbA!SDG2IHERkc
z2*0w;?iAVmV4}5n-0+@#{Zr2Ot879;$8z|aw*JCS=h$=f?VH*6up943;R}MuipP+<
zKa*SETa7fP>RRr!;7zEWK0}WsxepW`bNEb)E&_Vn;l8Dz3H>^%d5CUFogmOO@DN^}
z+fo;a;*G2{xzX3y>vIQoj{!di-XU{rD#~vxJ6~ytk0V?yL;~^FhS!W8A9ugX9br8L
zm99MMf9Cy0qZajel>KvJrSOnBJ~FB?ZW2FZx!chf0j)XU8=Xh9Hs@qP=zh^7z^DHe
zsp@IO-H}(PqI@NJ>0#;}jdiy<^p#0#uKiQqpL+GsUVlPo9h>4fu3B;7QdQn7Y9s97
z`B%N8MNj+>mA>{;fBwPt)3~40?Z%AKOeklo_!~tRg3&H#sT0(!!V;rfw9ZfnzX!~J
zi_ECsh5i;%UCyMND*Tc1D=SiLj3oo~D@RVz;qBV8<TZN+u~1Ry>p8G`>Q%rIQYYG3
zAHjn_nEs0$hBH>QYc$Dh5qp)`3=!<JI2f;F3D0#b!&G-yV(1PD%(H2eX17?;zHhW|
z^fm=JfpSlKZI77cIL$T6^-L%2HOjbt%LMUXMbsaJH!h-IY$6!MGeP>vew)OQpyj|X
zTK^IB`OEVcZ~K&Y!|l8VZn8USm^hh%cF8!wnRYM&J1gxvbrE&PLBmbsnjdm{m}PpH
zA|(=ow5`3|yTI`&g+Kd|^Fcim6g;*`0GUdz=qq9rB7VSdSl_{USJ8sAeh$k*@oJ1I
zGF3%hqoCcvdO~<Q62f^x)Tvq5eE}-<v4p<S=-YV-tKbALxA1S8DPMWx{Gy%PAUz!=
z5&wye=~^CgoQA}+zaJP8C;{Fu7(owh(i-hw#ftRHcAjzUv$(l1UdR3@7(pT)LCsn_
zIm>bS1(g)~`x?`B-dgmM*=u(vTw=eNIf{2Jt<-gV*$#yTLQrJZI1jJBi4F#5+LG`B
zhe>d{+k|c^1o2|S=<{$zk?k4vX`BYXqo}B3A@QNI(s6o@5^7woe}4WvKIuSmQG)4Y
zXnys|5M&%!oIRl?4giU?07?~!)JUut^)L}ZLeD@)K!IQ3(MZZbTR?&PK^LgH5>d%x
z>HFmenjyvQjwz0|7z-;bTbhAMfJ$)0(EX}{j#CIIgN~~uQG&S}4bHFrUPVYnNcCD<
zP*X`rmFdn1RNG_FJH+FNVdc{zwA52c3%n5Gc1IN@`7l}h#ut?Q>ER%>J7`G@r23bb
zt%Gk~W1{B{X`z3nH(Gbfq#b^+k7k64>p!Hk?wvM<%cMb&?~W)kCFByKtwPa+Lm(Wi
zeN9>45j_gV+|V_m%y73a_-2n%11=JhQ68Kzk3-Do9Ea3QB$~nV+UQ2?|D`on+GYBe
zS8GnVVLGb-&Bjbq_BV@_+v#7ygy;fn5Uy4W*Q@+&i?<2zWXFSM^3%W2>`8%LQC%!O
z3XX>O>~H5MqUbuVQoMwwutQj{zShsT`RS}d(<9{?C-!Wd!pBhQ9lIr=xss5ir{>p>
zrMnkYxY`$eVNF;KCto*pem`D6db(*0ts!&rAa3HfcL=GwdR#vW(gZX?+gwR^@L+H1
zNM7t*yxi6|ZliJTK>ZKbbcog*VT)@2+!^g%qiJgzqK~7YF?8OE2nVydvTE-LX@dw6
z?Xl2=gL1d3EyUPvD8b-PsZP~N^SC8r&`G0Ff)Of_FoZ84WueUc`OGQ`<w{bMGj6<{
zs*vXkakmJfmP-sJgR0B~HHpz^GFE3MZM;XZH^U@t0wOANT+;H!+K9?6Q#3qHwaeR<
z!z|{)7h2hUHsg*KN?iH+)xv&p&*Hoi|0YvRJv$1lI9|bn9}k#jy_nyM`^fd+<e=p!
zO7Z#ep4$%|-9VidZ}Z{FfM@#Uz)pov!HU6)>qy|i#fG~<PeD#C$td|Vis5KBF;B(i
zv9elgS#qLgz~=1^Bp?YzB%zIdj5_C%CZ>rI;D01HA`#PJEvbwAuFh7Oq!mYtO+=7=
zxu~rb$tIM|OmMS8<(w5)X7N8vOfV~bo5%~Ruo!%8J}@Q%IYIgd^5o}-fr$58$T$CF
zTa4%rg&4cMI>)w{-f93a$Mf|wET2)*@(Hg=uJgdv|H|soZOQ-w$l-XVD&VPacd*_N
z-t`P{-v2_0ze;R&cXTeuWZG>W`7_Eh%9;bw$~6h=k)S_;9}p1!${=MZG3+-={>(VH
zL<r6ydMRSyg)^D7kly+JK)moL2r2{f-VaL(AUFxS&4U_x3jd0<Emp~00#ZU6$6+C0
zIlL`qv$yjIeNpcv7wXoG6!{z*%fP3g)Zi;#c8Z&=^h5Tg)ktYtagi*l62mU2R2M)d
zFk7;$DxpBRx&+@SL9VYO1rdXqwq$8sLquth0wNKlULLHDUO<jrcMOXK5>v?xMk)~_
z5F>am8!3=a8F*I+A(4<Lv*2uGhMIpCO(<T;T|j~ZQ6X>$iz$yR>0JIJ5!uW|cltz-
z9BD~iSPg`<D3cpBj#3;lP{RlXTU_}jA=YpIFSO?JA5%{U3(vI2)k-Tvi?^pPiRSrg
zZW*ZuJ5>ZbEs#Z((@>C#KuAcG@Q8;q$Wo~c1A%K~02GKiE6H@f%2bgh?BaU1&y;(X
zz$MiG0c&yCJSEi_^q2&mmD%4*`r?w{qy@x_7^Fcw60!UW3g-X7*J|Sw&=Cg)G$|yh
z5ulN!5??&L2;Y+@1|3igdzgsw-yskPe&*Fc5VHWK7Z2AuepezEhZToi+u#99xi`29
z1-A#@46D_l;T)HXZrjNyE@=exlkoS66u!YzBvP_M9)r$1LF4>1uM0%eMKG<H1SoMy
z$qNAmPdCYvp-6Gq_<MuD0fVp1HoN}?%j*Yz1<xGn->T=A9CVTstbX~|W;(I)3IR@#
z66$ca0t&fuKo7qk38^}{3+@d>NrNQ*d<O<K>St-D1^f=OJkLNsopKoCz){mN3yjnF
z6`omu2>e4$6&M)^7HNSxtwb1S;Xq=6gu?0)Ayp+em8xu^kb<yCt}B;O(pnamuxH2Z
z`p0=W@lR`?%fquXGlUL#VX#^VlPc;-d~2V_eTkK&!rZu;s@7uE`YLS8c;WtbV}7cP
zH2YOm;IDmQG52DW)a0f-0J}-7EqzCQYpBDaM`d0^OLmH5tcpona84Vvp<-P?6tgl~
zF{(>tvv;oj7*dkaVgJXyr7odR4n#^`xjG@7-J`TuetR6FG|+1yV-MXFxNMau3kwXZ
zrJ+#nV3QQsrDE@mQEFh1SXGyosFzhoc8uGXRb_O;p?=3Hcyyx!GUu(WSs8;StgXAz
zyA#0G|H|o6LEP4}BzXZ7Bt|1T+0o8gKdPVSG`g_5qdBxdDQRj{UFAz<1FPtmp8Rh&
zO8b!$^aQLaRLche+Pu)U2Y$ewVnAJpHZPZ8Vs(|J^GkJ270VP!AAJ_ns_OYI%sKHm
zP0^vUqxIFnK>KZv!hZ3144V;EtuLBlx5C%0ke?>W(S(Zk52M`*AIILg4&4MW00x^R
zVps*xp}mq*p7aiLc8^r}B;bRtwkkLO*zmk;w>f(M+yZKCo={(>M*-G^DpyW;w<xeb
zp%geTAV2jG6#K#S!n3JxuWs$UJ3$KN93Cn0QgT5HyVtm4c<j&9jRM6|iOV!V8AaxH
z&XxOC9K68UJ$`0%6i;KMcQ9V;oC9I5F<pLj7QqB*ax;fEorm2+FR^DOpzf(~G85i}
zq2SRL_~e3`#BYmWSZ4RIr0?{tgEqO6!<@uV?*PK#dC!W6qDhs!rHtpidTb@Fw8_=1
zZ{5*oJnUYpm<lq?9;>8_8cE_@{-^`+&Tz(?hsbn?NA#A^bXSCLgfzS7JDz?G+*Gfn
zsH+ZzQcMD`sXeSC!s8ZDNwa$!?Z(`g{0_CFcdQW^0^r6qIL5KFEg+TEJerx(7EIsx
zu%naAIKdh11!X4=nrafa?Knk(Wl)}0w7DD{p8}3y+wm*BmI_-h4a!H<qpND#-1|N7
zjflkM#f1F{gUpcp_s8N#5e$T4miL4G2>l3w_zaXmDp0D}5LEn`30_9PQ_HHzq{#VR
z>d2(O2kg^C{wfs^kpA<uafCm<;Zmdr5CW$Vb#eunlojTPP@GU4y7sTkN$gRE5`c{<
zG6bTpz8yUU+AFmLtjH^@e}9A9gm_G<KB!B4JrrXE#`lO^hbIISAoMy&#5f}7BfrO^
zkv1%A+H-WSK#E~L-zIQti8k%m5{WmHVL_bmH?mM*hT4N>GSQDzL>9sO)+bRI>8xnQ
zjRCj$xsucEyK(DGsY~q)&hn1RbcFl?n)YS-0Flgd8VXu6bD@QAb?8xbcHKZQQlP+;
zYh4zh(`H4)NU~ocD13YzJvl${{*$NGP3Bz+Og0pNtP>NR>&=5!j^uAu?WB_5f3q>O
zGQEdIe#8k<iYmRpR5}MFiFhw=9k?P#dj82pwQ$5FU=mgT&BaYG$)`fU0^b7MVSk_u
zRE7c|(UJk@*3GC-;rDOVYV_&^A@#p<dQ=zCqp%rQAdEkEI|zi0-v<AN4ejm7348)p
zH>%~m03Ki_7U%(ciUCz2JbyEhvC8uCxw^GDoLH&{KZ_|<_523rlH{DG=rM8DZNNy6
zO25X1b*CM@8a-(;GaIEfQ7MLs)5A!Y%Eytf;37ax#^i4fV%Tj~x+AGp;Z$algBQ5o
zCX|;^QqfMX8KIZhri<Ax{s=HKNB&;PPZgAhE@5T*vZe}SMx|U+6$g^gi&G$61D~D1
zc;WXK;W>sQ<zUn3c=@ULsi15BN}|M`1#n3i;8M`W&Ov8g#Gr(vJmAL!O0s&UW!3Bi
zHW4cO94^m5s4mI_#3z1_TljPy<0bent-?o`1U2%tc)aJ|g<I(zFQLuaY$e8)+6){K
z?zJbE_-P=|ujCtG-Q871%ltDlgWq{NxykmZN0}nnA<JlP9sLLY#*Om5@}LERv&C-0
z)&KYI8~?-_t#j#D-Qq%Zbi6p}e&AmuNG&j)aaWl7`So#mEif;_bX)?Fn>4loF=?uB
zot9dbo0)28&;8N(TU!x9{7NlWPf~df#Os|MA4g<0@_+VUhP(B*2V(Au^!m_kg{o7^
zmB!_AXh5Q!LUyF{e^K@gK$bLJn{AuZoVIP-wr$(C-P5);ZQHgzZQJhNp7;Cz*!VZz
zjo6J7x8i12W!A}iE1x{)<dazvK#Be5X@7y-DBv;amvuP@zl4oWeY!CJ#1>T(m~Ri2
zN<Y;auial$tOX#zDJve2U4{riA=l2q55;-lDg%f}-s~1Sjz=39ul4p9widskLmwS7
zxay2#b5e!mKtHn$l2&+pY{e-RxYp$;QV_uuRF%O}i@md^aEdAr<n2B=#@MF!kT90S
zY*lb>o);FO;>(5dZy4i0>lNt%3IJFMNl+nD<>q9}M`0Q|FvO&8gb}nI#CQl!@p~7_
z*4wbM*$cHn0YXPJx=(#N4mz3`GUep)&C7=i>+_K<RP(J+%@$oc%#5Sj%K%-tin_AF
z)hP;|&mLV|WsZp}&mLA&(gD@ry5FGLh3nNBH@1D&yX^UWS>S(PR%u3stQ#xO^v`)<
z_2+MkK!76fZxLy4Zk(=f*T8-~j22$kRu}7^bH<X6cx}JQfI7I(4}+SIAg{MC*cqF8
zkSj6eC)?|oIy);Q-8{d?c-!ywELLJDSPU`^9$2>3{{%Ax##bFx5J}#CIPxHN;&UKV
ze<4>coU(fk9r2@Pac72Kj(?9n2{qiI9cKSQtp5UJcbSIoe~mF+Sed-%`(OJHa4irS
zqG{{H$u=Y;Nh_sq5mq+Ynp=EwJ&!SHQy<R9rMU8FrcIZ$brITGU~uJlI)@!Syp*k-
zmQ<{N@N8?gvo<eT8F1{;7y2I!ZumqjRg3Yl_~>-3(F(;2A4oZ3OI=+dH0~*7v|NOc
zp)WLWs^WfXv3h%){$50#3Ia;PAyQm&fs9mY_7gp$8&RC!^D^h*u#9UCf$4KA5@eDd
z&y=-F#9lSjbg{Gur2&oZXSA;UW74_ui8yzY3RR@Kv8{YFzKg<JEecPXKq!-cy*n4h
zh7@5qKz!9LwKG_RVNZlI947ha3oIBt#bh8}4x5n1{R<U}mS!@HFpup4@rmJc6-TpJ
zc1%FyE||dca(p$N(|hHGvSY-e7L%9VAmnSWs;tzsEpfvAT386R;AYwxR=`oS_i<0r
zZhTm(R&McS40Ae#7TS_oEBfc;MaG8}E5@xd)#HVT>+%=RX!dTo=k*;+xgq&;uT1L?
zUMKDkL&_xnk5nOjRd4xUQz#TTWUn{2Bv+%tv&k6G<1^$4w{_`SKQ7|6OFm+e=T|Vl
zW8~QcC6O6QXlXNO1x-TK66%^xKg|dBIKDV|P|dh~YfYvCd<|(*9$%629#qGfL=UH(
z(KOBxcE)HJy*_Sz4~<CuFPip--hsNptL&O!>D^v%9@)6x&z)3H$zL6KHX$>jsx)#q
z3iKy`I9YW1Tz%xucb+vykDpDsdt;Jz?1JRw=X6$@9YYts*;I>Kn_M-;f3<hAgcPhD
z&zCOY4ti&ZI)_E;eAQ?Cjw^S&@U~t#S%`W(TD#cHeVF}WptZ`&atU_61jGGgzvzq>
zIX(2C+`e=HZ;_SW9JcV<c^2xmWz$fw!}*%m{lgU$Jp1GR%UR%wEy-qX-I}@J9g8>W
zCnxC`H4}z!+NA6!2Rns<cN&K~#MIX=s@-}^ORcu$)6W~I=x*LsozGKe_q;Wm<-^!x
z+{HxaQ5-->MMjnbn&I))+g<*1Na_!fYq0bu^$rf5q46SiUnXkTK6jaoKcY9v_JiQf
z*>L7#E+XP%9(Cf18eM9K&pGRZ6E1ldhz)nD0~(1&X10W%B}XueWe<RgmYmT%r9+Ef
z9;^h#DoXeYif8WczLm#-?w`iB&%@&6UUj-s?_4D7%&FW{!xg~?Fz;F21Rm+7%%poa
zN<TYNoCq$+px(1+btl62SYand%~fg$-5MEWd%Kt$?!nS)i&7B@Y4Ne5i)KVFI{m#)
z!`}$)@343r<Yi<8&mh<AN^C9ZUAfNP{6-nRyqQxd9Xal~+OM@LIt^~TMXKRPGuU$`
zd`V8iHHR)f-%UGY+$xEz3>59&H)-^y8%tJCQ#K1za?IG8PM+`F$`=w(cPEe3J{l=y
zAK7l6p*`PyI_V3W$2ArL8k+$^Bxkj@_6qy-yy0p59&n(g^Z>a&kCD{29M!k>h_dzn
zExXX&;NP-|lnwu9wz0<6=Ep`}DC@pYUEsjxC|m^It`T_VxnCmAl0oYwgq6aIT8fD%
z9^_!z6+|K1uF`+^T@kI@PfHXXt#m|D0sB+Jn2jn^WyG4ZmxXDjbB`F6pY7T8=CRt-
zq0|P;j4s?MPOcO#+=k0{Z8YZ|LsdtODk~3O<p`phjJ0R%hmHk}%!$VfZ9@xdG6k03
zbc1dk`1Wi<==gMvm4}J5sv|akN+WGhbiO6jIUgYC?Hkb)GR37NN?}LuSY(o+S6nTC
zGfuSB9w4{(S>l?mqq?qP@v)x&nLXCfg}ly;f7fK0PtFv~*qEw~Tvv{|-~{R-9VUIA
zzVelAAW}PJX+Tr34%sRViVoVr{;5!I%#Su@L@X%LSbDM!<t9;PqgyXiCbLrSyqA+o
z8L)8)(z+QSQUXkb+ntlbk}my8ulmTFFBi6_-}3rM%j>CbEk9C%TMcQH{<BH#M#`~x
zb%Y>gbtEB`8LQPgilfn|dFiK?cgrchrZcrLQ_&@hyTqpV+AoeQ4~b3dX3s60>twkU
zcJeA!HwA2xP(x38b^;V~0|zBi!~5*%D0u_Ka4=s)NM&xtLIVP%HU+tP)G)Da?2`T~
z@c?TPQ5&OqF4&bA$4I_1L8Pb=AC}3RLxm1@5qP|e!-XyEUcCgDVwQT4L?>rWzyNUw
zlHe0r=G36T05~B;DFHgj-oiahgzqn-$kddyqIBdMh}XA@9Dyl{+Xql??Ei?nmJ9lk
zgJ8mW)h+qEeHC@Zdj_yGs57?`$U;)u_s$bA4dCC&?~E$I1=NK_WKd^k=zunY;4d|%
z=~4UGQTdlq|2U!CO9*l7h)Gs(?mM)EnSI7a`3dET05!S!G65t|#m_?iZ~;Ox2=M`s
z^$i_!t(Q2EW>sL-&q;gFL7T=vao8IvMMmvfN-N53@>HXSmYAJ5sDQ%oT?8lrRGfbP
zh5eer2vO-&o!a#YZVQHv_V)so(`5~j>c!SB77^7Coz92ZWAEdI^D2zxf=t^<qL&0j
z%snn95eKE6Vr>u}SK+&;i+jZNRS}2RO`9W`%dI=K%~jfrJLg=83@{Y?!v*6Q)(ZoR
zLHXe3vfy0H@5Z#@emAC>)&bpVak|04#=$(yfnVD2=L%LuWUl1|078|+4kN$<+kCJT
zVD4cPP!$j#ycW10#Gq_Vcxdn=2Fs0;q4h31g-Ic02({qbE8(*+D-D4i20G%yZ~J)t
z5=F+f9Lr|cz$H<`AF9YgA_0^_Mgw1P@$nrlorOcq6wY3rw2wi_JScv)1yJ}54sBtK
zCAf5rbd3lYkhG1+(5?JNL~^Z0@rcpgBVjaI<dXpegaZ81B@t0!n5wmi>H=m)U!D<p
zh>)&Dj%^j<yN?XHW8LgFw7})>8GHXpV1tgIW%SF}c#+sLO%qWo-iFjw`jzZQpT%mC
z+8%e9+A^IS$L_-t*@BGXy90Bk)H=Frqcb?Im>idSnI7YX20G=Yy`y!&XWH}%;))oV
zD$2ydue?W}$meN6oio6y(5TY{PwCSH2WS_s7)K~YG^%y^Lt$Txo8}5s9@8jps2@oh
zwo^8>Uq<XsaSYH=_%*Y0rz#%4=*je0Z>Wb_w)!>2LfPAyW(ABQmO=D9l4k)nk^5Q8
z1FVAmBQfKl_74~%EZ^di`iZwbi-ULb%-{4^Vl8v|n_9aZpp3ALu&&{Z-bxX`jj$34
zH4x)2zMp=pM7(u^e+qsV)#CZ>Zx#5DgdW4!;cNmT#s2(T&giWL4AV#xXjKO~zzVzx
z(9Kl|_~^Sb&RnrSMj7vobf{U_c<cUcfmS~wDo2|@>R|s7oD}%IDbG0TZ@HlR;QwBR
z&9{5=pZb3;^95QFntBpK)ZwgvjXcW3X7+Q&UHB2Oh59H~%_RaGamu;IT?p1PuO|Pe
zA^c5-xB3{W$^WI_$^WU}-`mKd7_C!7xPjMsQ)w(^UVxE^782mCmpFl~lJGZSZNyv4
zBTS=|;nh{5FE~-uQ8W8B`8UNHG3Hyxt2R&{g*AzHv5Q#oW*oXXlD|$L0~*a|zGf7l
z%P0gfHl~qh7TSJy$xI`s@Swz%;YJ5o(r~0*@d=I|Pp&d7%4{d42{Bce*$VFu#7=>G
zs9DM@PNC`%V2|6`3QqtJfY<0tfcsDbOTOxB@MGb^Y)Ai&M5I>%#)Cv24K&$gS-!1p
zRJ6l1Pnp|EayQ4!u2zyi*eQNp<!{{B6eEo2B?C$Ge)a-yLUX~yYP{a(^#Em60A*+`
zM2q>!NlNgXS?RN%TJ4=!4Lq3rE$M#BR}slc%89%H?>gUBiZ_{3jEZ5kFkgI!EMnh%
zSOHW3dx?_>U8oRU$*4Y^C@obgVTBf`W6e5HJ9UgPV}LQLUYcahZ&Q%*{2@{`k;7)%
z=m}enAl$UAk$1QRVA-Rr636rxYQj5DYKU~)6)=YG*zYYD&;p9UQARx-$WpQ6Bm4?;
z<}iq|K*Uw~=l&yxiB7OYIR6OuZ(zKWSsVayaB=tq;P2xw2E}kJ1QGXd1n?RJBJS^p
z(@6?WDh5HAZ%+0ECP5~k&=T+DKT<2+2AA+3!CeB3yFZ5WD-0|IANBt}q6^Fs$K5yL
ziFxQ@`2~wI+rdHe&jCklKNm>1O31>+-Scho&%qBa5ov>e-}JA<ju&L@@%^`oft&yd
zxSN1+PI32m?B7SH{lcHT1abE@0@ytQarb85>Oe}zaLGyx?}w>?5Pkfb!aG3`Ya{xr
z!Cx6BIUx|^_(wd{!1?A1zUzZaz$F6zM`54$Fuu8dDE~rWw1C1;lwCasCOUQkR6udw
zB1SO|$OM{z|6NU#pA*aEf2+km$7lxsUu}+=*M0=~Zqzz}IB&VXqZ&j4t{l<T=<L9L
zn9_e~L?qTWfFo{uIvDRHe;84SK3<%d?}TQ@(O3s?LeJkO1z3nh&UEzX<tmZ^@Eip&
z68#$yAaB$ZWP55Gt3wfJ*?ff4(_xa@72K1@s&@DMrD@)9C|eod^^vR1!uvETgxPSW
z?BTWZDNyFAYMF(mdN09D1SEC8-567K<ZH7oj517Osim)Gz6|4Hx^cao|Ez$1!d(l$
z&JUQou4g{fMpgOhieFZ?QMqWQ57uPZg<|7Jh=mglJj6U<2X$2-G^-aFx>oo>B)dI!
zi9b90M}dv#wS{qZK7(c3J}i@AWJbP2M#5~f8kF_IAFPoQ<RPuz$=J$~U}pBFa#FMY
ztggzz4g1=?c!2Tur$w!*iIW+}n!W;Z&%xbx8=apCtd2ZsUs7|(%~9(gFVk*W*Bat0
z1I63V?b<!rma_GWwC&=qH9A-^-t3=T*%S|jZEkn$D!vzEiQF<=pMAL9y0$PU7j<Zj
zdKc7w{t62L!wj~)hK=NurWOUc)@t8Fqbj}|mFUq6p$GPYT-WR#SU?Rnm_D;S_xys?
zdQJMb-38SL=LylraK@K@AuBDU|0GoV28n1Ul#3yno6#yt9_pInyCCwRF@D_0vAjHV
zT)tJ&%!AnppOwDJyytQ6C&$#(GI_DJva;KRCWOaP6Mdh@a(krD?bN=>-|gXVc5V+%
z7O+}Nu6nWR&*qeS>9jkuu!{nFxr<VcmsJL8?LhhagaR8K9oP(C2Ju@(dnizQDBL}i
z2saYSG?vH<r5?r1UF18(H9IY>*_#lh8zlaMc|Z^;1UkqB!5$DQ9IB6JME{~t)LlQc
zgsrAqxk=<&zwd6Q=U_Fa?BU>72!0Be;6v6#asuT`q^<IexCjX}XA<8-GQml3c6W%U
z>KNo)Mn`~?2q&t6zf*#(%wWde{iL~@BNte8`dV6IcqWG%@#$$3P<DXoxuFPopz3*n
zSu0pIM3!1uMU0wR4!%pU*<9CW7zuv*09!f{L3#t45EFS#Gy||B<N)@7R{>|(OWsO)
zD(eg3p>!>o!5;+Y>@arI)+4^d(5=J)*9{#d1#7Po$kppCqGPXJPA%n2NmcGA?DtDP
zl-8r%;J-4$y@d=y4Pyn|aNPnm(?@4M(>M7<oF7c#+aRZGhr<Z}UOBN$&*)yKH79Tc
z&YIIuvqq|HW+7b7+|{;^H76gSwb;J&44ci9aPBur;WufAOlz~dnF7SN2ap-gomaF4
zkwj?9)`b5(gw6{N-iPHu_1u1s>&byVw{s0$>%7=)#jWppogj52sy!Goq-GaJR_aZ>
zW~#`W>q(3Z?J^-f6i!hbifnZv!<}JrHkCe>H=7MsSEKPz=OvUK{SC5z<}k$9Sp)81
z4LF47JEw#Q-aW8CTs*w$>Z^V~6%Y+26=vkH-jqyXrlonNT3;1}iKBGSK1^4HEwkK+
z_EvINX^AyQ%{pHVK6G=i@{_8uvv_ZQs$s&o;_@eK$>C;i1dNq}r)V8Gdgf^mU+I6H
zHNG659ei*K)EiA2%}IDbS7PI)TEVbG4gN5O412OkyC6FqBHn5rG(^6Z&TE12CG;{V
zDj!xWcL|oM-WE#sfRyA;_Mm!DJCzkjZC;R6I~9D3b1I8%asG3LoctPiX;8Mcq}*DB
z8%cq-h|v3Da)pbgOjWL?RMAzM3@pLLL){gX^S<&ix$-)EIpNNIJik{b^QZsddDhKC
z<Ne3_9iA8SpQOwji3*pZ?x>$XFI@JbT}n=)!KNfvzqXxre07KK7OfsC8dK9{h@7vk
zkgLgJLb6F}J+g*020b}Wo_&P6^BXp=+>b|c*?fqia=2fdX09)Wr%i%6p<uF?v*h-+
zSew4X<E-MFn5|R8|C^4MN-OK5P^mrpAD*I1YwB8#_1ERZg+L_w-R>9QU)m<;#X=1^
zIRL<4a^}C&Hd7G*{!iK_!+!|%<~Am_4%Yfk<}Sv%2H(8-|4{37UCo`$zPDr6wX<>f
zS4O@2ztc85)vUi6^$4F`-9Yv~WqavqB_rp=0N1o_-UR&7Hof_649uFsv)15#y*;qP
zK}!3f*tlL1C`%79PIKM4afR0qks=z8PZ4X*`H42%qJc@dDBKA@sF#%n#yRDfiy6VH
zJSap*g3hsq72B6;yeRoo!j@dJpinU*A;k{W9o`}=N?Q@!F=8sRqIGFZC$}I}EX~fY
zjB?~Vu+ETLV6|veT3kyZ<pZ1U@|CWN6sK{SrE1Wp3JuqD$UE&-nsDQWWEP=dg8u3;
zrM<!~bp2sUJj={>d7Gk?jhFt5$CRTwD@bD%%%^CZy3T^D8gH;X9s&@vA<jKSPu&c!
zNlYGzsK&*nM+(hprdjhMWYwmz_GX`DI@)COE{ZWgb4b14Go5v+)1_dxNshia?4Sjz
zbPWUcm8eYZl_n{8j3n^#;@Br-+Qcm+3)TQrJt*TEL;?tH5BFj(JzrsQ%&wLZSIRTd
z-qx!bF!)*aDlBtEX34+IOm8jX&|Y<^XIm0DJ%jkPvTy;4B|d!CM4UHm#Sio&B_G31
zaO;=9rOAb~#|fJ0G7IV_ajU@r_^WU71Pzg7xfg)@56F|CZaJ0NG)~~-n1IzD&Unw+
zM<q%~4~<ei9&G3FG)c;oi341wG#(0Gok|-!!j1dXT54>l&q_(6kB#%!s4(Znt^}(&
zGuP_sbYHIw-LKAPp6%(IkHNtZyS~z(i#V~?-M)%<>{+(O0lDzP_-#ktT*!GU!7W|B
zX%*|E8*BI2<y4+ObB|^mZC0=)1y|M2k?T?~CWxWrdor?e`K6})dTgw8EOw3onpw%K
z=1rE}8Fn8@+Z~)}Sil#~B9{$$?>i%_Sy-mYY26NxrI`Bjb6*x4S8=msfj)!ka>cK;
z8c*A9x=O?Fi(_G3LwG;XGqM23<>prQxOwkRWsBXkhE33uFNf-*e^%vtv4^^sd{gQN
zA=?;L+Be1}?Sw(HU{^9D<H&r)+k0%tywKacPAg1tD|Rl(SWOdhAs!RzKv8cax9y$u
zB#E_y<le(XlwLd@AJ`NFz~8FepBBnwQE!0VS6FX+qahVNXlsL;o(?Xl;Brb^GI;59
z#oKN2@^|P+oe0V*_aFx~BoLlEAoyC}*AHsO?J)!-jHpUwKE(o3E!ZEeh!?Yx4@*`S
ze2FtMr};0arc-EQ(=aKTiN+NeTVlnxr@h(GWqb|taMt}BidxWKud$7!z4ybcrgc8w
za<|#w-v{eY`)A(xykbR!$l^F|Dhyku{5^X$@;~Uk&ccy*U|Zq)&&`m@5a%r~NgiOh
z+LyobS*!FY^Xv`21Exo_@b;}(53&ai3UJVWz!3G%kY&ISY3VRm@|(kJaGq&47?bVT
zi6z$vf#ETsFjqfvvm7p)M^PH=p-rXZG{%5)*nDSy0Uvw4$#$Bz9>Kqzq1ceqeoS%F
zSU`<)!Hx!ZQtxiw<L4EqQ|Zpq&5sDQmfX7XotXdez)nY*Jq-3lKWV9Rm$!Qr8GkjN
zwq^?AcV>D_ot}FA(jDyg)eR1odB<F1L+>vAlT)vYYjwS5@CE!ABcG#oLX$xN0RAH3
zzhfk^2mk>8|D?A6|6t_5aNE8A9V9Qb)Ex^r(0s0R`47yCEev3q_KM7G^kE>KJ3;rH
zOm!3(M&RaIp6iTWo>Y-i2X6>wy*bm$_sJo$E;vOwM91*we$r+zKY;|!Jaks03sm~_
z@=rhFENgmqrfR+#AML`wM54UvL3fs9A9D9Lb_Zh<-1X^jyg%&HM>KI~!(WKD0P4eb
z4pv+E)a>5Sa!H*$LtjFN`XD)6V~5ZYiWoB20K!G}r(f8*)zU1yyrS|3;xAq9l*tqL
z!10T`zQ1dE+922)bpF{r!@*^f@q_GK43;Woz_P(hKqLy>2i;w$_eu*vhv(Yz+<dkt
zyCGLki^YA;@FK%fL4p$!2@7)T0tOeL4$xQf42eVlldXd7PxuI6VC*VelFE`s(&r>;
z75c0k5z55DA7F@#fvAc4T<P#e;DGN7%q?U<8e?cjOn_3E`7vU@{jj^@?D1Gf!)7qw
zs^z44A-Q7CL|fe!J!RZ)<C;}5)rY208DuD<Wn$6C%=f6tBkCil&@bw0*=d8HrTGG2
zvs{htP_bFstZBXDpwHT#B0XzQ!^vl+?SeUFuzJjKAySZKmLN`LCLmCg67s_ov<Di{
zUk}Zn3{H8!q#8Z_Nb8)vQOK0dL7T36xH-VhllbQC3QqA8wICR5_{PLPKz^i5VlPzu
zg3Yc#b^HsETOA=do};zRI(9)_w87^0tX^)|1E+IlJ=GK~h^+XuQ~Y(Pig=ULYuBB|
zc5Wa5&yPQI@GK+#vNf@N?wBnsw^OXF9`}1@94yl3#YU63+NVTFliEa=hMnRBW&niS
zRsFZ)yCB?;VP`QiM2YD15x7D%8PT=Aj4r88vN0Pr1Zy9?{e@&^&18L>gP0VQ``fA*
z)h*2hp=I(5?Wyc)v5$q27i|MSeLv7DyuD)!(kZ}i5`H-vCmzv)r{NlrSo@u6gZp%F
z;|+wfW-Mc9S?8jUBI$Z~ajrkg<3iS~k!XyH_DFn(P74!z<5t2=5HnsGk=0v0Ib>?2
z1+@6h0nEu4f?kuzT!^~3eAL*p`8h{parJWvfJ6ijlVHl0+X7~OLo0<Kc#w*;L%GfF
z$WXcHnIA(yIE7sFa9r9#Qe*z`YusV4f+gUEh#gqn88yxIPqzH>n^oV2^v`f)Ci+tp
z-#ZT#?*_F9FU8SxtnihvEEq;nuUP6%ge;w`c<s=aOs8HyQX;=yeS-H!38oW-g#5?9
zeoHp-{8yT%4a!*lKnl2w-ej)c)I;gy99r(iN#%?L4H}DWu`nRtb(KC}=m=N<9UPv@
zJ=||Yvc&f~R+m084}0Fqv}akfkmLb%ts>%b4!c=<0<%%BmQ|791qBbTcG5X3q*brv
z=l}%NrqHID;&mDb{D<V)lAjP82MOmRLouQ}PBH#h11?NGCj*<AvVs_Sz|DAJa(;RW
z>c<cPGs2MhOk+Ku&?$o=6(fOBS;A4;zDj~tO+B7PtSpmeK@uvzs0N9FO_d6hl8sHu
zQ9_nSTTx_4Y`oyb;ePy%mRs2v(z~G1b`m)*IMBvqn+72A2sdb#uh@f17LXMPi(vpH
z|JBG|ZeLfz2*9YG`s{F@m}|DkZw@&bkvm}u>>;-@`OZAj09wnzauK3t+065U1xdDk
zsSu)T+ZrMhu?t4-CaSpjdS&~$_7?U{z2o_3Ljm?GNx<t2n{<rC^h1|uUC>OQdpVa2
z*dSE0(b9N6UG@g#W|@IQL|++e$jUj3#b(8g*7pLGA>gS@vzJ!l0&eB7Oy|D#XYpre
zpYksq-iK;Wwk>ai*jm-}&8<it*U?F)XhksB4JVs&)-kEKd*Rc_tqugI!38#L3=BcR
zjEC!XUvooAM)vO|Tx{M34#1NNQ9I|nnV%ooFcT$=)@<)jCBuK#4WGERQ9T4~3x61T
zKcB?9-VbLnFo794n`Ii8`dXl|V!&VVdf)Q!h-=f;lbq&cmQ7O4%TXILeBKYgJs0>+
zmTgVqKB+r)rhpflftmq-uQlEz%1AQ6Fx*ESWP**xR-u^{z^`W$JOT@;vLq=7Y2kdB
zH@-Tp`{Z60<@_OvE4|x0ip?D}DLdQ|YZyerzVE2GA7d#jdUohylez{$oq{1c=6^FF
zAsO(p!VqFEo(t=fHr&Tn^OL_Opybmfbuy+08phm4*|omRb`*l2uWD@2q;gf_GeA<@
z)G#<eb)$-4YcF!Pj}Zsl3!ikWNVOHE_=c)U83ai8Rw-nsT>%5k`8H3_EOC9ioNhxk
zwD(<(uE8S9=0P}5C4_&L2L(o;#6_7K+b&i_8QbJ1RA`9YnbPpiqo*@=@psCkQqx=g
z$5$mx;A5?WaC6AlZzV*qPLHun@0v~i-_99V{(;8dj^oJ0-9hqz;<8;kPm!ax?Au**
z2T3uVU8{>~ETVQGFg_WpaF{@&3S_o$Rl_y^wv_jB!IdVylRQFyUe2$V5W<Q;%Z*J%
z%mTT_0H;x1nr7b0s{w4K*%WmaM`%d=HNS1}C@ouMD`Iy>u{>HwU`Zs-kidYf9X<`b
zP3OAiAZ<L{Q+?hsqn$V2ns7^mkXvrJxbI&C+7}u)?w)^o_h8ODUOvH>Q>-&itv7B1
z!sa&Qvu{34JH|PY{64VWT1q*65o!E3q##dbt2#M#c%yzuwI;TK^MU_(uJqU4a1LEf
z$tsgXu)X$0%pAclVg*67w`{}1Ogorgp=5TIdct#M0)UA|frGPEAN`5bk1EMxF4peh
zOTk^_Ue7#_3Eq_Yx72wqddF2<*c&U<!K5B&pUDGf5LY}fZ)CdS_6^I51vyhi<X&ic
zjX;#8zn4E5udT`>2=MhaWuDP!(Gys1=){PnTsHR#&2Wx3_nm~PfU^1TtXPT?=2+^=
zQbbH3vBCyv+@kbP(qe?8iVvZsG1QQBar6D+#oZgm$o)nW2&D&Q8~|t%yx>iWFr{l!
zj%AqdO;Ow(s&~saM5#onw2OER=ucDjK`kKWIFxDU-n$5gmFT~!W3W%7Z(@J4yOe-{
zr5Jf{SuqniHnZhXJiTeO%b7@Dw6km%0{-fPO+_%B?A~jY_+EPhf$=u%ZlX7;AKwzS
z?;|DZXtbW>a1Ls9`!Jlx(DWQ~SU6B9=s;sk|LaGZusB7q0R1rRs4$u#y#fl!6RC*-
zo+6S_LdS5<7*Bo?9Lr_;fm_b3n;!7N@99b|uk2~UIV6zBy^4(smvy8ZUd5HsTqpjW
z(R$HfFOLKH6R15>o-Of-3cQXm$l&Pbe3uOGYH3dfNm&IZjL-@AZKPf6_{s><!cpfI
zVa);~C)svdoE#ZnAvJ>CRn*Ctq@x}@*X;$lt0bADaHIfaT{@E-_pEn5bklcMQTFhX
zuN)Xi<<Fl#6MQe@c&|Q}Bi~v7+Mb4(9W@t_004h2%zw8%qu~Jn=>Mnf$w=*JY-Ocu
z;$Un2?SUKGT3hSe7=8Qcwl@FjkO%*}ty!t6ZF|aw;N9H~R2y3{K>w3k*u3ypgXe5#
zLuYV#`&+=q3g2IkTqf_!hg6r(jBI98OgZs}ozZk?PrN1xkABbg!}4=T0I`0E0;=^C
z{c!wH;H)J!?iQVjU@U0SX%xjFW)5or3fF?Ai+P*kctTgP*B~KGE}3i|9nnI4MPLa7
zlaV*x-zTSQ2THYj7`!#{DYZ=7fbTxNMT<t-jU;U*kJH}YB8zZ*3|E2GBuQ$wUw)Gf
zclN*uFJJ6hK%jk>80L9gBryNMCmHGkWV^~|Z~;+Rkph7$`pihFeWT|JW~Oc;WKM!S
z`QkT%Tp&%I2Sl>*Y1lM0Z5nCKqo^K<Bg=gz8vB*JNSnx0ltO_cy(JcR&V7_kyWz|9
zeJ1@<t$dQ=!@(<NAx9C+<L^{2Xs=?5G+5Hh{)g(a#jK`cLDnZVx{6B@0>`2rbo5{D
zD+^NQjybyLF`=@7qi%Fv<5@so>q7;2<+?6<@=SD<ks`s>Qgk3=euszZ56KcmsONal
z1zzOdbv1y{C%QY6eppR&U@X**MP{{w2aRySUny$gaDDf_7!ze6<8@v^w{}Ri;cogJ
z@gkS-d7Km`z*ls<HCZJM339Sn$`cR2HG99;iXV36&KRA@zj!p62V%+pF&yHs7kh4|
z%wJJIqSzMdV#RrN+X<$;>e|bWUwqnm`2A75-c3X6*qfHmZE+Q@Ac=3j*9|Ehk^X~&
z(wu6L3PQcOA!-}c@p!e^vH#g%sq>C>DYmx~{dbkF=4lQuy4ei_#eH&=$7l<0T$Gsz
z&JP%LupzKZDZA#a#@DRumv+$Qt+X82nzbLtf~HnkEDhdlP3M;*-;U~)fdBG>;Ga3t
z=r<htvXs1KyQ3&e+Sw~$wm&J8H-_~$Jvzu_sc|n;eg`_WK@t3N`5mLkxXm@+d{Eat
z^O%0=hAf%ROKK3QKR)#8-7Jw<$l@&ot1Fn6`N+!qx#0_wU=$>=(dF|Vra`)p8sx5c
z{4PKKh#_**g<;dnh&wZw^z7R0E6y9HgXEQ;WB|D&UQhcw>w!P5v8*vKDeA9)oiIR(
zay}zYiQHr_#zwdTFG=VWxZG9;;E|Xjfen7XLSRe)Z&Ugu^rMdLO!d40!%6w*!WUx2
zPHhI77FY{P&kdiExt_FezcXcV^pR)yET|~QF-t~F<_$l@O$S9iE|3CSh;P^5=|H7F
zhwfk)qk-K8KkA`ff*bRV8L%~k8(}mB@3e_MS*^G6!f=qpd{BiIJ`wo2yP7FRcp*P3
zKC8zFrax`OTp){+3e^u<q4}z-E^Q8<ad0HV_S2GheXUmd5fbSB$jo}dGi9goQt_el
z$v;~$6PAS~zqg`;eg~#*5pI>vH~sO|5;-11PL-3G6YM6g2(h!*^Fq0~Qh5}}?H)Dd
z^d`fu(PX6m>W-M>fTD{GB(Oc7Z(Q*3;nSkgEtj>f=@x8*`&4KbKw{^rcerxAS7G?J
zzS|?|aW^)-b(wK=i~dBi(ft?g8tj;}ZNEM3znJ##Xh#GG0KoA7fp-7mT8IBT+-0e1
zrlfPA_*_-ny;K1vA!@^Ds~j1adYF{oJH75l7@Zlx5-|aCf4(8p5V-Mc<mlCRU#*XJ
z5ozRn-E|Iu1r=s)vOF{`Sphh*=UI8Lzwc}`PaK-QB@(m4`B{g!S^?w2=jQ22!7<)h
z-*LkP;tR}qgZ~_Fdd2j$aI6)%0S<r(O^=p^eURL7qa@zfGqyDRi5zCMe!z2T))vx$
z#RQHa+PvZ<xm`KH{ypK+)VwKFRbUP_Clv&VNFP_3;Sw;md<`KXSU9vFXn@JFQPm$z
zw`X;9C#FFbnB;y5`UGFR!6ku#1Y0KbgOqM|9e<>zGq?z(Hjidx?)72T>(%jmV)!ma
z$x7BiPN*cIEEB67XI#~ZU+*-^#B~cjz4n-@xIl_fIQgWDT)89UWFQ6vO9YWvurqe_
zv^Y@H+i=m^JY>nTx97NVq?{9P)5lfs(N<vyxJ8Ns7{20xvm>61T=_)?*c6?wvw;B6
zzu9sPXM+_|ufTW%VeS-GiLE$tGI{pG{4(JlFgHacff9{CT*59jNv$6-RXo$Gmuo<u
zXqZB_d6GOMFc&XFG>zK7WMGMD{)CHNSC<ow<I@HAg;QY@>`UlVLAlU}FX{X!&xXjX
z#qk-O?yd6aDvQzG$BU)=!|UzS>+W%{*URJi!3~ef1O2oF#dwMISgT-v^Da11+h1R3
z&;TwQ9eoEzN%^HmEMZbTGrK{Rw#iMw|IQl}*S0!GMP^mw-Qi~~kt#9-{lk9Q9=oX~
zYdabTOST1ednW2=XUqgsAq)swdt{!v)(o@qZ-v&~J9?D&^PBx%fz>;AQH5NOG-)cK
z@|Gu~BtSK!C5pVAUzIJ_75Q53P9L}`B>BfBuh(^oP3ZuUbVzZ}E=~_v1CkUPmJDnQ
z;F?#*B7iw7<u_^&ZM`}Xm(HkdX007UN~Y0E35NVS?8eKi)Hm?LAk!Pt4!J|(3UH!L
z5pkb<le-nl*UR?A!K%DfYZ}Rz=zu0EZ)N-EhBtuaznAw=jAIvWTnv7PRa9xHOe^N6
z2UV47&Ju{meN3?4d-rB$Jd$n`AN{;R;`&Vk)V(`^_NRKuXp^n}$6kNSpAgggsDTBo
z6;~OWwDl?xRmrIYz!ntGJ12(K>eCJi%_(>?B|`yqHoPRN@I>%4kBod7drTrD@A-zA
zokj!F)3~1`nqK1Jo>I|Amex>xs)m2+Im?l6QzH02r3`tgz6kINbhw;Be;p+eX*|Cc
z;orRB=r2<5OsOolzPIMn-C-4c+!mJKUVD(woU)+|Ce1Gkq+DU3wK*_<zl^X5y}keK
zvpV~O_b<SZFv=P4e7_I!FO2*<!0-_Q08su<fMKH6H!{+-(|2?<wlV$QI_U4b$G;j<
zG5?M%7aE$1yJ9FlPpWENlB9T$8fgn6v;M+C{^zG$^41PLzY7z^Ss6axE;hshT5E$F
zEqWE(-ZHDF4>+xlgn~I%KyMxFrFHa9TI}A}b&xy|rF}Ww4JJDI!Z2m^4A-_RJ{9_J
z&_;au5Ki(E_X-R@BNuvCN^jG^nra~_*XXdZm_g<F0)mS5ese{3PU#Fp(ReyjIzOnQ
zA2;O(uZq}r>aafl01tU&*4`@*hyua?@k|%}o57{Rby3UJtjbh1#+s9eAuowvU1OiU
z)<6A)%`(EKb-U>U#Vk5k-hzE#OBGfriOrvTdrs#(+T28-)&|sno8F8tFYvkU2smCi
z2np|IH4;B(2>RG{ktCUuWc$%vlVNhc{?7fZ!Ek%Zyxp1PM{F?+fGO12sZlLcpuOVa
z3XEIfcBdNHOqA(fd-&4Dl#n~gln}L06jQxj8#14Kj4(EGn?WF;aWsLJe8%Hd_5I1B
z6H0)?M*+%ix<X4>pZjmmR5|Q(4&&6yW7Mskb@3dj-g-X~^9W!0DDR+6<YZg^EhW&r
z0#@+XoIR3eS4(Q$yJe^_Kv&8)L@wr{q_k;OSV>veZ2wYtQ(xV)&GkRlrfy%?dnz8!
zXP&0lAEvZ`Qj(<j6B-z^h{i81!gG?tUefs28`Dhl*j33BZ8`z4L9^6>+PlG4D;f}J
zILo>>jzv&V647-($Y2w+4R8;SmXSJm(m2__gNBO;$WwM-=25NFMzuIA(E;F&*YDRy
z)!+=>DsJYJ)G_qgWMmkqmT}TC;xa18qLePGWK>?Hmo>1bn{lL+%syvaYlEJH(aUY`
z8`LYj$TrhMs|>Vgw8@a08twzGd6qi|b2~P|dk)mNZhdUk%JgCa&stV6<@(Y{K@put
z$)f!=mhUrmDo_$8W6Uo(qE!ovt=ymU^5MPYhEUH6ygwttF`^Drl83V;-k*w?3{I0_
zwe?ms4u4%>fhwDYOW$<NE6CAN*_YAykg1#5Qn1*rwxK3ZdmA;tiHdY-&LYygIjDg6
zRuK|5z1SIzd@s&tV55t<VilB9x1nEI@dT3<VvnB&xDPk)L}|G$evN>pjFUyb+b_;<
z5fpV@5lHg{fbmgPuSJBOQ&ew>{qpPev5M(Q*6q-AWIom3uo`-hBMUp#D5k=xYY7ip
ztn#6i$;h`W%boDz7aA`>nQ`EJ`GOY|+3RE^>ZlhDNl8T<TO<f$%(+Y9|D5|J(Qi^k
zw7jS}zz}@sldEO^HoYiXW%AN#p`J`!MxEta_*8KK%pc+FNf>r-19H+p{L(@A6XLcN
zk^$|{1rJ{<#?)zS@TBwm;Wm0Znp8<*CnK@NiOjnW33dAqIStD8&Dq5UicWl;nNMX;
z;7f()mTA^LzF@|l!TqEy5hiK=(bC-q+T!saH#ubRjX4I$u<>p_j^3-k;#}BgJ=PGU
zt8E)~`mz~V(1)gEO`YEphX$jOJCK!i_beJXfLfK>1*;b?AsSAd#Rb7D)^JOk99xr~
zMULgdLItP<-phm4W<6nW-Xnrb;U9HECm6E*l}TBCRgA<Aez4FvaybuBON$t1O(1Q!
zJp`JVxK_ow9JRH8SAh$d|JhJ_SQlK;b{mjoUzhN%sYDq28j44B>1BM*_OfiO%v~rY
zLU3jgll%aeFa~XEuY#iZe9ZLfhvQWx-Fwb4Ldx|0XNI|5GT8a`+ot;qtp5(VN9q6o
zRR2$q`!Cj9!v6(xu~%JoIc`6Ef@N_Jcd`YeRuk>tV)~I<04D~EQ`}DsYw)tcG9D9{
ze0hm6Z1pq=NDEnSktE9#$|aPG5|jkq&(=*Qx$%dYt<N@-?6kXf;~HyV=QTRp)6F{-
z&Q57h;Aa~jsOz$A+Lw?u)-?wJ(+~b!R%~f=d;ED!KH3~4TsyvGZrClhTvxw&4ixp|
z`iyuB4D1Hb_I1%l!57?Y?3#t$Z(oM?>{lHVNTX$SLv2lMo0eTfxvj4dEuEg8UY=HF
z&??fZx;sFt#tI2UtXxbIsv*FAg&496keCDD-n3{Mm_x7DY-(Iz>7u;#Y;fY`9{w|+
zEZ>NI&o^YJk1)<6C))BDcc#r-&>ERZ>gd0L@)htKj;DdSv67-!PoMNA?ENOL*A5z<
z2+jT%V~-J65@*)5z+L^ddfbyCNb1R@2wi!XKw!*1=ThZW#*lTrI`Y`0L+e5*(?i0n
z)`G-AMutk+n$Y4){)W|$Qq=n&ge9C=`HgVzmMo%OdP+~T8y4-<1{o@U_}3pUCCZN{
zll|{K%Kp$rDO{MSQ#Yb{R47$1jYYQ33PCIaN#r9U|3X0R*sS<b!rpdpDg;tq;@Pzx
z;_l(fT%)v~I?~CJx{7k!6E}8{tl~cNnXM%BSwoF=R{_5iGW2NzhndzRv1nRA<28Km
zlKugzJ~zDfR<(rj7+N_S8v6x<_0#mJGW1RMqotq7Nx)Y@>GC3In&H=o$EB5F$}ynR
z@g0h+kX};jP?U4!CY<wyT%6`Od&5{MY%$ia6ta;XjkRHfP`OnE5Gb<M(<QiK;4@FH
zvCBl-bEZWvskD(JI^wps(H^!bl4{puFK80|sYzzo<Q`8wwlN0-_D$wByz#_h<apll
ziJ`_6Njo^a(3nSlIZA;Snf-z`D-^{iCo61)qBR7HM$A+-r6g(!6&s-$@1Oqu^X_o?
zNieUmYYe3ZnBrOhgF&>%IKN1!a3)xsRR)U!<3hXKapDw*=;Rr1ogB0JYtN>?Lec*4
zc6G6&kd&&Ritzj%S4A)<Py(tPK?08kvbWZ(_=77(ktC71mSK0TyRS&?yYJ*V;A-`h
z-Zl1PnwTfG3cT1j6?(HC2ND8EI4S}|O5s&1^#V~kpVO5j0yAuQGXHxwy&hs17&_+E
z2+$K<_bI}4mx(0vqCDu#6!QoCOFnZq{=Rn;mVGwnCV76ji3z=~#jLYD=_)gbRR1NC
zpmaSuK&He36TA6)A4padq|tK@vvBN=`@<Umhho7Cb-K9OChu`am!L=?`cOoRqo7!=
zuv}(QetJ)9@Obsil}q7p#^)}w8+zz1;c)W^iC<2ZdOyE#oY?_}g?bu>?B&W|jU>f_
z=#J>Zf%|S;B83<=5-v+0ha1U4p0o6RU-<Rmu?_f3D1Exa+81|akt<9{-D7`1Rxalv
zre!c9f^x>j+ni9|GSBLdn^!vQErg{5nR`VWY=(#QKlhEK=&8-3t&goJ4Pz^cgifwQ
zG14!wiebjut^7=>r(Y^Ywb=)q>2CQ&k5vL8xe;Q$iUkFfn4Z;##{ruSk1W>fN;P3`
ziU%JG^(O%2z<?^1^cv$2+&KR06lsWQE(sct@p;inOE1+ZVQayJo+i>FiebWL!p7|F
zqcnXdiUtzQY%`OdQ;lOcBhFQ=o)`?VW{8Q6TwZK6f`OuWGL}>_ax`I5g@AC2d2dW2
z3N%QsgbF~~xQReMyQhf}_o-gRP*5+5fZ9bciN7-O7XU>7uk>gjek$`hh=I_$C&*Q`
zZ-4F!z5*2JI-Sm2(dv(PBQ>(2aBLF#B3VfIF+I(Y6Px8%I1GG;wq0zQ?=4N+lN><o
zrTzC;iy(F0jie>h-+E3(G(M<xa|j!B2R|{MV}v#JuEA{{OW;(?x0toc-Ys^<1a;G*
z4{|8AAkDjiC}|y3Cx?i&$e-JTC~a}8G7p1xw}}S66TCqm-O?>cnWN5eXFG}Psd4YX
zC4_S1Tyv63ID2U`A=sO%s2f#3sqX_3%J`~a;t~BLO_hzmXMK}VamrAH#Xx?c5hLar
z84<x3!{j0HOM-|k?%I*#9Vm%k;=B&j!urNL`pRxMF+l(s=URhn3JUvmV|lG${3=sh
zVI!g|<><vPGQi%nS0D^Frcj|%sMH{38zk&akVKu>Si&*1%uv~x^Z>!#ylUora&P`H
zM_K{z2}h&N6-skiA=AI$;Sx0^=$G0e8>s<F`^`$kwa1tDSXT)J-Vg2UpH=Ah!TfA!
zTm~j??}pD?nn#J9q<}<154i&2*M`YL9g*p#QN81!a7<^A(=9v2Iq}LVkorcW*V2%t
z{;D#AJRx?kZNw40+4nn}kMuVyTjz9c`xx0&C7tzoKonxx7XnG_zU|NnNRVV1Cq$xB
zgi{zjAW1+hqb`#&jZ{#0nTd4WjygGdilyU&n5zKkD%b02hGs(Fl2xN$a;aD}QcpRz
z=b3~t5_wROL4#>fm(zV#5VGh~PW29w-oXOSv@60}6c`z%0}DcLWl@CG(w333yq@Qr
zo7)X@&OP&#7qwJV6hcQFm|6uln1>7opVldKCY2eQb|ezt4A8#caV6fMeNg|U(j@sY
z0wpcBqa+ct5`4Qv6WX;nAr4+C2@v23CN-4cr=c8Fg$p0MjBHbxlpKdN0E%roS{ozy
zkNM9gMzc@=ay9or+h&Yu+SCrQu-YxXh9sIhpTOLJ%U7{-7K`OZk%MATjh_oM^xot5
zg`uND`=hG#vRsUc2rZcewR^2{)?0ZtGj>2FXa~V{BR@(!%Q4Ez(;n_GH~b_}ON!@D
zh{<*c(aOTD-M*v|-^9H{6ylYPS*%@c!L8MI)^6`*FdR2$`IN!O)Pf`QJz0J+8)H6A
zbLBK(i~*E@dZmWo{su+i5KwrkA3#y=o+=zRFu>-_4)bUogVc&fKFyrjr7$K5AD&;i
za8Q)?-YU)`?o()Ex=G7BN_G6nNH6fGK>Jr^13rLJ26z>@{1|7f!MWDP@f7;L6n`c2
z3@PNRjH*$lHfkocF*cPkDL6)3$yE++3*qJi18oS90tKRc5=^R*DBGu(0e5MBrWgsl
zdog$NTkRflW`LlV15D(4z2lx@4b{sR{U)ssID#``2YBgz7kC)ENfFft58gL%C|dMl
zPU?VnJH^Ucn%aXJ0e%dR!vR-PF|xjF>SQ=$?EBMLk8LZXW7nqcIeT(AZG{!>s4h~k
zY|CV;@ocec0Qoyv?n|F4?{i(fuh6SWSs*DC*!VH$EuQO#PIJ=iAkm6+Kmrbm*p9SR
z{>^%t(4AGJVEt?<tBpp=;Lb12?OS#!eor@lawgq%6fVabQ1@W?7GygV_d!;mG2r<R
zfL;Pf6ai~rW2x>z?hkHu{=G;w2u(-O8>~|IGi;5ja$0d0v(BdUE8je$2;bK}>N&?{
zV}}`>qRKfhr<tGY4>}-U0a2~bdFd06R?&LGC348PpFxLWpF~Q}h_oB`ZLUdRv|G{#
zU0l11mvWc&Su}@ZaFzhtpS8(PR&~cSopUEHy{QD!H7h#KpfGa^MeZhtKESe$cYAK>
z8IdKeZs|V<=R1ay&vwnfL1}Qj`pW!Qij~0)$u8^qpbSOdYV4PL9*fE!U6*=WtSN-t
zg$uOtGunV8CdjeK2fts6QU-=?&<#3gXm#GM5!cbW@;-rrfp~I4f%Jhek#^rK1GQPO
zPT371mBq{FF3tmzd4Gljrr>$7i_oeeX_I*u-ERU~_x<GKmR9?gHSaI5J<Y1+3#XFX
zIIOXsN>wFNS710YXRbE~Uru;iuIxp_4+mdk^DzvHt?|E|^E^r&h%dk2;W5gHifLF+
zk-ZP}D4eaGN&pi?1&jfx6hGw_)7`^vs3ZsUIUbQM4VU{46X2a_cF4({-6F&YG9Cff
zr@Q6+q_f{fUhN93;8SKM!lp@gcXT}cx-Lv-?$_Ue5g+U0$XpubTf_Wpz0`vJsZoFL
z`!`CHFFGC83Jn18*D?5amm%?cOKF<_=`t`=|0SIMjnr5>TREBQ8e17#8{0VjYoI3i
z-<^g|m34;<It1@4RkvFkkgkCR!Bl(_bPY~vAnQ5O*eDh_Scr(A@UO1j-4y~h7gLS{
z@ip$F^Vw4aEUF>MnZ@UTD!eG<;|>vg<2?>9m)i+<29dCrX$1Y^FspclU8nE}z<~5n
z8IBx|-HMa#Zh2v$UPO{O`oUPj1x04mvXT){UP<7t>}sa)@#Rtes%9BK=5WA6+X1d=
zRQll}`QckCeq~WH<#BQRf)S%k>?#Z5(Ww19acp7wO6q&!B)VK$P57vWvwaw8(3+DR
zK+b&gC{TLp({$p+6{~G#2&Xo6SbPP_Tc1^k*+6^+XQDZCe4&&^i87-6y)=kDVz#E$
ze!?sOT$j+2ASdvgoLBA5VGq}ppQWDxQ2=^+cxi-|>OANwlhLqhbYiOh@KPG97n7aF
z>yFk;%ZKU8<V#ZOQ<0M7Bn@U#JxeHXQIu~^%;V0uB-xzy-OBj^-Gr%(V0&#DIJASm
zcIryU>8DqOP}n%_OQFpHe*Y<&RBdjNdw%<{aNR~wRCca@T6}X@M|Qz#bve9(DTQZM
zZ}3|<w^di@$kN#4qV)l^;DPhea(le@D4)i~y(%t=-KxH?R^_d34ro8NhBi)lFc-SD
zx5}KoOa1MNGO#pFEnuQP5*Ud<kekU2L&{VMCrBtyvR62Q;%RJ=?(b4u2eDRSfN&#Z
zMKMjcHyM(Y3sFKFXMwYju#Rd+2B~sIPYg#f0i$TI7!gk$cCk`!SVJYp$_6y=a4D?o
z3Uom{6VD9e6m;@cSMxUR+ggS6{tL*?jeCC=77QDF$4AeYUGp6%XUmukCOhD?sx#7?
z3g2hGr{f~LLObRWOK_Nju`iW|*0RRj6Fz-?e!&q~{DvFnqeT)NJ`Bd}&o@uCdwKmS
z&jYIIZt@Gh{to<aH(4y_cCYx}R{d{h`1fvduLS@=`~TWa{>8aY|Mz}!fvxSj)^gj~
z-A4-lq(6;6<dt~lQ4LH~<Dc3%+0;qP4F<idS);yAbg-rC{fulSUL)ST-j_%{DaKfk
zHfzQu@cD3NLd^xtYsdBUk>sS^iR9OQZ8faj*`1!|nl!aoJ;up?{hQh@#}@38QO#2m
zkB^D9B|LpgmpgdpQ3NG$5P3zdm-$>+dpWxsX*Ljofa^xWjkM<{f3r>i0MSUz#oC%0
z%L?c+v@PLMxq|ZVCLv&uu(s*x2kcu(J>pVYTH0k=XD;nZ4eN--7_-%;ScJ{Rq<~r^
z+z^1NokWohK+!gO?qE}@SqE;{?i&|>DiO06`%5p|L>A&n3Jkz$#2#_2X)x~-4iJ8~
z51>Q9>zpi52#0sca{AX9#^~(4_|aYdIgG(Q@=>Qq1PQ90Qlo&Af~v>2oT5k5llnpt
zM}&!YJ7l(sMxcVOy1UJc&8b>jqKY;30FzFF#^j5!4WQ_;KAi>1P4~{ta+<@&mpKB$
z;*l4A=bHb;+Bt<+!gX6ZwryJ#+qPM;ZQHhOI~Ciu%}P=+Dt0>c{paTNslWT2e)?i(
zKRefJthL5m@0hch;Io8$mz>@5`oL=H9qpR7@;LCq!?$>`%4GyhwPD_B&82uwdzm^r
zc&VKE3|2gJ3k-l6;%lG4l&pi=7N#Og>plcSL-R-czDIZ5=j`Fj;sCqLMbOHrzJ_x%
zs#>uWqv1*Ko4IWCyRH`Fb_TbR^}2OqGGBCAsY=U};nd)WYj69m8$j)O^~q50VPwGG
z^k#4WYJYiT&HHHYV}Tx*9y)t27biJBJ4_@bL4Bs$^oog?ANQrIFqlA9!(vi=#iL7o
z1rD^$`CX_|`eoNa=x_*%(IIu4VUSRn0VE_K$%@t$J{9=H^F?&v3q98qqh_#f!R{jL
zpKMMs+>qZvDJPUrR73kM#bI@9MPSuHIY#6|^Gm6SG2@IkC50vh;yWA>r~vy%iIo%k
z6Iw<&lj|~#dOs4gi8Y7wdmomSA2!ts3Zv_)dK9#F2zGz*vmORhS?Qc6Lsg5G;1O8I
z>o4%JGKnQk4e9j=1sv+eID6_Q52*?ktXUBfnIVJ2L#>eJ4&YgVABV_77NB?d_o(ti
zEQy_dD2Cm;$MVkmEr$GMAUT$2nyh=!_`8=x{jo0;XO`^L=<OQ#6k9ee&wXKNoYp0B
zJ2M$-HSqyQ&xQL<eCPQymL(+_mQ?CQCDIHKTMq}t@ca<nA#p5~dI?3?K`9M%`8=yr
zpWtYFS6r4CUv<t6oTlW=AB@QsgD#P+MhXPAJg&~@fRxFSBC{jydYdw!Pc)Hj+peTS
z_`h>5u}Ye#6iqt=8<N-Ttxf$^b^V0}*y1|TXvsY%nSKQaJXzkF;Jn7u9Ozxju>{h{
z$O~U>=Jv@L8VOAVTGSCNzbcA0A8}ESObID9vjD|JPfTNI)wJPk*oV?DgFUYmRdrDM
zQ>^hkhtD9y7$}~jPSR{iSk5`vN1{mVtb!A+Cea~)HT13fk1!vfL*7+_aahL6i{o(A
zj~sLf$5=VkAz)<bFWvPaJyERF8sgT_VN?Cw1aq0$=-aiborD?mD#;H*{dJv|s0cBy
zX`ma{r_(4T-L-2Fh>lG&(7L*-+bEEdt&hF2E^bX%f)RdU5FvtruJjgJGD^?H0TM}$
zUeVWn!2dO{utfo=3L`?CW;{uu2~?<^L=8CBijLGWP}VRC(KtSm+ua(JaGKmEiyp)!
zi=*@~%E%2NND$W9&Fs#)7)p(1MV@~mykT@By9ekvOd63&QW-VZ6giHk&Z}5e<jCet
z9j@*7=Cwq8-sV@*U!z&gLMDlvT4mZ{d>67Ti^<K7c7>hej+Ua4<xVd6L<BRAduh<2
z8r3J`y8ytZ$_W)&vw;4?%)ulNivm%o2ha#c{Q9yw)MOfN#v~NOZ!-Y~UfH<*(yJj1
z%aLeQC_2Mm)uXJk2q~S>uN32Hnz*O_obWnuLPd4A+JpAKMKL2-lEHDVoM>9)t%1Rw
zB%udwSs3ww8Ojh*ZK*N%aVm=B7P^^Z2J3<&gBsXPwke0UiXNDaMi>UAY;n~V6PhEY
z7~T-dE25%PcY7FwEXgiSL&h9q+>%XnOGP%N)00DyokobGimXgXv|Fb+G-j0#NdqVb
z>bKH~{1u8Hkfi=!g@rMcO)M86hI(|~KJ~$u2>uD+2OOw+eUxyj2C-xEeRNLQpY%T{
zy~o|;;Wp~C^*Wj#dSl{mVQu$<ROuI;9AgNq^Tl&?Gbs8wR2J%g@j8HqtNPNe9D!Vj
z{qTkBR+>|U`RJYcC>%(B*}<w=^l7v^)GwRDTk=(HMOyHJRGW5CyI3aG%73HV8)t)8
zlXVm{w?o?3?oYnz|M;pb2r>?OBLq>%MV&H9B3p{(NoMIyH{<Se)WJWc^pq}!;(krZ
z#0V!+iy4I&D6X`)77@dU{6-uuprL>SHZCf9Dt-i!O#hvXzhYs4RB*gJAqwYZ@$r1C
zplBU>z*++VV;oFVYfmY$prZXaJ6t5f#X=EzfA%&LW8~(2Q~Ea-a^&P<85;u}aUvDt
zTFOz*;fCgneK{&Gq?_X2(%H_!X_q3>6FGmei>Z9Ui8rsLTWD<0sa^cuL62>@9khd6
z&q{a}^3eK33pI}Pw|q%Podk$i%j4LlVuA7YIZ>b4epU7da%2=7d&pHXeqiKuG$C0c
z%SAV?e9oxFBeBE7Q0Fr-h+Ay{2B76}8do|@$Qtn*X(rs$Iy)7)JmgEZGX5=-j&YLd
zYJ1#s@%uDJuQ2Gbark{Jpr6&u7(<|z%(y>kLZo&VsMr_e%SG%dmpVaRiM}1)I9yca
ztjZpfWP<x%X3^5Q*|>7Xr5q$<lJZx=by@p$gPUw0n|%ZDI??n5)%Fg<(;Xn~&0e@s
zFsA#AKte%&!p7*UPR@vU+_6HYt>ZE0ZG7gOS;pGh%F{s?N9a!rA$t)WEjdbpJScAB
zKl}-ILCgad^c}#9!Xp)BP)>d|+mZtmcX%9nXU#w&I(i_#z6*s{qeuv%B)r$p2^MWJ
z?h_-auR@GM4Bd*G3^_`G3E)m>q5tLxVfc6VrL`&&0eGd2d^M=)N5DknAjTYEVJU3u
z3^oSp=_MS+z3P7ZT!k~2{Fwwaw&M|J{tbQhIFV1mEr|mYC~&G0iAyJ1NXu<HIJ2^_
z4cYw(H=`)&k*L6!mp+$gtDn4i-h_&k2ZN*+tdcn~c1#YY0blrxFjYkU)ZO;3$(IMn
zFFkEpFQiY4f-x-O!K%~W%#2o1T3GnqwvyN+2)b(wiA@gSZQ3pLixY4!QLJ)zT@S!(
z)ekJeoq8g|4vx;2<`eqbnL-QMp}6<QEi5P|ilj>cL6?FSy|HFKs&*<AnJNOBPYyxR
zB2s|`DE*qhJj&f<CY}DlknBv7S*fWcmTdxMdQLorc~&w-{=v9?Gx9yUZs1tojn<=t
z2G8rd93#kde9LN^gHHQRs{eYnN#)i>9*yZUOP&)FoWLFlxzxnxTFUI34Nd;@f<}Mi
zcMn9m!zXS{`o-VkneRtF1u?@bJk|~jkUoieC|C%TUdV}N?@nZMJ`Gd(TNW&uThqpl
z?1zDh_q5V|UhD%X>$TQU`3+A%f~S1oM!T(!(d)o!6^Mq}*ST;QA9sA@y=Fww!L2RI
z2z>q-uG@kWu=`n8CD|*gx5rl=PEP2gc_;1&b{xmu%S`IL8BrsT#RUF*g->K%{>3+2
zBmL?Uzx1j4a~E^Ua*Hz95sNRkcAJ-xmNd0-E0E_fqLv7C3ksB7#DQ0D<eJ{52QuL{
zsIzU*vzAgYBCi4<^y5^VDIJ&|k=-&bANS4M(d8U}Gw(!}x<?bQ3@zx<u!X1U?kt!c
z;TX&j{v_ublC_-I%r;D%)lI^RUB^#dIB$V9rI%j@amtA#!JxK8ikhem`s4WbL7?k&
zH0iEg{NZLzvDZr#b3y&{>%fS?I9T`8Gn2)paJIaWN-FeW@UFny>6gSZ=+ZLuVm#o1
zmC~l~w&hvC`g^Lr9KWC~`!SEQXe?X*RvzE%(hqu7K8*hClAV~B01lkItFRaGE_{gf
zY<lI-%2RJ^6A0uboZeqQ2$h3gJ)H}tVOG;KP`%?R&nJj_=#AMC?X2~XDKe&mK5YEQ
z<<jyn-a=7%a&hu*93dVug_(Sna34rB`qXU_Abh=7yj@eyOte5qir(bsqV7!kCch=>
zX6(=fi~-}I@r@eXfDaZiygwS;hz*^1zO7J<|0{<IcD%<d2Lk}`$Fcm~%l!CqIh_C5
z%dq|{hx*S%r+?z6f1;;fBb{t5&23C|4XwV2jlbIeoWI+eE>&%%pY$l+M{4xl3yof1
ztyq~LYU%@sE^023kvFJaie%W>if^vi-g}X%fT!Ct(K9w3r+M1i#%6^?i6PXsBJDt>
z&;;ID)I(NjQ)Xgvg2UQ_@?K#8MPx)5;)b6Bits_8@Hi?~P90F3>~_i=L<#}#2}Gxi
z0nJZCWbX_O0<j%+tB$CJ_9C1cQ_rf1d$kMXhOikVkYuLKO`H~8UlJ;E5wvH>%A-mW
z%p3VE`69@481d@}^z`-fi_2)<uZ!>ebed!XjA;BjJ`k_{3J70lq;J1BMQv<k?V^ga
z?^uo8CVeNVu0pDZz%9rW4sowQp(~Q^!r*CJ&mJ{y_nVuwm`7d!UN?7&;i;YD^|oM<
zPR)pxt*q{d-G&5c^b|fU`|hnKUb{RD#!Ymcd<8_M=~xnYySBASe>A*#d=vqyl<cTZ
z7OY5Zga-pF0|0eFtX*gudkG%HQ)la_Fji|#NftIsd#d5e4jXTxVJ#pM1)RQjZicen
z>)rb^i?y)KzT&zKc>_%WH;P+oMW)pK!Yh}xcqdz(<<=D@ADYen8e-ETmBzR$BV&gr
zw2R-2r_oo3ec<=fYSt#-W^^pRk5<M?YEO-1pS6>Q;F2-kF=7)wZIi@Idds%rlPJez
zsaDR`or%j;<dNgBj*%K%3X1)RJBdD{6LxW^)0hTMx!+@+rFu`O@_@+#-rCGo=vp{B
zndPTF{=?7{HETlTf*Lj&Tm&XJpd8nDh04Y*b}s_ReX9BeYvA|_E{(?d`J>@#1f5~s
zfygLd#X`cs%?FcbwcN%lmhXfAM^q18?s;Ma*{XnYlNToMZbYiB=m&Sw?Nm<!;}QNJ
zM<3x^!0Gel=>M$szpG$Y1pt8S|3w9Varec4m%)YBmSce=ns07T!1#jAlIURClLAZ&
zgkXP+0&tqdgK-6Lb-rkyH38=5>xE4mJn`(Wm=+uBQK=%19dDmf&6lvJk=pwR&tM8W
z@2j))S&Llz*#_^C`xM=oUnwrze6K<;L}0wD{8!Fp9<_FdwgjPToqB07zC50g15<HF
zz^|Y+0<-<DW7R3KDcsM!13|HT``va=-%P-51pt&xxR-$}cY7(!);=<>8iQGPx_`=G
zAe{Mh>Y$|U0L9gJcXc&w)0MT$c6g7qymH&&2xD{|rVF<z;@c1|`~MX10G9fiYCT94
z37&Ihz2bus=GCv7R7mKX4O=|mK;wT3QHM0+x+`uLOb?-Hd(Gi@yws#Gf2|uQ^WI^Q
z9>Ecvd=X@X_54U>=<E_koZ_Ke(3?TIGW-so|0(oDI2s<4)<AIyX9+4*7Fz`2K0x7+
zy_W|I+QH^`6ezpH+tYdKJW~tC%HGn~kJp>Ch1~8!!(d1U#j*>f_eq;um|M5JJG7;~
z0c(`0iq|(~;YsGqUwg%G7anbwb$h92Z@=9l@cDLAu+f~GjTcmht(jmksUfIjmsW&f
zO1KN^7t#wOfB_1XQ(9}<ZYp@tziVY{0zKJI+_d3cc{}y;SVesE`UvOv!PajU_;vC|
zG1X_<qYlG2tRp%MR3Cl@<=m}$%U91mxoq~lez@^<dt~k0^=xr(nE>4`w!KlRr|$;w
zfh3{utaLX_Nz4KS@R>jyef7=saveyu-1!VQ71Qu1pdW=9vZEE@kP$RY4SGe~b~8KQ
zAh?@@2+DIyMA|j#Etgpkdqm^?9%%4^7G}Kz9p59_&v|y=4h5%Rf7b<-BN95QmQF=y
zmo{vJfQQi2*Eaz8)rAD6|9e5ytbI9c0^LpU*+9KJ+TPE8oeo9KgOg8Se*^pAkbXbt
zF!7L73c-%oA{_A)^LU9-cwCc6ZggOBWV*1ok6FM<OBf`3ve4xjgc*zU?IQ?uk|;vt
zZ$3K5>+=}cZ#LKTwShz5FWZHgN!JAZNIJ3LgmZjoO11Wted0mRUEj*H<^eUsAxJ(a
z%5~ntQb=EV1gp<PTI(cJ)psu)C32EGsBe<}(RBO9hc=6v0fH*+HK;azYqOS-3>HmF
zG3o%_u8`u@jiS4QSq{NI8TXR{qlwakTvm{ja232lRB9o}Fs1i@%_2CEI@JliNkZ*g
zE$3AFpwj&IQB>WkxD=d|La8{4Sz#dP4!-%qQq~*qUOi-7#;*QzP2ojR+obWi%zkBZ
zxERQ&Q{+LgeBng9as48V53|xlnMl~gh`QX7*hEUqqQCFw?p0XG%WpF+s4aL=Lz|e7
zoVjDj?AVb)*E#chx=*y<qZE~6g4dDyrC>fwsRGhT(8SyRhqcsePT)UbhXSmQsY)$#
z@g}^BJRE=zBc6zv5or%!>yyS|y@Dqh*CpjJw%R5vm?}h&50T%DVFgb1GUmzEj5W71
z)(`<@hF&na+pp1E>&Kc8MhfYZA|&XEo!YDEh@%v@4fBODW3@b=GQ@{DmUn3*hsLfS
zC~|>p$M2YaUKFsjTFfrzS;tbvHkT&mO+7`KoiW&^D@}u0=R#S_jZ@B&RpugEr&fRD
z31|j3^Hkt;{`w^`YvLo?2>HIO($LCcw^2I2clPm{#4giYv{f6T+6TA=%;r^@!|UXe
z19Wpy?pdpT1B=;n49xoLpKj*l9H8`khiokZmaZr(dDW8-VAehO)+ryDb7W5611~?x
zH*@?Sk%@qlT<vMKP=bO8RF(93#0!>?*446QeNA=Je>Vk)bkB3niCxa$i_$}A*VZF1
z!nQPyS&|vb7pbufj#ul5(A>bB4gt`uVC+e6Rp3?CdSO;;L+55`MO;x{_-tvbkPrsG
zWtVx3*nyn-=LD704Nz2T(xlhRLTxdCZjfz_F9c({j!DU_rv4NcF~fi<7GCNjrZBb6
zZ3FYiuA90CYqRwG>E(??)+oY;TUM*Cj9hF@9oTVD>By>1+iMS;+348ctL@SFsE(&W
z^y$-D^0d@}y|BbG%@bJM`Tg0pw}BA5;s(d+_b`rB9ZAXV0dz|du)A-V1i;WfiE&LJ
zc|*R4B3W6&LCuLmaS=^dE?2)*h4k{n46fz;J>_Dv-|*#fbJdL%-B0nso-w_NEZinY
z>yR5{6yGaCgu-!Oz<OKWz>=t{637^1d!+Yk&;pI+Gu`H5XrTjMv9HELjEWh@ry#bm
z5kfFkt$C}XTk@H;wjo8Cue)9K-pGkf_^y&l2Ye?e+ZA^8lY27arCbC&6s>s+^^-Ec
zBpHK*Mlh9{wy+=sTWH@d5q5E9FE%4>0o<ke%p@QxQ;`s@SSyWC)evtG7h?2s!%s0Z
zNowJ?$~Wja?nbyYl3!}5j5-?lCdr2V`i38Y9^F9?Nw?k;@pqDUssTP3ejq-tyIq+K
z2J}>L+7l`i6GBkpx=yE8jE@z9+pw}FX{K}gP$npEIHr+wX=_J*G><LYC|<ObW{_c1
zm5#Z-sH;s85<Z1;{!k8FxMYc4C;?+rq}9OB{QTKCLe5E_n||u{HbX|78O3ca$_vXP
zf&n$arIBm4Pqvfc#ih~BGivB9T$wqp(S9S-)Oup{ws@eG=vX@1MlvLAS>d%0v(yNq
z{p0SWXsm^7M>gJeg)QsG42I(dwtK9OY{17iWXcXyNo><~t34WBX>FdI{mf`!R^=t`
z5C@%8a_9t$ZJtGj<(dulQovlXUSdqCsAx7@8b1h-ZQ$9J*pmJI@~Az3d#{R#qx~#X
zy4vW7Em!@8eeJotu!o-bB)+L<I9>+6GXVQQEEB01^yLjYZ(E_AP-|qSeQg?{^G>2o
z?KUVYA@n!0dOW-(oFc}Bxa`%L7V-+fdr*E#Y4z;KIq<=xS86^y(F2r7T(`q$v29v`
z*qWyyY7Jh#%pH2<ROm%P>92Dah7%<BU$Y6RKlK#MCR`jE3Qe3)kCbZ4jZzJ&hG<Sg
z#PPP(T*Zo{A8O2v7|HJw^MixNN~5BRSqLFHyr<NjF%d|4Z$`1=*+2jf=+Kl~8@Ub<
zp5M7p@fvcl8#ooYbKxysbw&x<l!O*M_vY^x^*Co^c=YBQ$!q6*ETX}dFDvkXIljYJ
z<u`ghHL+<;e+E<oj{2-g2KMEV->f+Y<HHOe!en;4CnJ(j0(4#|!1~;wNQYydcosqd
zqc%7P)pypS^6I@3XZ7D#GLUW)?1Z1!RRAfq-&tEqLrQBL&r5DEs&);R+|}x#&Z#vH
z;a6Pjt-%uU&?U<zXq3UPZ6oOl!SICAh}@z2x(TIpyxi!R*=rp@THkY_7@nR_Mg5k-
zXgJ%l)F}R!(Hd0?m|Fh|6#ltL{+lc2*Az##|9r({qjfSjv@~|oHFPl6cQV#hR#N^~
zy6}(n`s20!HaWNa@7K%ZB;CXedX%A^M<w=dsotJN{q+2H?F)+z&3f(ELE+XjM#(&h
zxR(oT1hl~BX6|@TM;{IjNOf*9$l3R&m`i<h^4S;E3kv+y!;ObbgfR@l%N_yYR<aIv
zsmL|3!*39hxE3uo-)|@ncYCCaMTik02@W&x#mXwNIp;&aURaIu+1)&a<|2d~R3hOa
zuS@7jerl%~r<08o(Q~@i5f{HeoOm#dGGtJZjoqtclW2gYvxOIa&HV_@5nKy)()8Tz
zGnO5m6O^@jIqLl+WS$;K`*pS+yjTHe2j;+9>4FR*iK0;pA!tI+-yUw1c}UPsNeL>U
zIwGY(hMgvNL5G<R7$;y#4-+8!Ibd09_%e77<Kexf3r-AhtSP=!Ml*swU!lF`#{%9A
z@4Y)dU3VKrE|;_Y2s2|BGpJbp(@ra|)o700uRI@eSMU{i#cuO?0;B`^@eGmbo{fAk
z$`K>gzL}mlDbYYh4I%y}Tx+kHr<AS^!OdNINy#J&`Qx*fjw=nkxhAvq)sK(QrFcj5
zs{Y0lYBBVic_Ww!yhXBN4-Jox2m3ZqliK^0t6O^-?d0LasX2od&rT-%BcBP&wUY~O
z{%L(@jCfaUwA2d&92_|a&Wk3(b`T(<pY~h$&>S(ew>txNH?k}mA-YA=aS%{}?KKq5
z&aHb-+CYWR$K1LDA#{21M14{S<2aU$dYK02W8jCusG#X<-Ru&=sdVh`rTx=V?R}qr
zy01WD+CI~Kd7{~`W%>67TlwXd*#E~1_AiF0`tK|D4;E0skKjF{rrtRKP=Ew2(UuX3
z-H=JKW|Uh6**K=`6q1d}{P7NlE)tchY`t^?vgP=4cX)@gJv8E_stJG|G#6unS)vMz
zRUbCH67ztebyDN9m+Ky|hjCosErCvN$gqeK72%?PY4(+vvJMh{0&}E+Ih4@`+pneY
z7LebKQ{}2GClB2(MyLa%&h$TG4-m#6%p~4uls00W!w}BcGE%7ZO9iscn>d_TUuNRm
zV8$MGLX08G0XnJtWm+Z!%a+IPW;2OHrO2iCp=LlRjj27QLBy@xTVY?ro|#$_-Iggf
z${s|NPZQ8>ERHa*-X96jO+XkX`L629?RE;fzx`w?+YG13STK{sp-rJO!itJZ0MQ;R
zaHVg+iEL@$3>|}`0qa_-{+k-+#i!q#OG13Hxhf@`cw#a0D5g4a%fX2&Amox2TYmy*
z0cNI<+W@i#47U%a@&#CRVjHE>jo7{}V$af01n1|P<gN9l192~G*IX3Q7Dw)~GuvRz
zb{Ut+6H*gE?-<h>y^V2#M4h&H6`Gwi==68`6m_z%b6{}}%n2sTZ`OrO6A+$ghk2{F
z8@79A18@EQLhM6gvAHkS=%WB-jY0wS)yFK&jz|sA6a18qtA{S|<J#nSn}>%FCUYis
z<?`bGDwA>d;e_^Gxt`_$<U%uP>cPu!&VpKyzuz@35f6N6T@R<op!0}C85pbhb}aRN
zH^vkRr<$~NV<+u~5c-EvXDn$AX9KV#l;mo<8<^Ah6OP)FCI=296-OqjOqXp_R*r@I
z(n~s!ckqDFh~j-woDk7L&ha=?0OhsQI{5rAOW$^^ZVUU2`DSxIntb8#G8h|ovz11C
z@fU9dLh|2xs%S?pMim&mYY$3!$T)bM+vwkh@k@`Y+ZVyZ$E0z}1#vyZucM?TD#C4+
zH|Fh7)RN3h)AsLkBoBQLzkiNsB~QmX@nUPL9OH313!Lk4KEEsa)PAzR{gc1+6S*M&
z^`*5xiu$|OLZJQ&tIz&VJnBy?I9*$lub7nkzr}8}{;sbnRT;;1dW5d8y4$7zt8RYO
zKBfi4Y(mhWjgVZF!M8zVnzjVky&bg=0Al)89;Xss$O})~NAndltkPBR`V-hOu;s<j
z@zNHu&QzNnm7T!eE5gAG*DpU8X@*jv)GRm$Brq<tG%h2;O^JIBta85iBNP|HeX9h|
zf}$cI368N3E*<+E4O``BjrNT_fo)sj%(eqFYOfL_xDFA+5gloyj8XxZ)T!>l_eVLV
zefRuk^y=XC+EX?Lg^k>843MN^!BzYEmzIr}W=woFA%%7E6Cy+t1yCbWBdU|a@U88@
z)nV#1m^-lU3r@d{CYKR=i|TI^Ce@bvHq~2Jln<GX&;YcsV>lX>w&4AR-QR$>+3TV$
zfqM+76{OSavqTIj=^7!N_41a1cLm-PYS!7vYeS5&ekl=AJ+X;JXin#+KI9uPNVCT@
zWB|em+JwQlE<rN*xAiWNU3_KLiGzDi8tKAEQKfOT71~wzJMOKQ5$<yaZ_;~&2w1s8
zwz28E5`PrEds#3(qP+tY%xLn3F6(jTxZvv?%`8m6jg-B5-&tls;uSU!Csj%VVI>?X
zq=w#6JG+QM72HDy0>bU)FkYE+3~<4V+bKH6v5e%A_{|{qQknq(x~#n6pa5IXX?W9j
zuE=+CstJlHA`!I^$#jkoiwg0H=>+NMLDE<ta%PMI_m2Ej9)nWPb+qVE_d&hM2Osj%
za}eahztixg8;?~@^~dgn6F^r=qq$KkWNeF-Pe}h<cDmKgm~N0+wS%3TM1M7TO;S7J
za<qmMBh{`1t%+oUo_Us?j>o$P@3sE*f{wr-*-5(6ZHSao+S~6KK1ULdoFfrWPgPu%
zpJi|x|KqXX7i81gz7z-31X94r?(z49=x&afNLB|vKhy09DN$03<yn?T^E)%TX{0PK
zc^0Sphf%tMgXuA!t51`0%8xI>fJ3mp?1+wh3FwbZ{w^RyQ~&_l|9n{eI|2RWgzEUa
zf|k@ZUDw$WzOu`^*KqwoMQ|hb@Ds&jtmpyR)~w$+`mvC0ttXPLC_a6RF{5O9Rj0?A
zwRP%>o=xtiqD0a67h-#DY5eVDL(pZax6D}yoG5<x4~g9N<uu;?BEJpnql_WYdKlS5
z^1>1j>J{AHanfbh{mFhxJeZ9RL2ny5=Ts)M22_j>!OFg9<z*J83pPSMO$Z*@%?d~F
zAJl@2m1iS%mN$)A?^oL3sgsk`OC95QY|&&<D_hiNQ|cJO$=M%Nhk`+uQ6hYZLnpAR
zr%{T7knzIGqT)n|GjE4G8-#5JOnsJ4k9FRDb16_Fu)f<bE)E&h=mNuSQ>!=aPs;=D
z7T&{JSJMq=ZE3b;Jlrhlf;MNFn9f0thBtwU%b+KBSu*fydU4nGSOv?<%4npq6<rsB
zZpXrijP{T?NbEgAXjEhA0o_4oKIJ@bnT=e%F~8O3xt;CGbuc-`eA#PU%yj)@*LES~
z4N3Jm5`FCqVzEC0L-?cJ+~v1eHUO`6b`IkFX?6!W?N*=1*<I0!{jURJfV=wi12kx+
zc*@nCBJ}|i_5=0y-U$1w>-?|<kz1-pKlk2D&v;t@+OV~gW0%Ls_oGJ3y!RgiqgUbT
z)^?d7j`8uPT*~F2^otT{=(W}_u!6Tg9#>ZJv~_jP*mUu)YG?59dCzotKfT+O)RX8A
z<jhktode)#lf3TV1jgF)1d3*F<NUABg6emtvwu1R=yOXMCekhzo@tisSY`UWb~~Fh
z16|U8qars_&;z5ZTU4kGErzJXOJ&?aKKHC4catq?_IH`ukE4f<B>Rbq7dAWHf%*We
z%;QVkPsF$fwCd-0>h@HJK3>4`5!e4iUGJCEwHd*)vzA@>JBW1r*xCqU1XVM%VzQAB
z`ZPITvg7D5Z;@q5j#G{taoCTeTh8(2rv@V9>JW!6V*&N(G2ijk=JTC6dwHdaqPQ|}
z73Ut33ATVHo%s0;4;AeiMoGyG<KK$uR>Pfi4uWfUE+xZ5D)Q<mvTSya>~(a9S;kV3
zsn(yrtVLNYDF8<XH&&Bot(73DU1Y`$?3*bqC|oP1`oKpXvTW;W&+hq~TH+%*ijyP(
zU{4bvqsd@;?@ub|<^?B1@PBx;8WLKQ-um{2U)@^2ot#K02MH11LvhHYQCzZ}#EbhZ
z2{osdPTFi&INoZu{>oYVb>FOkNT@PXI<zKPKv8LtRxQRp%(6fzXoP@dc{nsZ0ULwT
zNg}CFBfGd7u$qFM?ElcQm`p()CcMXPvdtYX@O^GjNB7dbFvUQ71*+ZR%v%E20~sB-
zyhF=I(KhV(o21`dt)$=Hz&S3{ZXecr5sn)hcu{Iy$J`TccAQG_=e;Do{8pcc7XN|B
zV@SeaEvGddhD<@|9cWRAWS@S;@14klI~f6*;4+s;wS4_J5{Tszh=?~n56=px&Eb17
z2NOpk4tk5ciqf$6(&%$k!<FrB%ZyK;KU>=CN_W2cSAOr$#`X6t?JqDc$NvDv?fv_n
z_IDT;>u)e_!T$lq75NVsxBnj)_uIdNah3jiFz(fVAI7cy{|e*2{@-ETt&70_D~wD2
z2gX(XAH%q=``&G5kR8!lT(@dqi=i7d-}x<KnrSGvWvgv+(0hPba=~`KaeI33ESbj2
zJuWPi+N!-wEybQy@6vf}2(B4>W5s*nV4L1?lbzv${<wFHjMG57*(C~spfH6UfRw2m
zm=#YNW2a;s(n-%S$;&RM33w>S5aveA9A}zzYtSd9=s%$@`VQW7-~x&x8L*U_h6Ijk
z5>nnuIW&qk=wh|RppI6iiQ{k10bfwd<^O<mJc<Rz`PCOkV|C!LM@tRTM;4I16W8H4
z9B@pa9ba927OhXf%oP(3*o;3rk+*&a=Bv8kTZzB>3bI-U&IMaYjI&7)gSO7H-ogVO
zOG|0_5m>@cPtF(nR5&~Y%-K#huyx<smMfuq6sx1mPkfW3e_A!sQphb<f1UmR9>@Ka
z^<Qw@e=n53oc@D<SIPzMhD#y)jd%AKj{8b~G>G9f!#Ihgi)8y#3OMI7CzW@Q0*;H-
z4S+nmM_0Rbod9zFWZLPRoVcRs3yv*UJ|_D7aPBDQ0h(#iK5Ak5vCUoyXnOd)x#8o&
z$~<bu)3k@WXSCb$((l%d!2z#tc*`G4*zqm0?y03AlwegGBA~|uKy#sXpygO)>wX#N
zh1d^4j=l0-F_167hWD8_EM8w@Ycm6F_4Piv1GOk*6#)xZ0Gzkra>9@)@a-Uz;dEg^
z>AgHWGZ8DgdG;8x#Mm8TP9v8RgZkGVRxc~JVwi4k1|5vrUbz%K?uz?%yQeOiV51d}
z;mj79i2V;qi(c!eI>eEtUim8UUieeF-D&Xc!Y&}65MPBQa(wU*-r1v~A7u$eB73b8
z^P5zDNRb>=W_k<@i+k6RtM5cUh)Z>_0qNB?P?{_&dW^~sIgUSeHkN~ztR*kHL8ddw
z5N2e`w>VSRvzOf~R}%OiYseq?BNx*MOsSW8hlAd*ZD2nGt6$(BrrovyyKPXp>o&M^
zDHGN%G<vOaTewo3w@-K2W<04IT(@nSu`0PLq4|X+HVq<>sshmSBbH!hoV<`D`Qaz^
zuHg0f-d$Mjop#rH`M8ePU~UE#v7&Pbw=h1n#p~^!=<si^cp6#hH*Bx+L|u@pq}_Q>
zEw0x38umUwaSoNvV&fS)ySguA_<UaMHl7<hPq(zZyJe}Qg-Y+pg^bO}1#|KTmmN>O
z&y-{3!FkWgiy>6fFq;%v1_~5eh6ZeMZ0D;CU+KC21LWFYZW)FNm3cwHfKsldPcxmv
z6<v)Xe@T_w75QPXV8a@=2GOLw5o06Zr6i120p+#c4?jX5*b`cR!&(9DddG_wl&Ua&
zWn?}f7)W5kr;Gq%WCLvpj(SIcsp;w*7CNO4B--7l$F6e@%*r2`VjYOlRXr{Ci^xUp
zt$8jxlPW9SQ{t`i^o7sH_TpjYjc6xfr86d^n-Kdk)hj$)Ej|@P(e!;*WKiV!KZsoL
ze~4UxX~$zek5nO4HK`jY#i-|iCZVP1oEX4-q}G_?i`Af7Za>{4M4!8u`JVPJm%Pk-
zzxk`j4gCAM!bAg)+kr-RV<<|u8a9s0*8#RWm*_!dCJ_$p!6Zts{EZy1D?kLlT0o<z
zNplh(SfGV%l-bLxs}FG1zR<3=A6M4L02y_M1N8<>s%QnmR&23SXrMR4&dd7<;v9T@
zwV3S+3pPy|ygG}!4KzjsK9pr2VV_0^^pnmxlKTo-)w9ipYt%)6P$V$z0Z$CIQftnt
zX6R7+p^ea7yT%tKV9ABNaqnEV3@hQ^pWN@Z-KE&|WN6Ip<w4a39l25CFFYRBUFv6(
z2$TH`2bvX!b13PCo3kx3jsmSL4c3=X`B9=a-v&z|#D3F1h>K=iwlddtw2DL&)$+Xp
zuA;eo;kmuTAxgsRvk1qwSbEl4f`pjDarj}m&<CSr;L!ekn5r`Ho51iQ>mpSH+r~n{
zS(?3At)3Vdywp;-47pSkdchhzzlsn7I%(^^4ek=)WTVyi*7qgCqUmQ@T?ey{)-zcd
zazU3*jiCtr$d+b+-#3c*#w-$&J_e}H!!8fY3Yu6>uha#dX!|TLY@nYKQ$dR{Pv}m>
z?(aZ>Nz9CFv`7K1bufm#0B=X<XbBEjS5U=6t4lf{L4jhC*9Tb%evkT~UP2I>l2AR`
z(bWQG<{|rq=O!G^6dT5w>IrJF&Sv3%(uQod%U<V&#i8HCrj&WA7O{@cp;DPL7~6p<
zPhw^<qg!U-xRIf(gT0h)E|$QE$5>f#{=)jyOzVcva@PMg{0Gmya_jD)mq!Zcd>z5)
zgqk$_Vso(=7?|=gOqGhR#~gWwhh2z*1GdsU#v7uM`V(B|xFQ%$JVH71rvuOj5Gc=i
z!0oxS%34|+lR^k*oM=|%>_DJ%;&Fa{4h=%!ERqQ7HG126@}7`7SHK-fX^2Z6r?DFr
z!9^ErDhPfHOhFMkzXPjZdVVjyV2I)cs4yffG<mU$ic6DhncJ(+YQ-&{Lm~aKW69V9
z4Dkof6=YRHqQyDIlQyed4j4coQZFo!AW)(F@IoF)RdSdIX$eUt5OoOz$B0bRMKrVT
z%@Gh_jUrMo<_Pp*^vK&EghS4pKS}~WtfQTHaK*mGR7Z4Z-et*}#R|!g9Y!P}MH#!5
zLKa~+W}&sdL^egSyk9Z!j+yg8dp+9aLZltqh2K2q<J2<$n6(pmS?f>EJbQL1`Do}*
z4*R9lsyL?Y%vEX^e8Uw?y~CqLc@&heOVa=K!}g2KmHWfy3hjb_vAN43C}hhq{K*u3
zS#(^(4SQU>>Dx@k*6VZpeBp5v4u@e;^jh<koVrdyKeE`11ta6=DX1m;`A<g0v(0ew
zkwm3H#brENg~chU$7b`taj&e`LaAoxx8gzr32Eqss-a65v=)5xGBJn;6-rngX1{wQ
z8)o47wxD=7IY>m?lwln;Fj@p9-F(Qka#xjY$+fs7!r<1~Zbjc&P|YGGzH19Wdt1pr
zriFc@(68xzrxF?o!}aPd6)Y4t_1Y!7Yeg}y)2*<V=Z;uyuumFZ*W>@;=2M$UdT2(#
zN1;!R^O^_=71Ii0g_sxbFC9rp?yq9WoF$Jd`tx?6_#)KuS1iKi1MlFq29INptGG;^
z*w0Vqg?v?L&nA#;NF}Tp56h_jre9b>WV*a6-B)>psvgPrBXR?KM;xE)mM@a#K#DQu
zqx9?idOt!F-RKDHWqih<xDH>)zFVnf)#)K41Y>`Yd|wo6V44OEWbpFHFOt+|Pm`bO
zpitN?*6Q9_Jp*qpq&r0K+wt@aMK5yo<Pn#88;vT;JA&TKu4T4kM&+5C%K><@G~=Z<
zvy^;#)NGZ(&`!hq&M~!92r>k)jV9WLEuv^2l|WYj`dPd#1Q_vdW;45uRpQwPAs{S-
z?JZ`!pi~0*ysedg_{M5Y2>gfS<)-imwNg(jD3>THg5k`PtK#+yC3UXES55Yj+DjDS
z4ARShfLUkL6Uj!y4P;bzhCDO_PMR<ZP%ww`<NcwPzKt97W2<%sjanhWU!}#22g)=i
zbRtq1V~@m&9^ZaujGk(7i$^{qTeWK`{)MOPz9=ZV&GnqWO@qb=@U!ri#EuDcWP=fj
z>k@iv%X3nK=KHSg;48SBQB*VVF^49W!^GOsbC4viwU6OKq(Xspz1fD&TQ1>)qSvsZ
z!rikXb`%{Mu(J+!+4`ZEDz*%HJ8$}ole!(3`gX;zmelFdrJO4Kp&vSFlNI0fc?S>U
z3MB-d);d)SEm$uyqZvVYX~86->EX@t-3L$(Sg<934T`#JGXeR8@YwD_k>3q^vWAIX
z$i~`R`3ZPit{nuWqI6OcaAFOFh(K&7C8_9TofoUQ4sYh7N3zv?fgoeK3T3+RbB-TV
z|FQQ6S}_dGj7wF}()dRGPpWIzAh=ggpl{l1Q{T6AIu<S-<;hyzB30)hLi6m1(uxm1
zt)$F)Fuy)rQtHf5Y*b`8Y7L;;UD=bVpKTcxi5o9^ygcb3JreY2hF>f%dg5^>SK@K^
z`tIz7(|Weg6*GI%^YOA9tP;HqRhr<VW~QKC?FSIxy-_F%j%$s*&%jrDMV)kdv-kQC
zKDO5kC_4DqI-g+MKjTqHXu`Q`yybAaMfLWYofP(B<+r)V<*OE)2Rr^T4Zh6j{;MLw
zfSP)q@`a{Mmb*H{HTl;-6;lPIl7LnGSi0hvJROVECQj75xoVH8)G~@B+<AcJH)LA;
z4!2o-&*B@GzBVFM!{62ggfR80B~Y7_UBGe+zFavazBkO|a<{77Q!Qx@+1#+h4nN(V
zH#{@klO<>}ggYBF&IOTlE%C5JKLS=WrasxHOnPkD1O4a8@_t)2_o<sF>RBO>6(uo*
zS6|fjniz8SZoOjh=USWPO7ftAg!E%YVH{ut5nHR8IDWN(*3v9%=grWLZd@14oNUTq
zsKrd|n;I>nO<CXlz9iP<o4&EtV;OihxBJVBv7;<nY#_d5d)a0w*29{6g^qk6!=6WQ
z2eB#KgQa3>q{;GLP6c~9)x)|1i&)*Oa%I|5P3=@!`}Eq_K=n?xr0yH^TYr+iQ11^v
zkvua_WVct;?>_w?L%V#{$Ik}<$+<#xJER%U0+vg1b1=gZBrjC>RwIQ}-I+f$6XI@^
zf|)1+JhRPA@_j0_b+q#&me?W;>38MM(Ww+)1MB&AV%Ha77{M<^cw26%=vow8wX8>$
z_|^}**FkPpPHHa}s(u75_~3GtB}usZMh*?CY0`!W#`;(2<`Tt*jj%DLe0@LSx`)-)
zQ`o<Wp{BmVsgXu>t=zShw(0cmXa3eFk9|do%>*6YP$2~OnM<a)o<il{;AB0wF13{H
zEi<6yy(Lo}&r-BN4eW%rf}4OQnG~X{i4p?{!w8|?b&>q$m^>)cT*k!A3-5k_t5Jg}
z6?yX#{T1`lp4OBR#ljJ=2s{g4JY_q3pEk8$#<(kuUbo_ah!kzmm&uI9y6>iF#`-B`
z>|yJ%JAY@LTVD**R|lSxZE7nMn{^3zBAQv87+}!I<=7=^N@T@)iOgv%j))Gd!A?~i
zgop?Zg@(GGh>eQk3=^G;;?uVmam+&sQt$1HpW6lBWJUuWD)Jnrx#FK8$khiCNIEc<
zc7-CEc#fJ}WYe(icf*kGDfZicpL*W0uow+jpu6CXly^N-z{ef#+2vvwr+G*f6fX7U
zdc=OzJ;7v9zlCzC;{tz7U(W}3L(fnFKANFtSWJv!_QEu$+$=CoT+pH2F9OXb6s`Dc
z_ZxPbgq<(5aexN;t&U|*ry@L*z32IxeiJ_xgGEJ=Ks)4kyU}cJR!O2RcX2!bcXG#H
zuVd9v1@ZjoG+=4lU+*hE-;+U&p^R3==>Z;q>Ul5Ak}UE#qnupz0Y|cda@J*$@P1w1
zZiIftUtjIflfjhsrlC<+_=tdhclN})eiMMJ2H$$;x@TPM(R1HLYALNlr@`n?Hwqq-
zOQF2us>Vu-Ich(v;xxJx<ui=>>Q#wkEu%B5`sN=p?oD=Ri$bc}5U0g7b>%&>xY4ax
zfa9E%E6&arD_=fQa_NW)aCGMo;hNJ`pUu)naXIez*pYS0#Q)V!q@0UlVqicFpAO<U
zv`Z@Hfx12UvX%Cf?lR5P>xrlPl}l4Os@?Ux=aE46m3R*y4fPHP-F?g$Jp>b^MhctS
zKwfl#0qB{e+<`WT9DG({GVxduoxP5<cW46}S>RSItk*%!(}9kJ*R`s*9jPYI-D=nl
z$H)$abW;+i6@2K9Fq?N0t&W-^Q!)xsE#1vz2*!jyp?8Y#Ac(fH@SL;D*=Vn~SB(E!
zik)}2Uu?kpG`!DzZCLPBdZxQ)gx3aVDIP_kXowcl-ICMu?mhl$6Rv)uHK29Yy(%j-
zP*2zqHQ1JHCcXrST>n^|Pu8c9Nvw6|nAUa9G3vp(*2+YUmJ<IyfYT9<YjRQTC+9Ij
zj&9IR#IptuSoE~=N*~&VzAh!OlXtHIWfxMUd$={sxOcjBRG)XbbwrkF=Xle#!v;oz
z!<aSD0J)4is942Qr}S`ZFk-)Wtn=5aM|2>wjj#XQwR$bnmCpEX9E0uwU$`2Dn3h*N
z+k0z1<Ilm|2=GfZBD+wy5w}FbSbT`ylqxsM734SQc1E+-o#Be%jlg5K6-AH)8lV=K
z(fpb|_UHit)b2Z@crDic>Yi=9O)|FrZ*>Iq#yCXfvoC#H)Tk%8T5=V$niUt<PFsxH
z3C|wWECi-?;~jY<R^2qXV*8Q>>KQasd$Gj~4mbicDZtxqSj0CYiyC$x?53#Bs{mUR
z1Ks!l#6xE$<IX{$A)GkBe-0;^O(EayfZMW@D8+y|tjb`DG9>;;dE%BzWymmor7prc
z6izgkZW|<zG>u><QLH!&d}(_cP>z|Z?xJLfl(D<M@K<tX#NJ6*RvN--Ofh3$I({45
zOVIH`Q*86Y-~UOv4Xg;rt4^uZJLiasB{vZiI5Pi(P?QQ0-{8rDfk?C(f!v_8{s)mL
z73Mc299jLODD2<_e`03Gnm1+XZ*o|V1OguN#WXY~>*%oOtoe+E)Yy}_c6i_Dw4qZ-
zXNZpwt+ZDCKmSRI8!xQFU?Bkj{3$;Dy?$H$MOHBX=O-x!dRlWwM`vT*|KNW930625
zJ2{vee+~Qk8|^dp_u5pl^1oUt%&57&eYI3jgx3#QPfuI7$rP~OBo_^d9>4%G?i=*g
zwYRUsVKcucxwz!;d=S^un?%|TJ;CMU#~`0|4;PGCAoJSro~}2Ngz%U_U{DrrmZr3C
zCq4|}4<z22mJzE0gWIN77Dhp1z;{sY{3_|GD1~#9!MV9(8HqjSNvxiyd4&~^fLtSC
z)SaWMqXZL8S0PzwE+WZ03o18pCNW3An2e2RSCeSG26IIgQv8Yz@*hM3^V+fC|KybO
zHzI}lc2B&^mllFC*m-Wbt*pN96bOxQcw&yTliEoEmW<pVgs9+5G;cmO=o(P+HJVDe
z)DqEztM14oSH=l{wTunx)yMYf#C&#vr{qyIF#pv09TETrmdMbEZek)x^_B#<8RCTS
z8lZTNLR;~*Z%MS~mxb!oDuFR4mYOm}tK0d2mJ(yH^fPv?3CF{J6erV>rVQ0Jn`sm%
zku)|R7qc;r#?sQ5ddj}EQ|rb0rav=))#XVeR;*OWXU7jmBn|(I%!-PIj|89RZFG-s
z4lD6Jj=OkXQ-!oeCEEo>PtIoV7jtg#o0~Ac+jGwrKjv3rGeei$ZufO`w?Dr(1|2O`
z2iK2t>LWb!WZV$H<GhYAg}9%ug>fKTY&ifkUq8fYn~6f?yCWzTNS0iKm~&j>Fro#S
zbyJp)59)$SpJEiPYt?ep(Ss{7iFdhgM0V~-Pi|9L2VTLgy{Kp|<jDCRq@2S4d228=
zmr|wrDxv;ak$+#SGvELKEdR5$`j<i~!rvEbw2HQC!Jqygf1XhRL5uN<ODmh5ty?w{
zY&zs}FhnO*Av67!eS7wV5Y(!9Ntqn4vd1RHA5R_I<W+k`di!%MPD3jA#nbVFZgXA&
zY?;Nn9KN*&#6$F}m}1oE^%2RF(4b`ZZz}EVv!4=>9COix&la;epG3_lc<_HwJ{4LN
zH>m?--ytaa=1USue-k2d8cQwGO9Nxl9{7tlWL9OcTz`*4YS*c~cV<eo#0ZIo0Y}_9
zqNLBNv<acIYy~dwb2R)FCyhI~>DY<@snM!YFYKfMSb4i?*IXrC{LE=O${d6Onf{d(
zixn7r!72fIqRJz%xX)bKK5mNb>V8a%w3eU}x$7~a6El1^FcuL5p~u^wTNrF4|25c2
z$LwH~eJN0pz!3#z(?1}a0OB)ZF(rPM;3t~Tu~dTA)HrOsF=v*Ep}LTT>C=$Tq`J#_
z!bB5Rh0jFFC86>gPuLB)&)r%Cr(j6b8N2A>iQj6<=DFKMdpaXSD7<h@W+G3i2Npmz
zN20tnQGzuf+h7o7Qi4MK0Ypdor|_L|uE#0GogX;CV%PL?FYyiw3^?2H)9Z{V`o$|8
z@h6$X#;#a>)_AxRmGYDih9olHAoe6LfzwWvt`K)?Plqd>&Q8vyrtP<u>8FQBZIM>&
zE+)Pvnn)gjuglP8j_u^mIXw&pE@V7H`UMFO0NgS7;EcKLjR;Ts&e{`??TGECHSx6B
z_Hie&vulpx8j+gK=ydgTkgSrkzvHkihg1PDR{Cvx4-%fF*Ep|V8b~DYv+{3pp^7^0
zTYGesmVu&UX3IUkZxdSWVK{zy++nBGx{*2d05G|~S4f8#$E8Yq{f6ZrH9#8pr(@pW
z+0FQ5iPiflTj5VIOiGbs)xFBJl)8H#ybeHTDhjJqT|_W{D)@2_&cFSHwW>6xZdUk>
zbJ4H%O*80XN)tW%d(r#Qq-$NfZO{1SKW&ev3_kakzI63RJ%86#)E5#;`M>Fkf!5yH
z`0EU?v(h*G`ulIjIWGQPOUbI*js;&~y03QXFLZ!>70wh)s$5Ij8{?8KTjb>ZON_xm
zWCCAW0{l&kHhVa>={Ykt)|Q$#Mj7K*<q2;D3mBdEzy<?xb-34Y22WUkC%F0Uhv4|t
z)hJ1H4XT(A;eg#qyQ5-^JT$N)bUZ9X=v-iuB{ifh{|oc9orT#<dp2Ow#fDO~DritQ
zMF!*peNjL6mq;*kh-S*)?_Nli?+SF{(JW%lfEu2A)_zsEJ0QIUgcXu>fRqU)y&gLf
z0Dg>cM~We<zgFf0_whH+dQB>N{jP?&yy<KQQlE7Zv+o{(F2Up|m@zBrfj-78l|Cvt
zzj!l}G`F1yvyU1TstWAdj<@U5<-PBIzkE@zan;_cY0IYB-f_(dFv}Ppq0shH6ZgG3
z8%Etu&vFN}24~8rsTA0=hV4(1&KA?LNb+blDng1*kOu=R1AwlPQKyg(y9YLFP4A(e
zH2JBLcsR)M_|Rt=Cj@e2t%k{8WD?vVwBw8+9q`uw$a|fqZG>{*)A>A2ScU$9M*E60
zI(ItOT<DZ%43)UYfPjvBWDh9K*^{60x54qlmg6xw!dch-YagbpXyWC<Mh8!uyRY~8
zhu0euCjy=tK8>=94KkVH(VSxFU5-a4F&I|}#;*l{4tnnoXCfBK0YZe|NaYK4wYv!X
z%MFAO=iqOi5~`vtZm)f;h_w5HOGacbWMWg$ld1%g!3WQ&hl+3(;j*%ZzXUygprGTR
zt}(#96~j-~Wt1P1|1j`zvH?zH^gTqTp{R6XuDl-$8^#&VX%x0O`?-iZfW>J$T%~{f
zNJdpof#}+|O;+JD_a=E%Zg#m8aT`jk2{#~I6alNUaQMt9P~rrlnq*xuk~$K3&V!jq
z+LcEev7u25UXQv{h>8N#ul3beBUEKgU7KiDIJtDI$t7300Y+=Q6ViF%nSvlym+2X{
zcj(GRbx)B91NJ6Snk##mU&qd(k>82ZK7(q}sGvae!tR?*ZSR1`<IKd%Ki4h(&xE17
zFRA?z)ZeA%@pZUS{Wqlcmvd|N?^=ugk4x5-8hvMAP#*>pYx-hao4um0cp|SmN~22}
z)>v}y;@2e$k~M}2IcJdWC~Ip;0}TB$A-Wlu&~Q4W-Pk}I7|kB5;a=Vs$`(eh2cjF6
zgj`dP>oem*Z=fZQ5+l(E7w^>8y!{?AVGf%_ID<;FNSbcBjGds&UVNq7{Iq<RBozs(
zE+U<T5QWiPlv@DTN<T=u5kNz^Wpj<zj!pu2>UMMTLa`>$9$g<EQBnlZ$dZRbK?dG6
zk69R%203C3-u)VtP8h@VHOSP#&q6)(Nc8#u!J<DERj8aW8Dbx$hK30=J%giD5}|_~
zXzg^TT`MYAY|o(a>3_9$E$~pKZG0w@-ANi`TQs?(<ep+nH&Q8*VrJS+lh7o;j5ISY
z(bB0<pA^Pwx}mR=T9;LrNnu?YMK?`oNGP?gxg?hm_8fJ-@62hYRogSaGsorkd;b6D
znP=W}-uFGv^ZarwpQE87v@NqUwyP4HIkAGsUH%~XVvSO*{T?sc6SWzc4g*Q#GPT=V
ztmkqQ=?nT8gn%u^t!gyU_8(7NXHH#36SedQ&#e75psF=pAL>}(U>TvXc_d<+fukMe
z&yrf-g0Kvlfzs8w*L_JgL8P!uB|C-71(^ya+6hA5ERFofB-~<(ZdBuD-Aj{4p1N<<
zljndMMcTSvb8Xua!iTs<RszjF&RGUj|D>>*uyo+XNiWZX8(GaUp$mD8Zmw>|-Ix)X
zlo=}(qs)kxhoi^vs(FhG{<xJ|RwoD!3_0!a?9^qKuF?L1I-vVqyUtj4O4@+zd6&3d
z!GE%Du5{<pql=g~wTK&LH@|JPOBs33PPZ35XrKjHI^l^wu#0tKdpHl<54h1ETX?lc
z9?c?mJ1o!j%4j}bsqs{JGOxwCQQME7jJK?K-#RsQ->mwE(4?aAB5dCkv{rA10vQfh
z$$>lt`VaP+VP-`4+3D&-4{&ACSuANChnghE@o#YrP-?*RgAF4F8V$NdiIp$77uwGC
zXZOnmc_wn#@ky-MO-irccc~KvKWB)V%3e1O``2jlpU=VbXFJr8{FebuE_ojA<nXSo
zCQfs8pa-cZEg**9B{|DEUT=9PV_kNEnk6Ks3bdA8)OU~OZYn)O?3w9z^%#+)saR|n
z^-8PyteSyhSwvdsI;(Ami7}q0<t&?y^}?2CeYCJft>T<&4fF76oL4VXd}0l~NXPeU
zu&De;Rff4o^Peo2531!5vNui182&+X)NS{w)#qrUx~_WLMAd}rK~sHAOl2w<OQH^C
zrA8(KmS?EWNn~}mdLy|jyF|9ttMt#4)OWaC@`}Gl6$+ig%2b<_FWZExPJX<1U`iZ6
zI5EV(mbxy@zo7Qki|}dqBu}05LYj|Wm5wDv{VFlK^Wt=YE2({_;d)y0+f}-8k^8<^
zu87tI-z13G`Gaq(2X5E5&7mB4S<EHiFZQUN39;j9uAw+8oj!Ig#aDF3Z0mMM-rYB(
z7h^X(Y&k6@%~1b<o~4STr}oaOYNK>o3>wI&7K;q)t=hObx3dL|{@#GTK?76Iy5KWI
zoDy$0qeRik$fBX){660?4=TaLQS`E+cA2g>SP*$)^iW7sudmzUP>a0X_o%1Y-o3Uh
zcEM(q!)-2GTtdem@Lzd2tFQ-;!@=S7|3K>s@o~g`6k`b^rldf_jF>%8l(j(zeD(_@
z;PA37Q0s^Bw<t1lcd{ceLU!_+wXN*b^tz|K8AI0`H_q8Yrz*uCtPCw6st9-s|C)c}
z6zk#0hOwcAPxV~ZtuC#xGH0jh7f#w}!&keKF$$Hz5Oq>qeU)TtEp_-|3MZ{&Oy{0E
zyg%uWibej@m5S7~wb`w8x$K0rN23RyAGAqfUMkHv!r3N&r4YK!KMF-5sau|R6(DwM
zDhgKI9OT#Gnh%j5Ei3QKqm}YZ`P2Et3yW%GYV7<7<lk=11lKyL5h8Xn4|Ik^5Qw*H
zj2ln4T$D*GW1Z^0VnJy-8++l=bf+WxzPGV)v<8Ew5%6UeQ>_;D{N$4tG2qgW+n0Q)
zItHY!9<z^UTI(B7>AhivwSu?FCM@rVQ8)In9_ht6+?@Bj9ktt(opof%FRD&=EO4AP
z<&T2^US*KVS+$>O&bP92HH#h>=BURVH_usbc~~K4aCqDNjZmevTh$FE-TD0g$~HdO
z=;s3Nan_9A<)>G5zdkd)27k>wmC?AvIv2MiK8F0Cc`+(FEgEY#yiqQeop1O2(wql^
z^w$+uvlgTznDc<(Bxnb_A*eTW#r2_<X8}JB{=|utE6Cif6(KA%PkWJbTp@GLhJY1g
zGWSPJ8`h5cnk7^_cFi{7JiODMKN2_=yiGY_^jEW`QKpJZ4;dS+=Pg;exbD2E#_8tm
zIqnsP=R4G$e40<$)9ycey_nTZiBdL>Ajk3c4&Aj%NzN%ZdouI{w07<86_!MovrH<|
zy6)JPkBnd5dA&Y4=Fq4JhvX)E{3I0_mGK~*i3(Tv53<k&9+3`f_$R0(x(S7>fSckL
z@PLLKn6N}N%H!m5!H~vzb?;V`>fvyng?O9-N+SrY`lyky-+Qm8F?5WpR)ZoPRt=v&
zqZ%O#*)cB4Vyfx$Kagdy-8}Xfv6;}#|Nj6G-tbup0IYF2#v23_K!<hdM*t5xlkK(Z
zgHw_rg~%aAG3=B#kYXK5Hdz63|0`%wYb8oC2oUu@F#o7{!H4o73^x`V>e@11C4}h;
z+2c?5hKhu^F?T}OC^x3ZZi(wzUXTm>Kkr7E%+ij^tMegy_G`)Eti;HqntUx8%rFMC
zU`&h+x>L0{8+WLbDjb0yUGpW~si8?Ai)|dp@E#8_n9cr)u|fAPgu7!S0s`UNznYB%
z=Sb<5js7yh9~HW}7~C)s5fGT<B}V7lv`@ssqgxNb9n25`fo{gc;U$=VY+|1Vx(^53
z;0O^A*vu5e|F`Xqu!f_n`NC~J5CH)}z(jy0m@K8~2NoG!AQi3_j0gw}92P_V2DO8+
z*yw^ra0ymKK!6l6L2L<zODV{T1xMGBfomoq0s?IuG4O9(K?%zPooozOtw98e`S`Ek
zA;BS1YS>_jpp!`9+-5{T!1;n0k#Cvlj3t52u7mSc5di^N@JmTZaD|lYRV)j1ijw%(
z(f6_#3u$RdpI#57<n>{Z(U}Br3KSwBa4ls*$P$c}k`RT3Mn9V^J`x<s5QCQfJocw%
zOG#Y7Vxu?U#7Bbk%n4#kFkH&B;8<|<jtacThX@F)E)fI&W;=dZ2I#eCc;^NYXbiaX
zMGPc3LCQW3mI8WB4qmW81O(RI6Q}U6mb|gB=oJ)r!4DA-$a?tCuoBFbviyg|MNg>3
z%{?F#$CWgR{xr^|tk$4m;n_NRY9wy%Ulsohi!t{zbN5a5ljUGnYCx|51spE+3H;mN
D>=CVG

literal 0
HcmV?d00001

diff --git a/price_ticket_fop.zip b/price_ticket_fop.zip
new file mode 100644
index 0000000000000000000000000000000000000000..d3c03fba926ee14fe27bb54ec9b0c464f8b27151
GIT binary patch
literal 27579
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
bqp^S3l*&upgNJk}7WhXNta?+^hg|(XC0hR)

literal 0
HcmV?d00001

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index f7b0862..4695827 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -114,12 +114,9 @@ class AmadeusClient(BaseClient):
             raise NoSessionError(message_id)
         request_data = self.xml_builder.add_form_of_payment_builder(
             message_id, session_id, sequence_number, security_token, fop, segment_refs, pax_refs, inf_refs, fop_sequence_number)
-        if isinstance(fop, (CreditCard, CheckPayment)):
-            response_data = self.__request_wrapper("add_form_of_payment", request_data,
-                                                   'http://webservices.amadeus.com/TFOPCQ_15_4_1A')
-        else:
-            response_data = self.__request_wrapper("add_form_of_payment", request_data,
-                                                   'http://webservices.amadeus.com/PNRADD_17_1_1A')
+
+        response_data = self.__request_wrapper("add_form_of_payment", request_data,
+                                               'http://webservices.amadeus.com/TFOPCQ_15_4_1A')
 
         session_info = SessionExtractor(response_data).extract()
         self.add_session(session_info.session_info)
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index eb25d72..e68985a 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -5,7 +5,7 @@ from pygds.core.price import PriceRequest
 from pygds.core.sessions import SessionInfo
 from pygds.core.types import TravellerNumbering, Itinerary, Recommandation
 from pygds.core.request import LowFareSearchRequest
-from pygds.core.payment import CreditCard
+from pygds.core.payment import CreditCard, ChashPayment
 from pygds.core.security_utils import generate_random_message_id, generate_created, generate_nonce, password_digest
 
 
@@ -646,107 +646,85 @@ class AmadeusXMLBuilder:
         </soapenv:Envelope>
         """
 
-    def add_form_of_payment_builder(self, message_id, session_id, sequence_number, security_token,
-                                    passenger_reference_type, passenger_reference_value,
-                                    form_of_payment_sequence_number,
-                                    group_usage_attribute_type, fop: CreditCard):
+    def add_form_of_payment_builder(self, message_id, session_id, sequence_number,
+                                    security_token, fop, segment_refs, pax_refs, inf_refs, fop_sequence_number):
 
-        form_of_payment_code = ""
-        company_code = ""
-        form_of_payment_type = passenger_reference_type.p_type
+        form_of_payment_code = fop.p_code
+        company_code = fop.company_code
+        form_of_payment_type = fop.p_type
         group_usage_attribute_type = "FP"  # "PAY"
-        form_of_payment = "FP"  # "DEF
-        pax_refs = []
-        inf_refs = []
-        segment_refs = []
+        form_of_payment = "DEF"  # "DEF
+        pax_refs = pax_refs or []
+        inf_refs = inf_refs or []
+        segment_refs = segment_refs or []
+        content = ""
+        if not isinstance(fop, ChashPayment):
 
-        if isinstance(fop, CreditCard):
-            return f"""
-                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
-                    xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
-                    xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
-                    xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
-                    xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
-                {self.generate_header("TFOPCQ_15_4_1A", message_id, session_id, sequence_number, security_token, False)}
-                <soapenv:Body>
-                    <FOP_CreateFormOfPayment>
-                        <transactionContext>
-                            <transactionDetails>
-                                <code>{form_of_payment}</code>
-                            </transactionDetails>
-                        </transactionContext>
-                        <fopGroup>
-                            <fopReference></fopReference>
-                            {"".join([sub_parts.fop_passenger("PAX", ref) for ref in pax_refs])}
-                            {"".join([sub_parts.fop_passenger("INF", ref) for ref in inf_refs])}
-                            {"".join([sub_parts.fop_segment(ref) for ref in segment_refs])}
-                            <mopDescription>
-                            {sub_parts.fop_sequence_number(form_of_payment_sequence_number) if form_of_payment_sequence_number else ""}
-                            <mopDetails>
-                                <fopPNRDetails>
-                                    <fopDetails>
-                                        <fopCode>{form_of_payment_code}</fopCode>
-                                    </fopDetails>
-                                </fopPNRDetails>
-                            </mopDetails>
-                            <paymentModule>
-                                <groupUsage>
-                                    <attributeDetails>
-                                        <attributeType>{group_usage_attribute_type}</attributeType>
-                                    </attributeDetails>
-                                </groupUsage>
-                                <paymentData>
-                                    <merchantInformation>
-                                        <companyCode>{company_code}</companyCode>
-                                    </merchantInformation>
-                                </paymentData>
-                                <mopInformation>
-                                    <fopInformation>
-                                        <formOfPayment>
-                                        <type>{form_of_payment_type}</type>
-                                        </formOfPayment>
-                                    </fopInformation>
-                                    <dummy/>
-                                    {sub_parts.fop_form_of_payment(fop)}
-                                </mopInformation>
+            content = f"""<mopDetails>
+                            <fopPNRDetails>
+                                <fopDetails>
+                                    <fopCode>{form_of_payment_code}</fopCode>
+                                </fopDetails>
+                            </fopPNRDetails>
+                        </mopDetails>
+                        <paymentModule>
+                            <groupUsage>
+                                <attributeDetails>
+                                    <attributeType>{group_usage_attribute_type}</attributeType>
+                                </attributeDetails>
+                            </groupUsage>
+                            <paymentData>
+                                <merchantInformation>
+                                    <companyCode>{company_code}</companyCode>
+                                </merchantInformation>
+                            </paymentData>
+                            <mopInformation>
+                                <fopInformation>
+                                    <formOfPayment>
+                                    <type>{form_of_payment_type}</type>
+                                    </formOfPayment>
+                                </fopInformation>
                                 <dummy/>
-                            </paymentModule>
-                            </mopDescription>
-                        </fopGroup>
-                    </FOP_CreateFormOfPayment>
-                </soapenv:Body>
-                </soapenv:Envelope>
-                """
+                                {sub_parts.fop_form_of_payment(fop)}
+                            </mopInformation>
+                            <dummy/>
+                        </paymentModule>"""
         else:
-
-            return f"""
+            content = f"""<mopDetails>
+                            <fopPNRDetails>
+                                <fopDetails>
+                                    <fopCode>CASH</fopCode>
+                                </fopDetails>
+                            </fopPNRDetails>
+                        </mopDetails>"""
+        return f"""
             <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
-                    xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
-                    xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
-                    xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
-                    xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
-                {self.generate_header("PNRADD_17_1_1A", message_id, session_id, sequence_number, security_token, False)}
-                <soapenv:Body>
-                <PNR_AddMultiElements>
-                    <pnrActions>
-                        <optionCode>0</optionCode>
-                    </pnrActions>
-                    <dataElementsMaster>
-                        <marker1/>
-                        <dataElementsIndiv>
-                            <elementManagementData>
-                                <segmentName>FP</segmentName>
-                            </elementManagementData>
-                            <formOfPayment>
-                                <fop>
-                                    <identification>{form_of_payment_type}</identification>
-                                </fop>
-                            </formOfPayment>
-                        </dataElementsIndiv>
-                    </dataElementsMaster>
-                </PNR_AddMultiElements>
-                </soapenv:Body>
-                </soapenv:Envelope>"""
+                xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1"
+                xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1"
+                xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3"
+                xmlns:tfop="http://xml.amadeus.com/TFOPCQ_15_4_1A">
+            {self.generate_header("TFOPCQ_15_4_1A", message_id, session_id, sequence_number, security_token, False)}
+            <soapenv:Body>
+                <FOP_CreateFormOfPayment>
+                    <transactionContext>
+                        <transactionDetails>
+                            <code>{form_of_payment}</code>
+                        </transactionDetails>
+                    </transactionContext>
+                    <fopGroup>
+                        <fopReference/>
+                        {"".join([sub_parts.fop_passenger("PAX", ref) for ref in pax_refs])}
+                        {"".join([sub_parts.fop_passenger("INF", ref) for ref in inf_refs])}
+                        {"".join([sub_parts.fop_segment(ref) for ref in segment_refs])}
+                        <mopDescription>
+                        {sub_parts.fop_sequence_number(fop_sequence_number) if fop_sequence_number else "1"}
+                        {content}
+                        </mopDescription>
+                    </fopGroup>
+                </FOP_CreateFormOfPayment>
+            </soapenv:Body>
+            </soapenv:Envelope>
+            """
 
     def ticket_pnr_builder(self, message_id, session_id, sequence_number, security_token, passenger_reference_type,
                            passenger_reference_value):
diff --git a/pygds/core/payment.py b/pygds/core/payment.py
index eb49a3c..a22896f 100644
--- a/pygds/core/payment.py
+++ b/pygds/core/payment.py
@@ -41,4 +41,4 @@ class CqCheckPayment(FormOfPayment):
 
 class ChashPayment(FormOfPayment):
     def __init__(self, p_code: str = None, company_code: str = None):
-        super().__init__(p_code, "CA", company_code)
+        super().__init__(p_code, "CASH", company_code)
diff --git a/pygds/tests/amadeus/test_issue_combine.py b/pygds/tests/amadeus/test_issue_combine.py
index af0f447..0ca3c30 100644
--- a/pygds/tests/amadeus/test_issue_combine.py
+++ b/pygds/tests/amadeus/test_issue_combine.py
@@ -10,7 +10,7 @@ from pygds.env_settings import get_setting
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-from pygds.core.payment import ChashPayment
+from pygds.core.payment import ChashPayment, CreditCard
 from pygds.core.price import PriceRequest
 
 queue_number = "1"
@@ -39,7 +39,7 @@ def test():
     try:
 
         log.info("Begin call of Low Fare Search *************************************")
-        origine, destination, date_dep, date_arr = ("CDG", "DTW", "121119", "171119")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "201119", "251119")
 
         segments = [
             RequestedSegment(
@@ -196,14 +196,16 @@ def test():
         # log.info("Begin Add Form of Payment *********************************************************")
 
         message_id = session_info.message_id
+
+        log.info(client.create_tsm(message_id, pax_refs[0], "f"))
+        log.info(client.create_tsm(message_id, pax_refs[1], "f"))
+
         # fop = CheckPayment("CHEQUE", "MOO")
         # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-        fop = ChashPayment(p_code="CCVI", company_code=company_id)
-        res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
+        fop = ChashPayment(p_code="VI", company_code=company_id)
+        res_fop = client.add_form_of_payment(message_id, fop, [], [], None, "1")
         log.info(res_fop)
 
-        log.info(client.create_tsm(message_id, pax_refs[0], "f"))
-        log.info(client.create_tsm(message_id, pax_refs[1], "f"))
         # if res_fop.session_info.session_ended is True:
         #     log.error("The session is ended when adding Form")
         #     return
diff --git a/pygds/tests/amadeus/test_low_fare_search.py b/pygds/tests/amadeus/test_low_fare_search.py
index 2c8e24e..740c139 100644
--- a/pygds/tests/amadeus/test_low_fare_search.py
+++ b/pygds/tests/amadeus/test_low_fare_search.py
@@ -10,7 +10,7 @@ from pygds.env_settings import get_setting
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-from pygds.core.payment import ChashPayment
+from pygds.core.payment import ChashPayment, CreditCard
 from pygds.core.price import PriceRequest
 
 queue_number = "1"
@@ -39,7 +39,7 @@ def test():
     try:
 
         log.info("Begin call of Low Fare Search *************************************")
-        origine, destination, date_dep, date_arr = ("CDG", "DTW", "121119", "171119")
+        origine, destination, date_dep, date_arr = ("CDG", "DTW", "231119", "261119")
 
         segments = [
             RequestedSegment(
@@ -162,7 +162,7 @@ def test():
         # log.info(response_ssr)
 
         #log.info("End of SSR DOCS element associated to the flight segment for ADT Passenger")
-
+        res_save = client.pnr_add_multi_element(message_id, 11, "AIR")
         log.info("Begin Call of Pricing Segment for some passenger ***********************************")
 
         price_request = PriceRequest(pax_refs, seg_refs)
@@ -198,7 +198,7 @@ def test():
         message_id = session_info.message_id
         # fop = CheckPayment("CHEQUE", "MOO")
         # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-        fop = ChashPayment(p_code="CCVI", company_code=company_id)
+        fop = ChashPayment(p_code="VI", company_code=company_id)
         res_fop = client.add_form_of_payment(message_id, fop, seg_refs, pax_refs, None, "1")
         log.info(res_fop)
 
@@ -222,8 +222,8 @@ def test():
         # log.info("Begin Ticket ************************************************************************")
 
         message_id = session_info.message_id
-        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
-        res_ticket = client.issue_combined(message_id, passengers=pax_refs, segments=[], retrieve_pnr=False)
+        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        # res_ticket = client.issue_combined(message_id, passengers=pax_refs, segments=[], retrieve_pnr=False)
         # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
         log.info(res_ticket)
 
diff --git a/pygds/tests/amadeus/test_price_issue_combine.py b/pygds/tests/amadeus/test_price_issue_combine.py
index cb40c42..68b75bd 100644
--- a/pygds/tests/amadeus/test_price_issue_combine.py
+++ b/pygds/tests/amadeus/test_price_issue_combine.py
@@ -5,7 +5,7 @@
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-from pygds.core.payment import CreditCard
+from pygds.core.payment import CreditCard, ChashPayment
 from pygds.core.price import PriceRequest
 from pygds.env_settings import get_setting
 from pygds import log_handler
@@ -23,7 +23,7 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_ticket")
-    pnr = 'O937WX'  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = 'P732WT'  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
@@ -71,12 +71,14 @@ def test():
         # if session_info.session_ended is True:
         #     log.error("The session is ended when storing TST")
         #     return
-
+        log.info(client.create_tsm(message_id, passengers[0], "f"))
+        log.info(client.create_tsm(message_id, passengers[1], "f"))
         # log.info("4. Add form of payment")
         # message_id = session_info.message_id
         # # fop = CheckPayment("CHEQUE", "MOO")
         # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-        # res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+        fop = ChashPayment(p_code="VI", company_code="")
+        res_fop = client.add_form_of_payment(message_id, fop, [], [], None, "1")
         # # session_info, res_fop = (res_fop.session_info, res_fop.payload)
         # # log.info(session_info)
         # log.info(res_fop)
diff --git a/pygds/tests/amadeus/test_price_ticket.py b/pygds/tests/amadeus/test_price_ticket.py
index f598969..b0d1191 100644
--- a/pygds/tests/amadeus/test_price_ticket.py
+++ b/pygds/tests/amadeus/test_price_ticket.py
@@ -5,7 +5,7 @@
 import os
 from pygds.amadeus.client import AmadeusClient
 from pygds.amadeus.errors import ClientError, ServerError
-from pygds.core.payment import CreditCard
+from pygds.core.payment import CreditCard, ChashPayment
 from pygds.core.price import PriceRequest
 from pygds.env_settings import get_setting
 from pygds import log_handler
@@ -23,41 +23,41 @@ def test():
     os.makedirs(os.path.join(dir_path, "out"), exist_ok=True)
     log_handler.load_file_config(os.path.join(dir_path, "log_config.yml"))
     log = log_handler.get_logger("test_ticket")
-    pnr = "LTGPDG"  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
+    pnr = 'P732WT'  # "LNB4CC", "LN6C8E", "LMEBKP", "LC87DQ", "LBQ6P9", "L6LMQP", "KDN6HQ", "Q68EFX", "Q68EFX", "RI3B6D", "RT67BC", "RH3WOD", "WKHPRE", "TSYX56", "SNG6IR", "SY9LBS"
     # m_id = None
 
     client = AmadeusClient(endpoint, username, password, office_id, wsap, True)
     # import web_pdb; web_pdb.set_trace()
-    try:
-        message_id = None
-        log.info("1. Getting Reservation****************************")
-        res_reservation = client.get_reservation(pnr, message_id, False)
-        session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
-        log.info(session_info)
-        log.info(res_reservation)
-        if session_info.session_ended is True:
-            log.error("The session is ended when retrieving PNR*********************")
-            return
+    # try:
+    message_id = None
+    log.info("1. Getting Reservation****************************")
+    res_reservation = client.get_reservation(pnr, message_id, False)
+    session_info, res_reservation = (res_reservation.session_info, res_reservation.payload)
+    log.info(session_info)
+    log.info(res_reservation)
+    if session_info.session_ended is True:
+        log.error("The session is ended when retrieving PNR*********************")
+        return
 
-        company_id = res_reservation["pnr_header"].company_id
-        log.info("2. Pricing PNR ***********************************")
-        message_id = session_info.message_id
-        passengers = [p.name_id for p in res_reservation["passengers"]]
-        print(passengers)
-        segments = [s.segment_reference for s in res_reservation["itineraries"]]
-        print("****** Values passengers and segments")
-        print(passengers, segments)
-        price_request = PriceRequest(passengers, segments, "PUB")
-        res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
-        session_info, res_price = (res_price.session_info, res_price.payload)
-        log.info(session_info)
-        log.info(res_price)
-        if session_info.session_ended is True:
-            log.error("The session is ended when pricing PNR")
-            return
-        if len(res_price) == 0:
-            log.error("No price found")
-            return
+    company_id = res_reservation["pnr_header"].company_id
+    log.info("2. Pricing PNR ***********************************")
+    message_id = session_info.message_id
+    passengers = [p.name_id for p in res_reservation["passengers"]]
+    print(passengers)
+    segments = [s.segment_reference for s in res_reservation["itineraries"]]
+    print("****** Values passengers and segments")
+    print(passengers, segments)
+    price_request = PriceRequest(passengers, segments, "PUB")
+    res_price = client.fare_price_pnr_with_booking_class(message_id, price_request)
+    session_info, res_price = (res_price.session_info, res_price.payload)
+    log.info(session_info)
+    log.info(res_price)
+    if session_info.session_ended is True:
+        log.error("The session is ended when pricing PNR")
+        return
+    if len(res_price) == 0:
+        log.error("No price found")
+        return
     log.info("3. Creating TST")
     tst = res_price[0].fare_reference
     message_id = session_info.message_id
@@ -72,9 +72,9 @@ def test():
 
     log.info("4. Add form of payment")
     message_id = session_info.message_id
-    # fop = CheckPayment("CHEQUE", "MOO")
-    fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
-    res_fop = client.add_form_of_payment(message_id, fop, segments, passengers, None, "1")
+    fop = ChashPayment(p_code="VI", company_code=company_id)
+    # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
+    res_fop = client.add_form_of_payment(message_id, fop, [], [], None, "1")
     # session_info, res_fop = (res_fop.session_info, res_fop.payload)
     # log.info(session_info)
     log.info(res_fop)
@@ -101,12 +101,13 @@ def test():
         log.error("The session is ended when ticketing")
         return
 
-        # res_reservation = client.get_reservation(pnr, message_id, False)
-        # cancel_response = client.cancel_pnr(message_id, False)
-        # session_info, cancel_response = (cancel_response.session_info, cancel_response.payload)
-        # log.info(cancel_response)
-        # if session_info.session_ended is False:
-        #     client.end_session(message_id)
+    client.close_session(message_id)
+    # res_reservation = client.get_reservation(pnr, message_id, False)
+    # cancel_response = client.cancel_pnr(message_id, False)
+    # session_info, cancel_response = (cancel_response.session_info, cancel_response.payload)
+    # log.info(cancel_response)
+    # if session_info.session_ended is False:
+    #     client.end_session(message_id)
     # elif sesion_info.session_ended is False:
     #     client.end_session(message_id)
     # except ClientError as ce:
diff --git a/ticket_price_issue_combine.zip b/ticket_price_issue_combine.zip
new file mode 100644
index 0000000000000000000000000000000000000000..0703483f55a38ab4176f3120aabfc9cbd2df7f37
GIT binary patch
literal 36056
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
Ze=8Q`rGpdz0OjTD=;c8HGk&i>{U68i2O9tY

literal 0
HcmV?d00001

-- 
2.17.1


From 768b87e874a665d40e4a70a712d15279c076cbef Mon Sep 17 00:00:00 2001
From: amadou <diallo1994>
Date: Mon, 18 Nov 2019 19:27:17 +0000
Subject: [PATCH 46/46] add frn

---
 low_fare_search_fop_v1.zip                    | Bin 92706 -> 0 bytes
 low_fare_search_fop_without_combine.zip       | Bin 58399 -> 0 bytes
 price_ticket_fop.zip                          | Bin 27579 -> 0 bytes
 pygds/amadeus/client.py                       |  10 ++++
 .../amadeus/xml_parsers/response_extractor.py |   2 +-
 pygds/amadeus/xmlbuilders/builder.py          |  49 ++++++++++++++++++
 pygds/tests/amadeus/test_issue_combine.py     |  15 +++---
 ticket_price_issue_combine.zip                | Bin 36056 -> 0 bytes
 8 files changed, 69 insertions(+), 7 deletions(-)
 delete mode 100644 low_fare_search_fop_v1.zip
 delete mode 100644 low_fare_search_fop_without_combine.zip
 delete mode 100644 price_ticket_fop.zip
 delete mode 100644 ticket_price_issue_combine.zip

diff --git a/low_fare_search_fop_v1.zip b/low_fare_search_fop_v1.zip
deleted file mode 100644
index dd122658850f60fcced6928530582936de6d8d15..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 92706
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
NzIQ>W0R#T`{{e9yl+FME

diff --git a/low_fare_search_fop_without_combine.zip b/low_fare_search_fop_without_combine.zip
deleted file mode 100644
index a328862d5d6e788d74a45adcb015d1ee4c848e93..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 58399
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
D>=CVG

diff --git a/price_ticket_fop.zip b/price_ticket_fop.zip
deleted file mode 100644
index d3c03fba926ee14fe27bb54ec9b0c464f8b27151..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 27579
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
bqp^S3l*&upgNJk}7WhXNta?+^hg|(XC0hR)

diff --git a/pygds/amadeus/client.py b/pygds/amadeus/client.py
index 4695827..590b6be 100644
--- a/pygds/amadeus/client.py
+++ b/pygds/amadeus/client.py
@@ -231,6 +231,16 @@ class AmadeusClient(BaseClient):
 
         return response_data
 
+    def get_fare_rules(self, ticketing_date, rate_class, company_id, origin, destination):
+
+        request_data = self.xml_builder.get_fare_rules(ticketing_date, rate_class, company_id, origin, destination)
+        response_data = self.__request_wrapper("get fare rules", request_data,
+                                               'http://webservices.amadeus.com/FARRNQ_10_1_1A')
+
+        response_data = SessionExtractor(response_data).extract()
+
+        return response_data
+
     def fare_check_rules(self, message_id, line_number):
         session_id, sequence_number, security_token = self.get_or_create_session_details(message_id)
         if security_token is None:
diff --git a/pygds/amadeus/xml_parsers/response_extractor.py b/pygds/amadeus/xml_parsers/response_extractor.py
index 0419bba..d8e9247 100644
--- a/pygds/amadeus/xml_parsers/response_extractor.py
+++ b/pygds/amadeus/xml_parsers/response_extractor.py
@@ -154,7 +154,7 @@ class PriceSearchExtractor(BaseResponseExtractor):
             segment_flights = from_json_safe(rec, "segmentFlightRef")
             segment_flights = ensure_list(segment_flights)
             for seg in segment_flights:
-                reco = {"price": price, "currency": currency}
+                reco = {"price": price, "currency": currency, "rec": rec}
                 itineraries = []
                 flight_indexes = from_json_safe(seg, "referencingDetail")
                 flight_indexes = ensure_list(flight_indexes)
diff --git a/pygds/amadeus/xmlbuilders/builder.py b/pygds/amadeus/xmlbuilders/builder.py
index e68985a..ee44415 100644
--- a/pygds/amadeus/xmlbuilders/builder.py
+++ b/pygds/amadeus/xmlbuilders/builder.py
@@ -422,6 +422,55 @@ class AmadeusXMLBuilder:
                 </soapenv:Envelope>
                 """
 
+    def get_fare_rules(self, ticketing_date, rate_class, company_id, origin, destination):
+
+        message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
+        security_part = self.new_transaction_chunk(self.office_id, self.username, nonce, digested_password,
+                                                   created_date_time, True)
+        header = f"""<soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
+                        <add:MessageID>{message_id}</add:MessageID>
+                        <add:Action>http://webservices.amadeus.com/FARRNQ_10_1_1A</add:Action>
+                        <add:To>{self.endpoint}/{self.wsap}</add:To>
+                        {security_part}
+                    </soapenv:Header>"""
+
+        return f"""
+                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sec="http://xml.amadeus.com/2010/06/Security_v1" xmlns:typ="http://xml.amadeus.com/2010/06/Types_v1" xmlns:iat="http://www.iata.org/IATA/2007/00/IATA2010.1" xmlns:app="http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3" xmlns:link="http://wsdl.amadeus.com/2010/06/ws/Link_v1" xmlns:ses="http://xml.amadeus.com/2010/06/Session_v3">
+                    {header}
+                    <soapenv:Body>    
+                    <Fare_GetFareRules>
+                        <msgType>
+                            <messageFunctionDetails>
+                                <messageFunction>FRN</messageFunction>
+                            </messageFunctionDetails>
+                        </msgType>
+                        <pricingTickInfo>
+                            <productDateTimeDetails>
+                                <ticketingDate>{ticketing_date}</ticketingDate>
+                            </productDateTimeDetails>
+                        </pricingTickInfo>
+                        <flightQualification>
+                            <additionalFareDetails>
+                                <rateClass>{rate_class}</rateClass>
+                            </additionalFareDetails>
+                        </flightQualification>
+                        <transportInformation>
+                            <transportService>
+                                <companyIdentification>
+                                    <marketingCompany>{company_id}</marketingCompany>
+                                </companyIdentification>
+                            </transportService>
+                        </transportInformation>
+                        <tripDescription>
+                            <origDest>
+                                <origin>{origin}</origin>
+                                <destination>{destination}</destination>
+                            </origDest>
+                        </tripDescription>
+                    </Fare_GetFareRules>
+                </soapenv:Body>
+            </soapenv:Envelope> """
+
     def sell_from_recomendation(self, itineraries):
 
         message_id, nonce, created_date_time, digested_password = self.ensure_security_parameters(None, None, None)
diff --git a/pygds/tests/amadeus/test_issue_combine.py b/pygds/tests/amadeus/test_issue_combine.py
index 0ca3c30..61d3c1d 100644
--- a/pygds/tests/amadeus/test_issue_combine.py
+++ b/pygds/tests/amadeus/test_issue_combine.py
@@ -112,6 +112,9 @@ def test():
 
         log.info("End of informative pricing without pnr")
 
+        fare_basis = results[0]["rec"]["paxFareProduct"]["fareDetails"]["groupOfFares"][0]["productInformation"]["fareProductDetail"]["fareBasis"]
+        marketing_company = results[0]['itineraries'][0][0]["marketing_company"]
+        client.get_fare_rules("231119", fare_basis, marketing_company, "CDG", "DTW")
         result_sell = client.sell_from_recommandation(list_segments)
 
         result_sell, session_info = (result_sell.payload, result_sell.session_info)
@@ -124,8 +127,8 @@ def test():
 
         # message_id = session_info.message_id  # is the message_id to use for the all others actions
 
-        traveller_infos = [TravellerInfo(2, "Amadou", "Diallo", "Diallo", "03121983", "ADT", "P////17MAY12/M/19FEB26/ABRAHAM/SELAH"),
-                           TravellerInfo(3, "Khouna", "Khouna", "Fall", "03121976", "ADT", "P////17MAY12/M/19FEB26/ABRAHAM/SELAH")]
+        traveller_infos = [TravellerInfo(2, "Amadou", "Diallo", "Diallo", "03121983", "ADT", "P////03DEC83/M//AMADOU/DIALLO"),
+                           TravellerInfo(3, "Kouna", "Kouna", "Fall", "03121976", "ADT", "P////03DEC76/F//KHOUNA/FALL")]
 
         reservation_info = ReservationInfo(traveller_infos, "776656986", "785679876", "saliou@gmail.com")
 
@@ -197,8 +200,8 @@ def test():
 
         message_id = session_info.message_id
 
-        log.info(client.create_tsm(message_id, pax_refs[0], "f"))
-        log.info(client.create_tsm(message_id, pax_refs[1], "f"))
+        # log.info(client.create_tsm(message_id, pax_refs[0], "f"))
+        # log.info(client.create_tsm(message_id, pax_refs[1], "f"))
 
         # fop = CheckPayment("CHEQUE", "MOO")
         # fop = CreditCard(company_id, "VI", "4400009999990004", "999", "", "0838")
@@ -226,8 +229,8 @@ def test():
         # log.info("Begin Ticket ************************************************************************")
 
         message_id = session_info.message_id
-        # res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
-        res_ticket = client.issue_combined(message_id, passengers=pax_refs, segments=[], retrieve_pnr=False)
+        res_ticket = client.issue_ticket_with_retrieve(message_id, tst_refs, [])
+        # res_ticket = client.issue_combined(message_id, passengers=pax_refs, segments=[], retrieve_pnr=False)
         # session_info, res_ticket = (res_ticket.session_info, res_ticket.payload)
         log.info(res_ticket)
 
diff --git a/ticket_price_issue_combine.zip b/ticket_price_issue_combine.zip
deleted file mode 100644
index 0703483f55a38ab4176f3120aabfc9cbd2df7f37..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 36056
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
Ze=8Q`rGpdz0OjTD=;c8HGk&i>{U68i2O9tY

-- 
2.17.1

